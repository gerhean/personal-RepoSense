[{"path":".gitignore","fileType":"gitignore","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Gradle build files"},{"lineNumber":2,"author":{"gitId":"-"},"content":"/.gradle/"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/build/"},{"lineNumber":4,"author":{"gitId":"-"},"content":"src/main/resources/docs/"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"# IDEA files"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"/.idea/*"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"# Except the codeStyles"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"!/.idea/codeStyles/"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/out/"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/*.iml"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"# Storage/log files"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/data/"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/config.json"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/preferences.json"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/*.log.*"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"# Test sandbox files"},{"lineNumber":20,"author":{"gitId":"-"},"content":"src/test/data/sandbox/"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# MacOS custom attributes files created by Finder"},{"lineNumber":23,"author":{"gitId":"-"},"content":".DS_Store"}],"authorContributionMap":{"gerhean":3,"-":20}},{"path":".idea/codeStyles/Project.xml","fileType":"xml","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"\u003ccomponent name\u003d\"ProjectCodeStyleConfiguration\"\u003e"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":"  \u003ccode_scheme name\u003d\"Project\" version\u003d\"173\"\u003e"},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"    \u003coption name\u003d\"LINE_SEPARATOR\" value\u003d\"\u0026#13;\u0026#10;\" /\u003e"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"    \u003cJavaCodeStyleSettings\u003e"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"      \u003coption name\u003d\"CLASS_NAMES_IN_JAVADOC\" value\u003d\"2\" /\u003e"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"      \u003coption name\u003d\"CLASS_COUNT_TO_USE_IMPORT_ON_DEMAND\" value\u003d\"999\" /\u003e"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"      \u003coption name\u003d\"NAMES_COUNT_TO_USE_IMPORT_ON_DEMAND\" value\u003d\"999\" /\u003e"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"      \u003coption name\u003d\"PACKAGES_TO_USE_IMPORT_ON_DEMAND\"\u003e"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"        \u003cvalue /\u003e"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"      \u003c/option\u003e"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"      \u003coption name\u003d\"IMPORT_LAYOUT_TABLE\"\u003e"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"        \u003cvalue\u003e"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"          \u003cpackage name\u003d\"\" withSubpackages\u003d\"true\" static\u003d\"true\" /\u003e"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"          \u003cemptyLine /\u003e"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"          \u003cpackage name\u003d\"javax\" withSubpackages\u003d\"true\" static\u003d\"false\" /\u003e"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"          \u003cpackage name\u003d\"java\" withSubpackages\u003d\"true\" static\u003d\"false\" /\u003e"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"          \u003cemptyLine /\u003e"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"          \u003cpackage name\u003d\"org\" withSubpackages\u003d\"true\" static\u003d\"false\" /\u003e"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"          \u003cemptyLine /\u003e"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"          \u003cpackage name\u003d\"\" withSubpackages\u003d\"true\" static\u003d\"false\" /\u003e"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"          \u003cemptyLine /\u003e"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"          \u003cpackage name\u003d\"seedu\" withSubpackages\u003d\"true\" static\u003d\"false\" /\u003e"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"        \u003c/value\u003e"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"      \u003c/option\u003e"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"      \u003coption name\u003d\"JD_ALIGN_PARAM_COMMENTS\" value\u003d\"false\" /\u003e"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"      \u003coption name\u003d\"JD_ALIGN_EXCEPTION_COMMENTS\" value\u003d\"false\" /\u003e"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"      \u003coption name\u003d\"JD_P_AT_EMPTY_LINES\" value\u003d\"false\" /\u003e"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"      \u003coption name\u003d\"JD_PRESERVE_LINE_FEEDS\" value\u003d\"true\" /\u003e"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"    \u003c/JavaCodeStyleSettings\u003e"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"    \u003ccodeStyleSettings language\u003d\"JAVA\"\u003e"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"      \u003coption name\u003d\"LINE_COMMENT_AT_FIRST_COLUMN\" value\u003d\"false\" /\u003e"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"      \u003coption name\u003d\"LINE_COMMENT_ADD_SPACE\" value\u003d\"true\" /\u003e"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"      \u003coption name\u003d\"KEEP_FIRST_COLUMN_COMMENT\" value\u003d\"false\" /\u003e"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"      \u003coption name\u003d\"KEEP_CONTROL_STATEMENT_IN_ONE_LINE\" value\u003d\"false\" /\u003e"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"      \u003coption name\u003d\"INDENT_CASE_FROM_SWITCH\" value\u003d\"false\" /\u003e"},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"      \u003coption name\u003d\"ALIGN_MULTILINE_PARAMETERS\" value\u003d\"false\" /\u003e"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"      \u003coption name\u003d\"BINARY_OPERATION_WRAP\" value\u003d\"1\" /\u003e"},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"      \u003coption name\u003d\"BINARY_OPERATION_SIGN_ON_NEXT_LINE\" value\u003d\"true\" /\u003e"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"      \u003coption name\u003d\"WRAP_COMMENTS\" value\u003d\"true\" /\u003e"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"      \u003coption name\u003d\"IF_BRACE_FORCE\" value\u003d\"3\" /\u003e"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"      \u003coption name\u003d\"DOWHILE_BRACE_FORCE\" value\u003d\"3\" /\u003e"},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"      \u003coption name\u003d\"WHILE_BRACE_FORCE\" value\u003d\"3\" /\u003e"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"      \u003coption name\u003d\"FOR_BRACE_FORCE\" value\u003d\"3\" /\u003e"},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"      \u003coption name\u003d\"WRAP_LONG_LINES\" value\u003d\"true\" /\u003e"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"      \u003cindentOptions\u003e"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"        \u003coption name\u003d\"CONTINUATION_INDENT_SIZE\" value\u003d\"4\" /\u003e"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"      \u003c/indentOptions\u003e"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"    \u003c/codeStyleSettings\u003e"},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"  \u003c/code_scheme\u003e"},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"\u003c/component\u003e"}],"authorContributionMap":{"gerhean":50}},{"path":".idea/codeStyles/codeStyleConfig.xml","fileType":"xml","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"\u003ccomponent name\u003d\"ProjectCodeStyleConfiguration\"\u003e"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":"  \u003cstate\u003e"},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"    \u003coption name\u003d\"USE_PER_PROJECT_SETTINGS\" value\u003d\"true\" /\u003e"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"    \u003coption name\u003d\"PREFERRED_PROJECT_CODE_STYLE\" value\u003d\"Project\"/\u003e"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"  \u003c/state\u003e"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"\u003c/component\u003e"}],"authorContributionMap":{"gerhean":6}},{"path":"README.adoc","fileType":"adoc","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003d Internship Diary"},{"lineNumber":2,"author":{"gitId":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"https://travis-ci.com/AY1920S2-CS2103T-F10-2/main[image:https://travis-ci.com/AY1920S2-CS2103T-F10-2/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"// https://ci.appveyor.com/project/damithc/addressbook-level3[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"https://coveralls.io/github/AY1920S2-CS2103T-F10-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S2-CS2103T-F10-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"image:https://api.codacy.com/project/badge/Grade/70331172a39b4f2293247b771b2928cc[\"Codacy code quality\", link\u003d\"https://www.codacy.com/gh/AY1920S2-CS2103T-F10-2/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dAY1920S2-CS2103T-F10-2/main\u0026utm_campaign\u003dBadge_Grade\"]"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitId":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"endif::[]"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"ifndef::env-github[]"},{"lineNumber":14,"author":{"gitId":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":15,"author":{"gitId":"-"},"content":"endif::[]"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"Have you ever sent out an internship application only to find out that you have already applied to that company already?"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Have you ever wondered which stage of an internship application you should put more effort into?"},{"lineNumber":19,"author":{"gitId":"-"},"content":"As you send internship applications to many different sites and companies, it may be hard or troublesome to keep track of all your applications."},{"lineNumber":20,"author":{"gitId":"-"},"content":"We want to make it easier for you -- by helping you to track your internship applications."},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"Internship Diary is a desktop internship application tracker that simplifies the process of tracking your internship applications, so that you can focus"},{"lineNumber":23,"author":{"gitId":"-"},"content":"on landing your dream internship. If you are a computer science student who loves dabbling with a Command Line Interface (CLI), then this application is for you."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"Sounds interesting? Head over to our User Guide to get started!"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"Internship Diary is an open source project and we welcome any contributions from the community. If you are interested in contributing, feel free to head over to our Developer Guide to find out more!"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"* The application is based on Address Book Level 3 from SE-EDU initiative at https://se-education.org ."},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"gerhean":5,"-":35}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"// Gradle Configuration File"},{"lineNumber":2,"author":{"gitId":"-"},"content":"// For more details take a look at the Java Quickstart chapter in the Gradle"},{"lineNumber":3,"author":{"gitId":"-"},"content":"// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.gradle.api.tasks.testing.logging.TestLogEvent"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"// Specifies the entry point of the application"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"mainClassName \u003d \u0027seedu.diary.Main\u0027"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.1\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"jacocoTestReport {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    reports {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        xml.enabled false"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        csv.enabled false"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        html.destination file(\"${buildDir}/jacocoHtml\")"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":62,"author":{"gitId":"gerhean"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":63,"author":{"gitId":"gerhean"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":66,"author":{"gitId":"gerhean"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":67,"author":{"gitId":"gerhean"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":68,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    archiveName \u003d \u0027internshipdiary.jar\u0027"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    destinationDir \u003d file(\"${buildDir}/jar/\")"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    afterEvaluate {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        })"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    reports {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        html.enabled \u003d true"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        xml.enabled \u003d true"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"coveralls {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""},{"lineNumber":101,"author":{"gitId":"-"},"content":"}"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"tasks.coveralls {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    dependsOn coverage"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    onlyIf { System.env.\u0027CI\u0027 }"},{"lineNumber":106,"author":{"gitId":"-"},"content":"}"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // Prints the currently running test\u0027s name in the CI\u0027s build log,"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // so that we can check if tests are being silently skipped or"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // stalling the build."},{"lineNumber":115,"author":{"gitId":"-"},"content":"        if (System.env.\u0027CI\u0027) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            events \u003c\u003c TestLogEvent.STARTED"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    jacoco {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"asciidoctor {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    backends \u0027html5\u0027"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    sourceDir \u0027docs\u0027"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    outputDir \"${buildDir}/docs\""},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    options \u003d ["},{"lineNumber":131,"author":{"gitId":"-"},"content":"        template_dirs: [file(\"${sourceDir}/templates\")],"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    ]"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    attributes \u003d ["},{"lineNumber":135,"author":{"gitId":"-"},"content":"        linkcss: true,"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        stylesheet: \u0027gh-pages.css\u0027,"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        \u0027source-highlighter\u0027: \u0027coderay\u0027,"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        icons: \u0027font\u0027,"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        experimental: true,"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        sectlinks: true,"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        idseparator: \u0027-\u0027,"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        \u0027site-name\u0027: \u0027Internship Diary\u0027,"},{"lineNumber":145,"author":{"gitId":"gerhean"},"content":"        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-F10-2/main\u0027,"},{"lineNumber":146,"author":{"gitId":"gerhean"},"content":"        // \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    ]"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    options[\u0027template_dirs\u0027].each {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        inputs.files fileTree(it)"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":"}"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"// Copies stylesheets into the directory containing generated HTML files as"},{"lineNumber":155,"author":{"gitId":"-"},"content":"// Asciidoctor does not copy linked CSS files to the output directory when rendering."},{"lineNumber":156,"author":{"gitId":"-"},"content":"// This is needed for linked stylesheets and embedded stylesheets which import other files."},{"lineNumber":157,"author":{"gitId":"-"},"content":"task copyStylesheets(type: Copy) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    from \"${asciidoctor.sourceDir}/stylesheets\""},{"lineNumber":159,"author":{"gitId":"-"},"content":"    into \"${asciidoctor.outputDir}/html5/stylesheets\""},{"lineNumber":160,"author":{"gitId":"-"},"content":"}"},{"lineNumber":161,"author":{"gitId":"-"},"content":"asciidoctor.dependsOn copyStylesheets"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"gradle.projectsEvaluated {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    tasks.withType(JavaCompile) {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        options.compilerArgs \u003c\u003c \"-Xlint:unchecked\""},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":11,"-":159}},{"path":"docs/AboutUs.adoc","fileType":"adoc","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitId":"-"},"content":":site-section: AboutUs"},{"lineNumber":3,"author":{"gitId":"-"},"content":":relfileprefix: team/"},{"lineNumber":4,"author":{"gitId":"-"},"content":":imagesDir: images"},{"lineNumber":5,"author":{"gitId":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Internship Diary is developed by the https://github.com/AY1920S2-CS2103T-F10-2/main[AY1920S2-CS2103T-F10-2] team. +"},{"lineNumber":8,"author":{"gitId":"-"},"content":"{empty} +"},{"lineNumber":9,"author":{"gitId":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Ong Choon Han"},{"lineNumber":14,"author":{"gitId":"-"},"content":"image::ongch00.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":15,"author":{"gitId":"-"},"content":"{empty}[https://github.com/ongch00[github]] [\u003c\u003congch00#, portfolio\u003e\u003e]"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"Role:"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Product Management"},{"lineNumber":20,"author":{"gitId":"-"},"content":"* Developer"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"Responsibilities:"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"* Find Command"},{"lineNumber":25,"author":{"gitId":"-"},"content":"* Highlight for Upcoming and Ghosted Internship Applications"},{"lineNumber":26,"author":{"gitId":"-"},"content":"* Application Release Management"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Ong Wei Xiang"},{"lineNumber":31,"author":{"gitId":"-"},"content":"image::wxwxwxwx9.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"{empty}[http://github.com/wxwxwxwx9[github]] [\u003c\u003cwxwxwxwx9#, portfolio\u003e\u003e]"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"Role:"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"* Quality Assurance"},{"lineNumber":37,"author":{"gitId":"-"},"content":"* Developer"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"Responsibilities:"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"* Archival System"},{"lineNumber":42,"author":{"gitId":"-"},"content":"* Observer Pattern"},{"lineNumber":43,"author":{"gitId":"-"},"content":"* Multi-Execution Types for Removal-Based Commands"},{"lineNumber":44,"author":{"gitId":"-"},"content":"* Statistics / Metrics Dashboard"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"\u003d\u003d\u003d Chan Ger Hean"},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"image::female_student_happy.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"{empty}[https://gerhean.github.io/[homepage]][http://github.com/gerhean[github]] [\u003c\u003cgerhean#, portfolio\u003e\u003e]"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"Role:"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"* Technical Lead"},{"lineNumber":55,"author":{"gitId":"-"},"content":"* Developer"},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"Responsibilities:"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"* Sort Command"},{"lineNumber":60,"author":{"gitId":"-"},"content":"* Clear Command"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* Command History"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* Sort/Find Display Footer"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Felicia Tay Wan Yee"},{"lineNumber":67,"author":{"gitId":"-"},"content":"image::feliciatay.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":68,"author":{"gitId":"-"},"content":"{empty}[https://github.com/FeliciaTay[github]] [\u003c\u003cfeliciatay#, portfolio\u003e\u003e]"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"Role:"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"* Documentation Lead"},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Developer"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"Responsibilities:"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"* Reminder Command"},{"lineNumber":78,"author":{"gitId":"-"},"content":"* Display of Last Stage before Internship Application was Ghosted or Rejected"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Foo Chi Fa"},{"lineNumber":83,"author":{"gitId":"-"},"content":"image::foochifa.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":84,"author":{"gitId":"-"},"content":"{empty}[http://github.com/foochifa[github]] [\u003c\u003cfoochifa#, portfolio\u003e\u003e]"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"Role:"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"* Project Management"},{"lineNumber":89,"author":{"gitId":"-"},"content":"* Developer"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"Responsibilities:"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"* Interview Classes and Interview Command"},{"lineNumber":94,"author":{"gitId":"-"},"content":"* Internship Application Detail Panel and Select Command"},{"lineNumber":95,"author":{"gitId":"-"},"content":"* Milestone and Issues Coordination"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"gerhean":4,"-":93}},{"path":"docs/ContactUs.adoc","fileType":"adoc","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003d Contact Us"},{"lineNumber":2,"author":{"gitId":"-"},"content":":site-section: ContactUs"},{"lineNumber":3,"author":{"gitId":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S2-CS2103T-F10-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."},{"lineNumber":6,"author":{"gitId":"-"},"content":"* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"},{"lineNumber":7,"author":{"gitId":"-"},"content":"* *Email us* : You can also reach us at `weixiangong96@u.nus.edu`"}],"authorContributionMap":{"gerhean":1,"-":6}},{"path":"docs/DeveloperGuide.adoc","fileType":"adoc","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003d Internship Diary - Developer Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":":site-section: DeveloperGuide"},{"lineNumber":3,"author":{"gitId":"-"},"content":":toc:"},{"lineNumber":4,"author":{"gitId":"-"},"content":":toclevels: 5"},{"lineNumber":5,"author":{"gitId":"-"},"content":":toc-title:"},{"lineNumber":6,"author":{"gitId":"-"},"content":":toc-placement: preamble"},{"lineNumber":7,"author":{"gitId":"-"},"content":":sectnums:"},{"lineNumber":8,"author":{"gitId":"-"},"content":":sectnumlevels: 5"},{"lineNumber":9,"author":{"gitId":"-"},"content":":imagesDir: images"},{"lineNumber":10,"author":{"gitId":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":11,"author":{"gitId":"-"},"content":":xrefstyle: full"},{"lineNumber":12,"author":{"gitId":"-"},"content":"ifdef::env-github[]"},{"lineNumber":13,"author":{"gitId":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":14,"author":{"gitId":"-"},"content":":note-caption: :information_source:"},{"lineNumber":15,"author":{"gitId":"-"},"content":":warning-caption: :warning:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"endif::[]"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":":repoURL: https://github.com/AY1920S2-CS2103T-F10-2/main/tree/master"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"By: `CS2103T-F10-2`      Since: `Feb 2020`      Licence: `MIT`"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"This developer guide is written for software developers or designers who wish to contribute to the project."},{"lineNumber":24,"author":{"gitId":"-"},"content":"However, you may also use it if you wish to gain deeper insight into the system design and implementation of *Internship Diary*."},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"\u003d\u003d Setting Up"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"\u003d\u003d Design"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":33,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":".Architecture Diagram"},{"lineNumber":36,"author":{"gitId":"-"},"content":"image::ArchitectureDiagram.png[]"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App."},{"lineNumber":39,"author":{"gitId":"-"},"content":"Given below is a quick overview of each component."},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"`Main` has two classes called link:{repoURL}/src/main/java/seedu/diary/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/diary/MainApp.java[`MainApp`]."},{"lineNumber":42,"author":{"gitId":"-"},"content":"It is responsible for,"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":45,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."},{"lineNumber":48,"author":{"gitId":"-"},"content":"The following class plays an important role at the architecture level:"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":55,"author":{"gitId":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":56,"author":{"gitId":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":57,"author":{"gitId":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"Each of the four components"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":62,"author":{"gitId":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"For example, the `Logic` component (refer to \u003c\u003cfig-LogicClassDiagram,*`Logic Class Diagram`*\u003e\u003e) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"[discrete]"},{"lineNumber":67,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d How the architecture components interact with each other"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":".Component interactions for `delete 1` command"},{"lineNumber":72,"author":{"gitId":"-"},"content":"image::ArchitectureSequenceDiagram.png[]"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"[[Design-Ui]]"},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d UI Component"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":".Structure of the UI Component"},{"lineNumber":80,"author":{"gitId":"-"},"content":"image::UiClassDiagram.png[]"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"gerhean"},"content":"*API* : link:{repoURL}/src/main/java/seedu/diary/ui/Ui.java[`Ui.java`]"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `InternshipApplicationListPanel`, `StatusBarFooter` etc."},{"lineNumber":85,"author":{"gitId":"-"},"content":"All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework."},{"lineNumber":88,"author":{"gitId":"-"},"content":"The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder."},{"lineNumber":89,"author":{"gitId":"-"},"content":"For example, the layout of the link:{repoURL}/src/main/java/seedu/diary/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":94,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"[[Design-Logic]]"},{"lineNumber":97,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Logic Component"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":100,"author":{"gitId":"-"},"content":".Structure of the Logic Component"},{"lineNumber":101,"author":{"gitId":"-"},"content":"image::LogicClassDiagram.png[]"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"*API* :"},{"lineNumber":104,"author":{"gitId":"gerhean"},"content":"link:{repoURL}/src/main/java/seedu/diary/logic/Logic.java[`Logic.java`]"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":". `Logic` uses the `InternshipDiaryParser` class to parse the user command."},{"lineNumber":107,"author":{"gitId":"-"},"content":". This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":108,"author":{"gitId":"-"},"content":". The command execution can affect the `Model` (e.g. adding an internship application)."},{"lineNumber":109,"author":{"gitId":"-"},"content":". The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":110,"author":{"gitId":"-"},"content":". In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"select 1\")` API call."},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":".Interactions Inside the Logic Component for the `select 1` Command"},{"lineNumber":115,"author":{"gitId":"-"},"content":"image::SelectSequenceDiagram.png[]"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"NOTE: The lifeline for `SelectCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"[[Design-Model]]"},{"lineNumber":120,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Model Component"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":".Structure of the Model Component"},{"lineNumber":123,"author":{"gitId":"-"},"content":"image::ModelClassDiagram.png[]"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"gerhean"},"content":"*API* : link:{repoURL}/src/main/java/seedu/diary/model/Model.java[`Model.java`]"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":130,"author":{"gitId":"-"},"content":"* stores the Internship Diary data."},{"lineNumber":131,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cInternshipApplication\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":132,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"[[Design-Storage]]"},{"lineNumber":135,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Storage Component"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":".Structure of the Storage Component"},{"lineNumber":138,"author":{"gitId":"-"},"content":"image::StorageClassDiagram.png[]"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"gerhean"},"content":"*API* : link:{repoURL}/src/main/java/seedu/diary/storage/Storage.java[`Storage.java`]"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in JSON format and read it back."},{"lineNumber":145,"author":{"gitId":"-"},"content":"* can save the `InternshipDiary` data in JSON format and read it back."},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"[[Design-Commons]]"},{"lineNumber":148,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Common Classes"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"gerhean"},"content":"Classes used by multiple components are in the `seedu.diary.commons` package."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"gerhean"},"content":"// tag::sort[]"},{"lineNumber":157,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Sort Command"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"gerhean"},"content":"The sort command allows the user to sort the currently visible list of internship applications."},{"lineNumber":160,"author":{"gitId":"-"},"content":"The following sequence diagram will illustrate the process of invocation for the command:"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"gerhean"},"content":".Interactions inside the `Logic` Component for the `sort c/` command"},{"lineNumber":163,"author":{"gitId":"gerhean"},"content":"image::SortSequenceDiagram.png[]"},{"lineNumber":164,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":165,"author":{"gitId":"gerhean"},"content":"The following subsections will go through the general implementations of the sort command."},{"lineNumber":166,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":167,"author":{"gitId":"gerhean"},"content":"\u003d\u003d\u003d\u003d Implementation"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"gerhean"},"content":"The sort command is implemented in the class `SortCommand` and uses the `SortCommandParser` class to parse the arguments for the command."},{"lineNumber":170,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":171,"author":{"gitId":"gerhean"},"content":"To facilitate the sort command, several comparator classes implementing `Comparator\u003cInternshipApplication\u003e` are used:"},{"lineNumber":172,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"* `ApplicationDateComparator` -- Comparator to compare internship applications by their `ApplicationDate` field in chronological order."},{"lineNumber":174,"author":{"gitId":"-"},"content":"* `CompanyComparator` -- Comparator to compare internship applications by their `Company` field in lexicographical order."},{"lineNumber":175,"author":{"gitId":"-"},"content":"* `PriorityComparator` -- Comparator to compare internship applications by their `Priority` field in ascending order."},{"lineNumber":176,"author":{"gitId":"-"},"content":"* `RoleComparator` -- Comparator to compare internship applications by their `Role` field in lexicographical order."},{"lineNumber":177,"author":{"gitId":"-"},"content":"* `StatusComparator` -- Comparator to compare internship applications by their `Status` field by the order which they are declared in the Status Enum class."},{"lineNumber":178,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":179,"author":{"gitId":"gerhean"},"content":"The `SortCommandParser` stores all of these Comparators in an immutable static Map mapping a prefix to each Comparator object."},{"lineNumber":180,"author":{"gitId":"gerhean"},"content":"As the Comparators are all immutable, we can treat the Map as completely immutable."},{"lineNumber":181,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":182,"author":{"gitId":"gerhean"},"content":"The `SortCommandParser` looks for a acceptable prefix in the command, and passes the corresponding comparator to `SortCommand`."},{"lineNumber":183,"author":{"gitId":"gerhean"},"content":"If the number of such prefixes found is not exactly one, `SortCommandParser` throws a `ParseException`."},{"lineNumber":184,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":185,"author":{"gitId":"gerhean"},"content":"The `toString()` method of all Comparators have also been overridden with a description of the comparator, so as"},{"lineNumber":186,"author":{"gitId":"gerhean"},"content":"to allow the `DisplayComparatorFooter` to retrieve information of the current Comparator without passing a separate `String`"},{"lineNumber":187,"author":{"gitId":"gerhean"},"content":"to it."},{"lineNumber":188,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":189,"author":{"gitId":"gerhean"},"content":"[discrete]"},{"lineNumber":190,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Reverse Sort"},{"lineNumber":191,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"This version of the command is invoked when the user enters the command with `reverse` as the preamble text in the parameter, e.g. `sort reverse c/`."},{"lineNumber":193,"author":{"gitId":"-"},"content":"After retrieving the correct `comparator` to use, the parser would pass `comparator.reversed()` to the constructor of `SortCommand` instead of `comparator`."},{"lineNumber":194,"author":{"gitId":"gerhean"},"content":"This would reverse the order in which the currently visible list of internship applications is sorted in."},{"lineNumber":195,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":196,"author":{"gitId":"gerhean"},"content":"The `reversed()` method of the Comparators used have actually been overridden to return `ReversedComparator`, so as to override"},{"lineNumber":197,"author":{"gitId":"gerhean"},"content":"the `toString()` method of the newly created Comparator for the `DisplayComparatorFooter`."},{"lineNumber":198,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":199,"author":{"gitId":"gerhean"},"content":"The following class diagram will illustrate the overall structure of `SortCommand`:"},{"lineNumber":200,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":201,"author":{"gitId":"gerhean"},"content":".Structure of `SortCommand`"},{"lineNumber":202,"author":{"gitId":"gerhean"},"content":"image::ComparatorClassDiagram.png[]"},{"lineNumber":203,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":204,"author":{"gitId":"gerhean"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":205,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":206,"author":{"gitId":"gerhean"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How to sort by multiple fields"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"gerhean"},"content":"* **Alternative 1 (current choice)**: Accept only one field to sort by when using `SortCommand`."},{"lineNumber":209,"author":{"gitId":"gerhean"},"content":"This works as the list uses stable sort."},{"lineNumber":210,"author":{"gitId":"gerhean"},"content":"** Pros: More streamlined, less complex. +"},{"lineNumber":211,"author":{"gitId":"-"},"content":"`EnteredCommandsHistory` allows the user to get the sort command template back in just one press of the up arrow key so there is little hassle. +"},{"lineNumber":212,"author":{"gitId":"gerhean"},"content":"Users do not have to remember the order to place the arguments to get the sort they want."},{"lineNumber":213,"author":{"gitId":"gerhean"},"content":"** Cons: Hard to explain the concept of stable sort in the User Guide, if a more in depth explanation were to be given."},{"lineNumber":214,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":215,"author":{"gitId":"gerhean"},"content":"* **Alternative 2**: Allow multiple fields to sort by."},{"lineNumber":216,"author":{"gitId":"gerhean"},"content":"** Pros: Two less key presses."},{"lineNumber":217,"author":{"gitId":"gerhean"},"content":"** Cons: Code becomes much more complex. +"},{"lineNumber":218,"author":{"gitId":"gerhean"},"content":"Users has to remember the order to place the arguments to get the sort they want. +"},{"lineNumber":219,"author":{"gitId":"gerhean"},"content":"Users are highly unlikely to use this feature, as sorting one field by one feels more natural. +"},{"lineNumber":220,"author":{"gitId":"gerhean"},"content":"Harder to implement reverse sorting."},{"lineNumber":221,"author":{"gitId":"gerhean"},"content":"// end::sort[]"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"gerhean"},"content":"// tag::clear[]"},{"lineNumber":224,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Clear Command"},{"lineNumber":225,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"The clear command allows the user to delete all internship applications."},{"lineNumber":227,"author":{"gitId":"-"},"content":"The following sequence diagram will illustrate the process of invocation for the command:"},{"lineNumber":228,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":229,"author":{"gitId":"gerhean"},"content":".Interactions inside the `Logic` Component for `ClearCommand`."},{"lineNumber":230,"author":{"gitId":"gerhean"},"content":"image::ClearSequenceDiagram.png[]"},{"lineNumber":231,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":232,"author":{"gitId":"gerhean"},"content":"The following subsections will go through the general implementations of the clear command."},{"lineNumber":233,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":234,"author":{"gitId":"gerhean"},"content":"\u003d\u003d\u003d\u003d Implementation"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"gerhean"},"content":"The find command is implemented in the class `InitClearCommand`, `ClearCommand` and uses the"},{"lineNumber":237,"author":{"gitId":"gerhean"},"content":"`ClearCommandConfirmationParser` class to parse the arguments for the command."},{"lineNumber":238,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"The implementation for this command is unique as it causes \u0027LogicManager\u0027 to use `ClearCommandConfirmationParser`, which is a subclass of `InternshipDiaryParser`, as the main parser to parse the next user input."},{"lineNumber":240,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":241,"author":{"gitId":"gerhean"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":242,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":243,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How to prompt for confirmation"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"gerhean"},"content":"* **Alternative 1 (current choice)**: Implement an abstract method `getNextParser` for all commands."},{"lineNumber":246,"author":{"gitId":"gerhean"},"content":"** Pros: Easy to extend. +"},{"lineNumber":247,"author":{"gitId":"-"},"content":"New commands which require a prompt or alternative parsing do not need to further modify the `InternshipDiaryParser` or `LogicManager` class."},{"lineNumber":248,"author":{"gitId":"-"},"content":"** Cons: All commands will have to implement a `getNextParser` method."},{"lineNumber":249,"author":{"gitId":"-"},"content":"As `getNextParser` returns `null` for most commands, an abstract class is used."},{"lineNumber":250,"author":{"gitId":"-"},"content":"However, this means that commands cannot extend other abstract classes in the future."},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"* **Alternative 2**: Have `InternshipDiaryParser` have different modes depending on what command was last executed."},{"lineNumber":253,"author":{"gitId":"gerhean"},"content":"** Pros: Simple to understand."},{"lineNumber":254,"author":{"gitId":"gerhean"},"content":"** Cons: `InternshipDiaryParser` has no access to the next mode the command leads into, `LogicManager`"},{"lineNumber":255,"author":{"gitId":"gerhean"},"content":"needs to pass it into `InternshipDiaryParser`. +"},{"lineNumber":256,"author":{"gitId":"gerhean"},"content":"As the different modes do not share code, they are better off as separate classes."},{"lineNumber":257,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":258,"author":{"gitId":"gerhean"},"content":"* **Alternative 3**: Make a confirmation window which freeze the main window."},{"lineNumber":259,"author":{"gitId":"gerhean"},"content":"** Pros: The `InternshipDiaryParser` or `LogicManager` class may not need to be modified."},{"lineNumber":260,"author":{"gitId":"gerhean"},"content":"** Cons: Relies on global static methods which may lead to bugs in the future."},{"lineNumber":261,"author":{"gitId":"gerhean"},"content":"// end::clear[]"},{"lineNumber":262,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":263,"author":{"gitId":"gerhean"},"content":"// tag::command-history[]"},{"lineNumber":264,"author":{"gitId":"gerhean"},"content":"\u003d\u003d\u003d Command History"},{"lineNumber":265,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":266,"author":{"gitId":"gerhean"},"content":"The command history feature allows the user to press the up and down arrow keys to select previous commands."},{"lineNumber":267,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":268,"author":{"gitId":"gerhean"},"content":"The following activity diagram depicts the behaviour of the `CommandBox` while the user is entering commands."},{"lineNumber":269,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":270,"author":{"gitId":"gerhean"},"content":".Execution of command history feature."},{"lineNumber":271,"author":{"gitId":"gerhean"},"content":"image::CommandHistoryActivityDiagram.png[CommandHistory,200]"},{"lineNumber":272,"author":{"gitId":"gerhean"},"content":".Handle other key pressed."},{"lineNumber":273,"author":{"gitId":"gerhean"},"content":"image::CommandHistKeypessActivityDiagram.png[CommandHistory2,600]"},{"lineNumber":274,"author":{"gitId":"gerhean"},"content":".Execution cleanup."},{"lineNumber":275,"author":{"gitId":"gerhean"},"content":"image::CommandHistExeCleanupActivityDiagram.png[CommandHistory2,200]"},{"lineNumber":276,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":277,"author":{"gitId":"gerhean"},"content":"The following subsections will go through the general implementations of the command history feature."},{"lineNumber":278,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":279,"author":{"gitId":"gerhean"},"content":"\u003d\u003d\u003d\u003d Implementation"},{"lineNumber":280,"author":{"gitId":"gerhean"},"content":"The implementation of command history involves only the `UI` classes `CommandBox` and `EnteredCommandsHistory`."},{"lineNumber":281,"author":{"gitId":"gerhean"},"content":"Internally, `EnteredCommandsHistory` uses a `LinkedList` to store the command history. The `LinkedList` data structure"},{"lineNumber":282,"author":{"gitId":"gerhean"},"content":"was chosen the data structure needed to be a queue which also allows the last accessed element to be reaccessed quickly."},{"lineNumber":283,"author":{"gitId":"gerhean"},"content":"This meant that the data structure has to support random access or have a `ListIterator`. Unfortunately, Java\u0027s default"},{"lineNumber":284,"author":{"gitId":"gerhean"},"content":"`ArrayDeque` does not support either. While it is possible to implement an `ArrayDeque` with random access, the default"},{"lineNumber":285,"author":{"gitId":"gerhean"},"content":"`LinkedList` already provides a `ListIterator`. While this is potentially slower than an `ArrayDeque` with random access,"},{"lineNumber":286,"author":{"gitId":"gerhean"},"content":"for the sake of convenience, `LinkedList` was chosen."},{"lineNumber":287,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":288,"author":{"gitId":"gerhean"},"content":"Currently, a size limit of 20 is imposed on `EnteredCommandsHistory`. A limit is required as storing unlimited commands is not feasible."},{"lineNumber":289,"author":{"gitId":"gerhean"},"content":"Also, it is highly unlikely that users would need to see their entered commands beyond a certain point."},{"lineNumber":290,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":291,"author":{"gitId":"gerhean"},"content":"Although this feature is fairly simple and based off Windows Command Prompt, there were still a few design aspects worth considering."},{"lineNumber":292,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":293,"author":{"gitId":"gerhean"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":294,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":295,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: What should happen when down key is pressed when the latest history is being shown"},{"lineNumber":296,"author":{"gitId":"gerhean"},"content":"* **Alternative 1 (current choice)**: Blank the `CommandBox`."},{"lineNumber":297,"author":{"gitId":"gerhean"},"content":"** Pros: Provides users a fast way to clear the `CommandBox`."},{"lineNumber":298,"author":{"gitId":"gerhean"},"content":"** Cons: Users are unable to view their command history without losing the command they have typed."},{"lineNumber":299,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":300,"author":{"gitId":"gerhean"},"content":"* **Alternative 2**: Nothing (Same as Windows Command Prompt)."},{"lineNumber":301,"author":{"gitId":"gerhean"},"content":"** Pros: Easy to implement."},{"lineNumber":302,"author":{"gitId":"gerhean"},"content":"** Cons: Users are unable to view their command history without losing the command they have typed. +"},{"lineNumber":303,"author":{"gitId":"gerhean"},"content":"No fast way to clear the `CommandBox`."},{"lineNumber":304,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":305,"author":{"gitId":"gerhean"},"content":"* **Alternative 2**: Store and display the last modified text."},{"lineNumber":306,"author":{"gitId":"gerhean"},"content":"** Pros: Users can view their command history without losing the command they have typed."},{"lineNumber":307,"author":{"gitId":"gerhean"},"content":"** Cons: No fast way to clear the `CommandBox`. +"},{"lineNumber":308,"author":{"gitId":"gerhean"},"content":"Harder to implement."},{"lineNumber":309,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":310,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Should invalid commands be stored"},{"lineNumber":311,"author":{"gitId":"gerhean"},"content":"* **Alternative 1 (current choice)**: No."},{"lineNumber":312,"author":{"gitId":"gerhean"},"content":"** Pros: Reduces clutter in the command history."},{"lineNumber":313,"author":{"gitId":"gerhean"},"content":"** Cons: Users would not be able to see their failed attempts. +"},{"lineNumber":314,"author":{"gitId":"gerhean"},"content":"Users are unable to look at their command history without losing the command they have typed (due to above decision)."},{"lineNumber":315,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":316,"author":{"gitId":"gerhean"},"content":"* **Alternative 2**: Yes (Same as Windows Command Prompt)."},{"lineNumber":317,"author":{"gitId":"gerhean"},"content":"** Pros: User can store an incomplete draft command in the command history."},{"lineNumber":318,"author":{"gitId":"gerhean"},"content":"** Cons: Users who frequently make mistakes would find it troublesome to navigate"},{"lineNumber":319,"author":{"gitId":"gerhean"},"content":"through all the failed attempts. This is especially so as our application does not have"},{"lineNumber":320,"author":{"gitId":"gerhean"},"content":"an autocomplete feature."},{"lineNumber":321,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":322,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: When should the position of historyIterator reset"},{"lineNumber":323,"author":{"gitId":"gerhean"},"content":"* **Alternative 1 (current choice)**: Whenever user modifies the text in the `CommandBox`"},{"lineNumber":324,"author":{"gitId":"gerhean"},"content":"and when command executed successfully."},{"lineNumber":325,"author":{"gitId":"gerhean"},"content":"** Pros: Less confusing for users."},{"lineNumber":326,"author":{"gitId":"gerhean"},"content":"** Cons: More key presses to repeat a series of commands."},{"lineNumber":327,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":328,"author":{"gitId":"gerhean"},"content":"* **Alternative 2**: Never (Same as Windows Command Prompt)."},{"lineNumber":329,"author":{"gitId":"gerhean"},"content":"** Pros: Users can easily repeat a series of commands."},{"lineNumber":330,"author":{"gitId":"gerhean"},"content":"** Cons: Potentially confusing for users. Harder to implement as underlying data structure is linked list."},{"lineNumber":331,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":332,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d [Proposed Improvements] Command History Storage"},{"lineNumber":333,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":334,"author":{"gitId":"gerhean"},"content":"There are plans to save the command history in the hard drive, so that it may be accessed across sessions."},{"lineNumber":335,"author":{"gitId":"gerhean"},"content":"However, due to the complexity and difficulty of implementation, it will only be rolled out in a future version."},{"lineNumber":336,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":337,"author":{"gitId":"gerhean"},"content":"// end::command-history[]"},{"lineNumber":338,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":339,"author":{"gitId":"-"},"content":"// tag::interview[]"},{"lineNumber":340,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Interview and Interview Commands"},{"lineNumber":341,"author":{"gitId":"-"},"content":""},{"lineNumber":342,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Implementation"},{"lineNumber":343,"author":{"gitId":"-"},"content":"The implementation of interviews will be facilitated by two overarching components, the Model Abstract Class `Interview`"},{"lineNumber":344,"author":{"gitId":"-"},"content":"which is associated to an `InternshipApplication` (see Model Diagram \u003c\u003cDesign-Model\u003e\u003e ) and the Logic Classes `InterviewCommandParser` and `InterviewCommand`."},{"lineNumber":345,"author":{"gitId":"-"},"content":""},{"lineNumber":346,"author":{"gitId":"-"},"content":"The Logic Classes will interact with the `Interview` Classes to modify the interviews list in `InternshipApplication`."},{"lineNumber":347,"author":{"gitId":"-"},"content":"More detailed explanations will be provided in the subsequent sections."},{"lineNumber":348,"author":{"gitId":"-"},"content":""},{"lineNumber":349,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Interview"},{"lineNumber":350,"author":{"gitId":"-"},"content":"There are two types of interviews currently available in Internship Diary:"},{"lineNumber":351,"author":{"gitId":"-"},"content":""},{"lineNumber":352,"author":{"gitId":"-"},"content":"* `Online Interview` -- this type of interview will not carry an address. A placeholder `Address` \"NA\" will be set."},{"lineNumber":353,"author":{"gitId":"-"},"content":"* `Offline Interview` -- this type of interview must have an address."},{"lineNumber":354,"author":{"gitId":"-"},"content":""},{"lineNumber":355,"author":{"gitId":"-"},"content":"`Interview` will consist of the following variables and method:"},{"lineNumber":356,"author":{"gitId":"-"},"content":""},{"lineNumber":357,"author":{"gitId":"-"},"content":"* `getIsOnline()` -- abstract method that returns whether the interview is to be conducted online."},{"lineNumber":358,"author":{"gitId":"-"},"content":"* `ApplicationDate` interviewDate -- indicates the date of the interview."},{"lineNumber":359,"author":{"gitId":"-"},"content":"* `Address` interviewAddress -- indicates the address of the interview."},{"lineNumber":360,"author":{"gitId":"-"},"content":""},{"lineNumber":361,"author":{"gitId":"-"},"content":"In particular, `Interview` will rely on the `ApplicationDate` and `Address` classes in the internship package to implement"},{"lineNumber":362,"author":{"gitId":"-"},"content":"`interviewDate` and `interviewAddress` +"},{"lineNumber":363,"author":{"gitId":"-"},"content":"The class diagram below shows the classes associated to `Interview`."},{"lineNumber":364,"author":{"gitId":"-"},"content":""},{"lineNumber":365,"author":{"gitId":"-"},"content":".Structure of `Interview` and its associated classes"},{"lineNumber":366,"author":{"gitId":"-"},"content":"image::InterviewClassDiagram.png[]"},{"lineNumber":367,"author":{"gitId":"-"},"content":""},{"lineNumber":368,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Interview Commands"},{"lineNumber":369,"author":{"gitId":"-"},"content":"Interviews can only be modified through the `interview` command which relies upon `InterviewCommandParser` and `InterviewCommand` classes. +"},{"lineNumber":370,"author":{"gitId":"-"},"content":"The `interview` command will encompass four types of sub-command:"},{"lineNumber":371,"author":{"gitId":"-"},"content":""},{"lineNumber":372,"author":{"gitId":"-"},"content":"* `add` -- add an `Interview` to the specified `InternshipApplication`."},{"lineNumber":373,"author":{"gitId":"-"},"content":"* `edit` -- edits a specified `Interview` that exists in the interview list in the specified `InternshipApplication`."},{"lineNumber":374,"author":{"gitId":"-"},"content":"* `delete` -- deletes a specified `Interview` that exists in the interview list in the specified `InternshipApplication`."},{"lineNumber":375,"author":{"gitId":"-"},"content":"* `list` -- lists all `Interview` in the specified `InternshipApplication`.  +"},{"lineNumber":376,"author":{"gitId":"-"},"content":"Currently `list` functions similarly to `select`, additional functions for list will be proposed in \u003c\u003cInterviewListCommand-Improvements\u003e\u003e."},{"lineNumber":377,"author":{"gitId":"-"},"content":""},{"lineNumber":378,"author":{"gitId":"-"},"content":"Correspondingly, the `InterviewCommand` class will be made abstract with specific implementation"},{"lineNumber":379,"author":{"gitId":"-"},"content":"of each sub-command in an inheriting class, this can be seen in the diagram below."},{"lineNumber":380,"author":{"gitId":"-"},"content":""},{"lineNumber":381,"author":{"gitId":"-"},"content":".Structure of `InterviewCommand` class with its respective sub-commands"},{"lineNumber":382,"author":{"gitId":"-"},"content":"image::InterviewCommandClassDiagram.png[]"},{"lineNumber":383,"author":{"gitId":"-"},"content":""},{"lineNumber":384,"author":{"gitId":"-"},"content":"Additionally, `InterviewCommand` will implement the following static operations to facilitate sub-commands:"},{"lineNumber":385,"author":{"gitId":"-"},"content":""},{"lineNumber":386,"author":{"gitId":"-"},"content":"* `InterviewCommand#getInternshipApplication(Model, Index)` will assist all sub-commands in acquiring the `InternshipApplication` to modify."},{"lineNumber":387,"author":{"gitId":"-"},"content":"* `InterviewCommand#isInterviewBeforeApplication(InternshipApplication, Interview)` will assist `edit` and `add`"},{"lineNumber":388,"author":{"gitId":"-"},"content":"commands in checking whether the interview occurs before the internship application."},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"-"},"content":"Lastly, as the commands inherit from `Command` interface, the commands will implement `execute(Model)`."},{"lineNumber":391,"author":{"gitId":"-"},"content":"All the sub-commands follow roughly the same execution sequence as seen in the diagram below."},{"lineNumber":392,"author":{"gitId":"-"},"content":""},{"lineNumber":393,"author":{"gitId":"-"},"content":".Sequence Diagram to show execution of `InterviewAddCommand`"},{"lineNumber":394,"author":{"gitId":"-"},"content":"image::InterviewAddCommandExecuteSequenceDiagram.png[]"},{"lineNumber":395,"author":{"gitId":"-"},"content":""},{"lineNumber":396,"author":{"gitId":"-"},"content":"The execution sequence will first modify the `InternshipApplication` based on the specific sub-command."},{"lineNumber":397,"author":{"gitId":"-"},"content":"Then followed by creating a CommandResult, and returning it."},{"lineNumber":398,"author":{"gitId":"-"},"content":""},{"lineNumber":399,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Interview Commands Parser"},{"lineNumber":400,"author":{"gitId":"-"},"content":"`InterviewCommandParser` is the entry point to all `interview` sub-commands."},{"lineNumber":401,"author":{"gitId":"-"},"content":"It will be called from `InternshipDiaryParser`which is the primary logic parser for user input."},{"lineNumber":402,"author":{"gitId":"-"},"content":""},{"lineNumber":403,"author":{"gitId":"-"},"content":"`InterviewCommandParser` will support the parsing of all four types of `InterviewCommand` sub-commands."},{"lineNumber":404,"author":{"gitId":"-"},"content":"The following activity diagram will show how `InterviewCommandParser` reads and interpret user input to"},{"lineNumber":405,"author":{"gitId":"-"},"content":"return the expected sub-command."},{"lineNumber":406,"author":{"gitId":"-"},"content":""},{"lineNumber":407,"author":{"gitId":"-"},"content":".Process of `InterviewCommandParser` when reading user input"},{"lineNumber":408,"author":{"gitId":"-"},"content":"image::InterviewCommandParserActivityDiagram.png[]"},{"lineNumber":409,"author":{"gitId":"-"},"content":""},{"lineNumber":410,"author":{"gitId":"-"},"content":"Additionally, `InterviewCommandParser` will only be invoked within the `Logic` component, with the only exception being"},{"lineNumber":411,"author":{"gitId":"-"},"content":"InterviewAddCommand."},{"lineNumber":412,"author":{"gitId":"-"},"content":"Figure 18 will show the general invocation format within the `Logic` component using `InterviewDeleteCommand`"},{"lineNumber":413,"author":{"gitId":"-"},"content":"as an example."},{"lineNumber":414,"author":{"gitId":"-"},"content":"While Figure 19 will show the invocation of `InterviewAddCommand` which is the only sub-command that will utilise the"},{"lineNumber":415,"author":{"gitId":"-"},"content":"`Model component`."},{"lineNumber":416,"author":{"gitId":"-"},"content":""},{"lineNumber":417,"author":{"gitId":"-"},"content":".Interactions inside the Logic Component for `InterviewDeleteCommand`"},{"lineNumber":418,"author":{"gitId":"-"},"content":"image::InterviewDeleteCommandSequenceDiagram.png[]"},{"lineNumber":419,"author":{"gitId":"-"},"content":""},{"lineNumber":420,"author":{"gitId":"-"},"content":".Interactions inside the Logic and Model Component for `InterviewAddCommand`"},{"lineNumber":421,"author":{"gitId":"-"},"content":"image::InterviewAddCommandSequenceDiagram.png[]"},{"lineNumber":422,"author":{"gitId":"-"},"content":""},{"lineNumber":423,"author":{"gitId":"-"},"content":"[[InterviewListCommand-Improvements]]"},{"lineNumber":424,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d [Proposed Improvements] InterviewListCommand"},{"lineNumber":425,"author":{"gitId":"-"},"content":"Currently, the `InterviewListCommand` is functionally similar to `SelectCommand`."},{"lineNumber":426,"author":{"gitId":"-"},"content":"In v2.0, there will be the following improvements to the `InterviewListCommand`:"},{"lineNumber":427,"author":{"gitId":"-"},"content":""},{"lineNumber":428,"author":{"gitId":"-"},"content":"* Additional parameters to filter interviews"},{"lineNumber":429,"author":{"gitId":"-"},"content":"** New command format will be `interview INDEX list [o/IsOnline] [a/Address] [d/Date]`."},{"lineNumber":430,"author":{"gitId":"-"},"content":"** The command will return the list of interviews consisting of only the interviews that contain the optional"},{"lineNumber":431,"author":{"gitId":"-"},"content":"fields provided in the command."},{"lineNumber":432,"author":{"gitId":"-"},"content":"** `FilteredList` from `javafx` will be used to implement this feature."},{"lineNumber":433,"author":{"gitId":"-"},"content":""},{"lineNumber":434,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":435,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How to implement interview"},{"lineNumber":436,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice in v1.4)**: Use an abstract class as the primary reference to Interviews."},{"lineNumber":437,"author":{"gitId":"-"},"content":"Implement types of Interview as extending classes."},{"lineNumber":438,"author":{"gitId":"-"},"content":"** Pros: More scalable, able to easily add new Interview types. +"},{"lineNumber":439,"author":{"gitId":"-"},"content":"Easier to debug and handle exceptions."},{"lineNumber":440,"author":{"gitId":"-"},"content":"** Cons: More classes to create and handle."},{"lineNumber":441,"author":{"gitId":"-"},"content":""},{"lineNumber":442,"author":{"gitId":"-"},"content":"* **Alternative 2 (previous choice in v1.3)**: Use a concrete Interview class with additional variables to differentiate"},{"lineNumber":443,"author":{"gitId":"-"},"content":"Interview types."},{"lineNumber":444,"author":{"gitId":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":445,"author":{"gitId":"-"},"content":"** Cons: Increasing number of variables if more interview types will be added."},{"lineNumber":446,"author":{"gitId":"-"},"content":""},{"lineNumber":447,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How to implement different Interview Commands"},{"lineNumber":448,"author":{"gitId":"-"},"content":""},{"lineNumber":449,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice)**: Use a standardized command with sub-command type parsed as user input."},{"lineNumber":450,"author":{"gitId":"-"},"content":"** Pros: More streamlined, only one command. +"},{"lineNumber":451,"author":{"gitId":"-"},"content":"Able to use polymorphism to share operations between commands."},{"lineNumber":452,"author":{"gitId":"-"},"content":"** Cons: Harder to implement and document."},{"lineNumber":453,"author":{"gitId":"-"},"content":""},{"lineNumber":454,"author":{"gitId":"-"},"content":"* **Alternative 2**: Use separate commands for each different method of modifying interview."},{"lineNumber":455,"author":{"gitId":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":456,"author":{"gitId":"-"},"content":"** Cons: Makes the user remember more commands. +"},{"lineNumber":457,"author":{"gitId":"-"},"content":"Create a lot of repetition in code."},{"lineNumber":458,"author":{"gitId":"-"},"content":"// end::interview[]"},{"lineNumber":459,"author":{"gitId":"-"},"content":""},{"lineNumber":460,"author":{"gitId":"-"},"content":"// tag::find[]"},{"lineNumber":461,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Find Command"},{"lineNumber":462,"author":{"gitId":"-"},"content":""},{"lineNumber":463,"author":{"gitId":"-"},"content":"The find command allows the user to get a filtered list of internship applications."},{"lineNumber":464,"author":{"gitId":"-"},"content":"The following sequence diagram will illustrate the process of invocation for the command:"},{"lineNumber":465,"author":{"gitId":"-"},"content":""},{"lineNumber":466,"author":{"gitId":"-"},"content":".Interactions inside the Logic Component for the `find c/google r/software` command"},{"lineNumber":467,"author":{"gitId":"-"},"content":"image::FindSequenceDiagram.png[]"},{"lineNumber":468,"author":{"gitId":"-"},"content":""},{"lineNumber":469,"author":{"gitId":"-"},"content":"The following subsections will go through the general implementations of the find command, as well as the 2 versions of the command, find any match, and find match by fields."},{"lineNumber":470,"author":{"gitId":"-"},"content":""},{"lineNumber":471,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Implementation"},{"lineNumber":472,"author":{"gitId":"-"},"content":""},{"lineNumber":473,"author":{"gitId":"-"},"content":"The find command is implemented in the class `FindCommand` and uses the `FindCommandParser` class to parse the arguments for the command."},{"lineNumber":474,"author":{"gitId":"-"},"content":""},{"lineNumber":475,"author":{"gitId":"-"},"content":"To facilitate the find command, several predicates classes implementing `Predicate\u003cInternshipApplication\u003e` are used:"},{"lineNumber":476,"author":{"gitId":"-"},"content":""},{"lineNumber":477,"author":{"gitId":"-"},"content":"* `CompanyContainsKeywordsPredicate` -- Predicate to check if an internship application\u0027s `Company` field contains any substring matching any words in the list supplied by its constructor `CompanyContainsKeywordsPredicate(List\u003cString\u003e"},{"lineNumber":478,"author":{"gitId":"-"},"content":"keywords)`."},{"lineNumber":479,"author":{"gitId":"-"},"content":"* `RoleContainsKeywordsPredicate` -- Predicate to check if an internship application\u0027s `Role` field contains any substring matching any words in the list supplied by its constructor `RoleContainsKeywordsPredicate(List\u003cString\u003e"},{"lineNumber":480,"author":{"gitId":"-"},"content":"keywords)`."},{"lineNumber":481,"author":{"gitId":"-"},"content":"* `AddressContainsKeywordsPredicate` -- Predicate to check if an internship application\u0027s `Address` field contains any substring matching any words in the list supplied by its constructor `AddressContainsKeywordsPredicate(List\u003cString\u003e"},{"lineNumber":482,"author":{"gitId":"-"},"content":"keywords)`."},{"lineNumber":483,"author":{"gitId":"-"},"content":"* `PhoneContainsNumbersPredicate` -- Predicate to check if an internship application\u0027s `Phone` field contains any substring matching any words in the list supplied by its constructor `PhoneContainsNumbersPredicate(List\u003cString\u003e"},{"lineNumber":484,"author":{"gitId":"-"},"content":"numbers)`."},{"lineNumber":485,"author":{"gitId":"-"},"content":"* `EmailContainsKeywordsPredicate` -- Predicate to check if an internship application\u0027s `Email` field contains any substring matching any words in the list supplied by its constructor `EmailContainsKeywordsPredicate(List\u003cString\u003e"},{"lineNumber":486,"author":{"gitId":"-"},"content":"keywords)`."},{"lineNumber":487,"author":{"gitId":"-"},"content":"* `PriorityContainsNumbersPredicate` -- Predicate to check if an internship application\u0027s `Priority` field exactly matches any words in the list supplied by its constructor `PriorityContainsNumbersPredicate(List\u003cString\u003e"},{"lineNumber":488,"author":{"gitId":"-"},"content":"numbers)`."},{"lineNumber":489,"author":{"gitId":"-"},"content":"* `ApplicationDateIsDatePredicate` -- Predicate to check if an internship application\u0027s `ApplicationDate` field is exactly the date supplied by its constructor `ApplicationDateIsDatePredicate(List\u003cString\u003e dateArr)`. The constructor will parse `dateArr` into a `LocalDate`."},{"lineNumber":490,"author":{"gitId":"-"},"content":"* `StatusContainsKeywordsPredicate` -- Predicate to check if an internship application\u0027s `Status` field contains any substring matching any words in the list supplied by its constructor `StatusContainsKeywordsPredicate(List\u003cString\u003e"},{"lineNumber":491,"author":{"gitId":"-"},"content":"keywords)`."},{"lineNumber":492,"author":{"gitId":"-"},"content":""},{"lineNumber":493,"author":{"gitId":"-"},"content":"The following class diagram show the relationship of the above mentioned predicates, `Predicate`, `FindCommandParser` and `FindCommand`:"},{"lineNumber":494,"author":{"gitId":"-"},"content":""},{"lineNumber":495,"author":{"gitId":"-"},"content":".Class diagram to show relationship between `Predicates`, `FindCommandParser` and `FindCommand`"},{"lineNumber":496,"author":{"gitId":"-"},"content":"image::FindClassDiagram.png[align\u003d\"center\"]"},{"lineNumber":497,"author":{"gitId":"-"},"content":""},{"lineNumber":498,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Find Any Match"},{"lineNumber":499,"author":{"gitId":"-"},"content":""},{"lineNumber":500,"author":{"gitId":"-"},"content":"This version of the command is invoked when the user enters the command with preamble text in the parameter, e.g."},{"lineNumber":501,"author":{"gitId":"-"},"content":"`find google facebook` or `find google r/software`."},{"lineNumber":502,"author":{"gitId":"-"},"content":"The command will perform search for any internship application where any of the fields `Company`, `Role`, `Address`, `Phone`, `Email`, `Priority` or `Status` contains a substring matching at least one word in the preamble and display them, e.g. `find google facebook` will look for internship applications whose any of the above fields contains the substring `google` or `facebook`."},{"lineNumber":503,"author":{"gitId":"-"},"content":""},{"lineNumber":504,"author":{"gitId":"-"},"content":"The searching and displaying of the internship application is done by performing an `OR` operation on all the predicates"},{"lineNumber":505,"author":{"gitId":"-"},"content":"`CompanyContainsKeywordsPredicate`, `RoleContainsKeywordsPredicate`, `AddressContainsKeywordsPredicate`,"},{"lineNumber":506,"author":{"gitId":"-"},"content":"`PhoneContainsNumbersPredicate`, `EmailContainsKeywordsPredicate`, `PriorityContainsNumbersPredicate` and"},{"lineNumber":507,"author":{"gitId":"-"},"content":"`StatusContainsKeywordsPredicate` to get a single predicate and passing that into the method"},{"lineNumber":508,"author":{"gitId":"-"},"content":"`updateFilteredInternshipApplicationList()` of the `ModelManager` instance."},{"lineNumber":509,"author":{"gitId":"-"},"content":""},{"lineNumber":510,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Find Match by Fields"},{"lineNumber":511,"author":{"gitId":"-"},"content":""},{"lineNumber":512,"author":{"gitId":"-"},"content":"This version of the command is invoked when the user enters the command without any preamble text in the parameter, e.g."},{"lineNumber":513,"author":{"gitId":"-"},"content":"`find c/google r/software`."},{"lineNumber":514,"author":{"gitId":"-"},"content":"The command will perform a search for any internship application where the fields"},{"lineNumber":515,"author":{"gitId":"-"},"content":"`Company`, `Role`, `Address`, `Phone`, `Email`, `ApplicationDate`, `Priority` and `Status` match any of the supplied word after their respective prefixes (if a field\u0027s prefix is not specified, the field is not checked), e.g. `find c/google facebook d/01 02 2020` will look for internship applications where the `Company` field contains a substring `google` or `facebook` and the `ApplicationDate` field matching the date 1st February 2020."},{"lineNumber":516,"author":{"gitId":"-"},"content":""},{"lineNumber":517,"author":{"gitId":"-"},"content":"The searching and displaying of the internship application is done by performing an `AND` operation on the required predicates that is any of `CompanyContainsKeywordsPredicate`, `RoleContainsKeywordsPredicate`,"},{"lineNumber":518,"author":{"gitId":"-"},"content":"`AddressContainsKeywordsPredicate`, `PhoneContainsNumbersPredicate`, `EmailContainsKeywordsPredicate`,"},{"lineNumber":519,"author":{"gitId":"-"},"content":"`ApplicationDateIsDatePredicate`, `PriorityContainsNumbersPredicate` and `StatusContainsKeywordsPredicate` to get a single predicate and passing that into the method `updateFilteredInternshipApplicationList()` of the `ModelManager`"},{"lineNumber":520,"author":{"gitId":"-"},"content":"instance."},{"lineNumber":521,"author":{"gitId":"-"},"content":""},{"lineNumber":522,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Determine which Find to Invoke"},{"lineNumber":523,"author":{"gitId":"-"},"content":""},{"lineNumber":524,"author":{"gitId":"-"},"content":"The following activity diagram summarises how which type of find to invoke is determined:"},{"lineNumber":525,"author":{"gitId":"-"},"content":""},{"lineNumber":526,"author":{"gitId":"-"},"content":".Activity Diagram to show how the type of find to invoke is determined"},{"lineNumber":527,"author":{"gitId":"-"},"content":"image::FindCommandActivityDiagram.png[align\u003d\"center\"]"},{"lineNumber":528,"author":{"gitId":"-"},"content":""},{"lineNumber":529,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":530,"author":{"gitId":"-"},"content":""},{"lineNumber":531,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How to implement the different versions of Find command"},{"lineNumber":532,"author":{"gitId":"-"},"content":""},{"lineNumber":533,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice)**: Use a standardized command with the version to invoke determined by the type of user input parameters."},{"lineNumber":534,"author":{"gitId":"-"},"content":"** Pros: More streamlined, only one command. +"},{"lineNumber":535,"author":{"gitId":"-"},"content":"This ensures that the user dont have to remember multiple command to use the different versions."},{"lineNumber":536,"author":{"gitId":"-"},"content":"** Cons: Longer and less specific execute method."},{"lineNumber":537,"author":{"gitId":"-"},"content":""},{"lineNumber":538,"author":{"gitId":"-"},"content":"* **Alternative 2**: Use separate commands for the different versions of find."},{"lineNumber":539,"author":{"gitId":"-"},"content":"** Pros: More specific execute method for each of the command."},{"lineNumber":540,"author":{"gitId":"-"},"content":"** Cons: Makes the user remember more commands."},{"lineNumber":541,"author":{"gitId":"-"},"content":""},{"lineNumber":542,"author":{"gitId":"-"},"content":"* **Alternative 3**: Use the first word of the user input parameter to select which version of find command to invoke."},{"lineNumber":543,"author":{"gitId":"-"},"content":"** Pros: Slightly more streamlined than multiple commands. +"},{"lineNumber":544,"author":{"gitId":"-"},"content":"This still requires user to remember the right words to invoke the different versions."},{"lineNumber":545,"author":{"gitId":"-"},"content":"** Cons: Longer and less specific execution method."},{"lineNumber":546,"author":{"gitId":"-"},"content":"// end::find[]"},{"lineNumber":547,"author":{"gitId":"-"},"content":""},{"lineNumber":548,"author":{"gitId":"-"},"content":"// tag::archival[]"},{"lineNumber":549,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Archival System"},{"lineNumber":550,"author":{"gitId":"-"},"content":""},{"lineNumber":551,"author":{"gitId":"-"},"content":"This feature allows users to store chosen internship application(s) into the archival."},{"lineNumber":552,"author":{"gitId":"-"},"content":""},{"lineNumber":553,"author":{"gitId":"-"},"content":"The entire system is driven by two mechanisms:"},{"lineNumber":554,"author":{"gitId":"-"},"content":""},{"lineNumber":555,"author":{"gitId":"-"},"content":". the ability to switch views between the archived and unarchived list of internship application(s)"},{"lineNumber":556,"author":{"gitId":"-"},"content":". the ability to move internship application(s) into the archived list and vice-versa"},{"lineNumber":557,"author":{"gitId":"-"},"content":""},{"lineNumber":558,"author":{"gitId":"-"},"content":"The two mechanisms can be further broken down into the following four commands: `list`, `archival`, `archive`, and `unarchive`."},{"lineNumber":559,"author":{"gitId":"-"},"content":""},{"lineNumber":560,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d List \u0026 Archival"},{"lineNumber":561,"author":{"gitId":"-"},"content":""},{"lineNumber":562,"author":{"gitId":"-"},"content":"To handle the ability for a user to switch views, we implemented the commands `list` and `archival`:"},{"lineNumber":563,"author":{"gitId":"-"},"content":""},{"lineNumber":564,"author":{"gitId":"-"},"content":"* `list` allows the user to view the unarchived internship application(s)"},{"lineNumber":565,"author":{"gitId":"-"},"content":"* `archival` allows the user to view the archived internship application(s)"},{"lineNumber":566,"author":{"gitId":"-"},"content":""},{"lineNumber":567,"author":{"gitId":"-"},"content":"From here on, we will refer to the list of unarchived internship application(s) as the *main list*, and the list of archived internship application(s) as the *archival list*."},{"lineNumber":568,"author":{"gitId":"-"},"content":""},{"lineNumber":569,"author":{"gitId":"-"},"content":"Beyond the primary purpose of allowing users to switch between their view of main and archived list of internship application(s),"},{"lineNumber":570,"author":{"gitId":"-"},"content":"`list` and `archival` also helps to verify that the `archive` and `unarchive` commands are used appropriately."},{"lineNumber":571,"author":{"gitId":"-"},"content":""},{"lineNumber":572,"author":{"gitId":"-"},"content":"This means that a user should not `archive` an internship application when it is already in the archival -- doing so will raise an exception."},{"lineNumber":573,"author":{"gitId":"-"},"content":"This is identical for the `unarchive` command in the main list as well."},{"lineNumber":574,"author":{"gitId":"-"},"content":""},{"lineNumber":575,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Implementation"},{"lineNumber":576,"author":{"gitId":"-"},"content":""},{"lineNumber":577,"author":{"gitId":"-"},"content":"The class diagram below depicts the important methods and attributes that provide us the ability to switch views between the main list and the archival list."},{"lineNumber":578,"author":{"gitId":"-"},"content":""},{"lineNumber":579,"author":{"gitId":"-"},"content":".Structure of `InternshipDiary` that showcases the methods and attributes required for view-switching"},{"lineNumber":580,"author":{"gitId":"-"},"content":"image::InternshipDiaryAndModelManagerClassDiagram.png[width\u003d\"700\",align\u003d\"center\"]"},{"lineNumber":581,"author":{"gitId":"-"},"content":""},{"lineNumber":582,"author":{"gitId":"-"},"content":"The object diagram below illustrates the three `UniqueInternshipApplicationList` objects maintained by `InternshipDiary`:"},{"lineNumber":583,"author":{"gitId":"-"},"content":""},{"lineNumber":584,"author":{"gitId":"-"},"content":"* `displayedInternships`"},{"lineNumber":585,"author":{"gitId":"-"},"content":"* `archivedInternships`"},{"lineNumber":586,"author":{"gitId":"-"},"content":"* `unarchivedInternships`"},{"lineNumber":587,"author":{"gitId":"-"},"content":""},{"lineNumber":588,"author":{"gitId":"-"},"content":".Object diagram to illustrate the three `UniqueInternshipApplicationList` objects maintained by `InternshipDiary`"},{"lineNumber":589,"author":{"gitId":"-"},"content":"image::InternshipDiaryAndModelManagerObjectDiagram.png[width\u003d\"800\",align\u003d\"center\"]"},{"lineNumber":590,"author":{"gitId":"-"},"content":""},{"lineNumber":591,"author":{"gitId":"-"},"content":"As the name suggests, `displayedInternships` is the list that is shown to the user in the GUI. It references either"},{"lineNumber":592,"author":{"gitId":"-"},"content":"`archivedInternships` or `unarchivedInternships` at any one time."},{"lineNumber":593,"author":{"gitId":"-"},"content":""},{"lineNumber":594,"author":{"gitId":"-"},"content":"When a user is viewing the main list, `displayedInternships` references `unarchivedInternships`."},{"lineNumber":595,"author":{"gitId":"-"},"content":"And when a user is viewing the archival list, `displayedInternships` references `archivedInternships`."},{"lineNumber":596,"author":{"gitId":"-"},"content":""},{"lineNumber":597,"author":{"gitId":"-"},"content":"The following sequence diagram illustrates how an `archival` command is executed."},{"lineNumber":598,"author":{"gitId":"-"},"content":"The `list` command is similar to `archival`."},{"lineNumber":599,"author":{"gitId":"-"},"content":"You may use the same sequence diagram for the `list` command."},{"lineNumber":600,"author":{"gitId":"-"},"content":""},{"lineNumber":601,"author":{"gitId":"-"},"content":".Sequence diagram for `archival` Command"},{"lineNumber":602,"author":{"gitId":"-"},"content":"image::ArchivalSequenceDiagram.png[align\u003d\"center\"]"},{"lineNumber":603,"author":{"gitId":"-"},"content":""},{"lineNumber":604,"author":{"gitId":"-"},"content":"The following code snippet is retrieved from the `InternshipDiary` class."},{"lineNumber":605,"author":{"gitId":"-"},"content":"It illustrates the internal workings of how we switch the view between the archived list and the main list."},{"lineNumber":606,"author":{"gitId":"-"},"content":""},{"lineNumber":607,"author":{"gitId":"-"},"content":"    public void viewArchivedInternshipApplicationList() {"},{"lineNumber":608,"author":{"gitId":"-"},"content":"        this.displayedInternships \u003d archivedInternships;"},{"lineNumber":609,"author":{"gitId":"-"},"content":"        this.currentView \u003d InternshipApplicationViewType.ARCHIVED;"},{"lineNumber":610,"author":{"gitId":"-"},"content":"        firePropertyChange(DISPLAYED_INTERNSHIPS, getDisplayedInternshipList());"},{"lineNumber":611,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":612,"author":{"gitId":"-"},"content":""},{"lineNumber":613,"author":{"gitId":"-"},"content":"It can be seen explicitly from the code snippet that we make use of referencing to switch between the views of archival and main list."},{"lineNumber":614,"author":{"gitId":"-"},"content":"However, such implementation brings about issues with reactivity -- where elements that reference `displayedInternships` will not be aware of the reference change in `displayedInternships` whenever the user executes `archival` or `list`."},{"lineNumber":615,"author":{"gitId":"-"},"content":"Therefore, in the above scenario, users would still see the main list after executing the `archival` command."},{"lineNumber":616,"author":{"gitId":"-"},"content":""},{"lineNumber":617,"author":{"gitId":"-"},"content":"In order to resolve this issue, we need to employ the *observer pattern design*."},{"lineNumber":618,"author":{"gitId":"-"},"content":"The broad idea is to assign each UI element to be an *observer* and `InternshipDiary` to be the *observable*."},{"lineNumber":619,"author":{"gitId":"-"},"content":"Consequently, whenever there is a state change to `InternshipDiary`, the list of observers will be notified and updated automatically."},{"lineNumber":620,"author":{"gitId":"-"},"content":""},{"lineNumber":621,"author":{"gitId":"-"},"content":"To achieve this observer pattern, we made use of the `PropertyChangeSupport` class and the `PropertyChangeListener` interface."},{"lineNumber":622,"author":{"gitId":"-"},"content":"`PropertyChangeSupport` is a utility class to support the observer pattern by managing a list of listeners (observers) and firing `PropertyChangeEvent` to the listeners."},{"lineNumber":623,"author":{"gitId":"-"},"content":"A class that contains an instance of `PropertyChangeSupport` is an observable."},{"lineNumber":624,"author":{"gitId":"-"},"content":"On the other hand, a class that implements the `PropertyChangeListener` interface is an observer."},{"lineNumber":625,"author":{"gitId":"-"},"content":""},{"lineNumber":626,"author":{"gitId":"-"},"content":".Implementation of a two-tier observer-observable structure"},{"lineNumber":627,"author":{"gitId":"-"},"content":"image::InternshipDiaryAndModelManagerPropertyChangeClassDiagram.png[align\u003d\"center\"]"},{"lineNumber":628,"author":{"gitId":"-"},"content":""},{"lineNumber":629,"author":{"gitId":"-"},"content":"The class diagram above showcases our implementation of a two-tier observer-observable structure: +"},{"lineNumber":630,"author":{"gitId":"-"},"content":""},{"lineNumber":631,"author":{"gitId":"-"},"content":"* `InternshipDiary` is an observable"},{"lineNumber":632,"author":{"gitId":"-"},"content":"* `ModelManager` is both an observable and observer"},{"lineNumber":633,"author":{"gitId":"-"},"content":"** It observes any changes to `displayedInternships` contained in `InternshipDiary`"},{"lineNumber":634,"author":{"gitId":"-"},"content":"* `StatisticsWindow` is an observer"},{"lineNumber":635,"author":{"gitId":"-"},"content":"** It observes any changes to `filteredInternshipApplications` contained in `ModelManager`"},{"lineNumber":636,"author":{"gitId":"-"},"content":""},{"lineNumber":637,"author":{"gitId":"-"},"content":"[NOTE]"},{"lineNumber":638,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":639,"author":{"gitId":"-"},"content":"* `InternshipDiary` and `ModelManager` each contains an instance of `PropertyChangeSupport` to manage their listeners respectively."},{"lineNumber":640,"author":{"gitId":"-"},"content":"* `PropertyChangeSupport` serves as the intermediary and an abstraction between the *observables* and *observers*."},{"lineNumber":641,"author":{"gitId":"-"},"content":"* Observers are generalized (polymorphism) as they implement the `PropertyChangeListener` interface; these observers are managed by `PropertyChangeSupport`."},{"lineNumber":642,"author":{"gitId":"-"},"content":"* There is *no coupling* between the observables and observers."},{"lineNumber":643,"author":{"gitId":"-"},"content":"* `ModelManager` serves as an abstraction between `StatisticsWindow` and `InternshipDiary`."},{"lineNumber":644,"author":{"gitId":"-"},"content":"* All the UI elements in our implementation follow the above class diagram -- `StatisticsWindow` just happens to be the UI element that we chose to illustrate our diagram."},{"lineNumber":645,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":646,"author":{"gitId":"-"},"content":""},{"lineNumber":647,"author":{"gitId":"-"},"content":"We will briefly discuss how the observer pattern works in our implementation."},{"lineNumber":648,"author":{"gitId":"-"},"content":""},{"lineNumber":649,"author":{"gitId":"-"},"content":"Whenever an object wants to observe changes in another object, it will call the `addPropertyChangeListener` function of the `PropertyChangeSupport` instance from the appropriate object that it wishes to observe."},{"lineNumber":650,"author":{"gitId":"-"},"content":"It will also have to specify which *property* of that object it wants to observe."},{"lineNumber":651,"author":{"gitId":"-"},"content":""},{"lineNumber":652,"author":{"gitId":"-"},"content":"In our case, when `ModelManager` is created, it will call the `addPropertyChangeListener` function of the `PropertyChangeSupport` instance belonging to `InternshipDiary`."},{"lineNumber":653,"author":{"gitId":"-"},"content":"The function call will look like this: `addPropertyChangeListener(\"displayedInternships\", this)` where `this`"},{"lineNumber":654,"author":{"gitId":"-"},"content":"is a reference to `ModelManager` itself (so that it can be registered as a listener of the `displayedInternships` property of `InternshipDiary`)."},{"lineNumber":655,"author":{"gitId":"-"},"content":""},{"lineNumber":656,"author":{"gitId":"-"},"content":"The process is similar for any UI element that wants to observe the `filteredInternshipApplications` property of `ModelManager`."},{"lineNumber":657,"author":{"gitId":"-"},"content":""},{"lineNumber":658,"author":{"gitId":"-"},"content":"As a result, whenever there is a change to the property `displayedInternships` in `InternshipDiary`, the `PropertyChangeSupport` instance of"},{"lineNumber":659,"author":{"gitId":"-"},"content":"`InternshipDiary` will call `firePropertyChange` to emit a `PropertyChangeEvent` to `ModelManager`."},{"lineNumber":660,"author":{"gitId":"-"},"content":"The emitted event will trigger the `propertyChange` function of `ModelManager`."},{"lineNumber":661,"author":{"gitId":"-"},"content":"`ModelManager` can then retrieve the new reference from the event and update its `filteredInternshipApplications` accordingly."},{"lineNumber":662,"author":{"gitId":"-"},"content":"It will then repeat the event emission process to any UI element (e.g. `StatisticsWindow`) that is observing the"},{"lineNumber":663,"author":{"gitId":"-"},"content":"`filteredInternshipApplications` property."},{"lineNumber":664,"author":{"gitId":"-"},"content":""},{"lineNumber":665,"author":{"gitId":"-"},"content":"The following activity diagram gives a high-level overview of the above event-driven process."},{"lineNumber":666,"author":{"gitId":"-"},"content":""},{"lineNumber":667,"author":{"gitId":"-"},"content":".Activity diagram to illustrate the Observer Pattern using `archival` command"},{"lineNumber":668,"author":{"gitId":"-"},"content":"image::ActivityDiagramObserverPattern.png[align\u003d\"center\"]"},{"lineNumber":669,"author":{"gitId":"-"},"content":""},{"lineNumber":670,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":671,"author":{"gitId":"-"},"content":"[NOTE]"},{"lineNumber":672,"author":{"gitId":"-"},"content":"The two-tier observer-observable structure is *necessary*."},{"lineNumber":673,"author":{"gitId":"-"},"content":"This is because `list` and `archival` only changes the reference of `displayedInternships`. +"},{"lineNumber":674,"author":{"gitId":"-"},"content":""},{"lineNumber":675,"author":{"gitId":"-"},"content":"When \u0027ModelManager\u0027 updates its property `filteredInternshipApplications` with the new reference, UI elements that reference `filteredInternshipApplications`"},{"lineNumber":676,"author":{"gitId":"-"},"content":"will not be aware of the reference update to `filteredInternshipApplications`."},{"lineNumber":677,"author":{"gitId":"-"},"content":"Thus, `ModelManager` has to notify and update the UI elements as well."},{"lineNumber":678,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":679,"author":{"gitId":"-"},"content":""},{"lineNumber":680,"author":{"gitId":"-"},"content":"As an extension, our team also implemented enumeration for each property that is being observed."},{"lineNumber":681,"author":{"gitId":"-"},"content":"This modification ensures type safety and a way for us to track what properties are observed."},{"lineNumber":682,"author":{"gitId":"-"},"content":"This is especially important when many properties are being observed."},{"lineNumber":683,"author":{"gitId":"-"},"content":""},{"lineNumber":684,"author":{"gitId":"-"},"content":"Below is the updated class diagram with the implementation of `ListenerPropertyType` enumeration."},{"lineNumber":685,"author":{"gitId":"-"},"content":""},{"lineNumber":686,"author":{"gitId":"-"},"content":".Updated class diagram to showcase our implementation of the two-tier observer-observable structure with `ListenerPropertyType`"},{"lineNumber":687,"author":{"gitId":"-"},"content":"image::InternshipDiaryAndModelManagerPropertyChangeEnumClassDiagram.png[align\u003d\"center\"]"},{"lineNumber":688,"author":{"gitId":"-"},"content":""},{"lineNumber":689,"author":{"gitId":"-"},"content":"As seen from the diagram above, each observable will implement two additional methods to use `ListenerPropertyType` enumeration as parameters:"},{"lineNumber":690,"author":{"gitId":"-"},"content":""},{"lineNumber":691,"author":{"gitId":"-"},"content":". `addPropertyChangeListener(ListenerPropertyType propertyType, PropertyChangeListener l)`"},{"lineNumber":692,"author":{"gitId":"-"},"content":". `firePropertyChange(ListenerPropertyType propertyType, Object newValue)`"},{"lineNumber":693,"author":{"gitId":"-"},"content":""},{"lineNumber":694,"author":{"gitId":"-"},"content":"This forms a layer of abstraction as we would not be allowed to call the `addPropertyChangeListener` and `firePropertyChange` methods of"},{"lineNumber":695,"author":{"gitId":"-"},"content":"`PropertyChangeSupport` directly."},{"lineNumber":696,"author":{"gitId":"-"},"content":""},{"lineNumber":697,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":698,"author":{"gitId":"-"},"content":""},{"lineNumber":699,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: How to implement the Archival View system on the backend"},{"lineNumber":700,"author":{"gitId":"-"},"content":""},{"lineNumber":701,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice)**: Maintain three `UniqueInternshipApplicationList`: `displayedInternships`, `unarchivedInternships`, and `archivedInternships`."},{"lineNumber":702,"author":{"gitId":"-"},"content":"`displayedInternships` will be used as the reference for other elements to retrieve the list of internship application(s) for usage."},{"lineNumber":703,"author":{"gitId":"-"},"content":"Whenever the user executes `archival`, we will update the reference of `displayedInternships` to `archivedInternships` and vice-versa."},{"lineNumber":704,"author":{"gitId":"-"},"content":"In terms of storage, we will use only one list."},{"lineNumber":705,"author":{"gitId":"-"},"content":"This means that whenever we load the list of internship application(s) from the JSON save file, we will filter the internship application(s) appropriately into `archivedInternships` and `unarchivedInternships` in `InternshipDiary`."},{"lineNumber":706,"author":{"gitId":"-"},"content":"When saving, we will combine both `archivedInternships` and `unarchivedInternships` into a single list for storage."},{"lineNumber":707,"author":{"gitId":"-"},"content":"** Pros: No need to modify the storage and its relevant test cases."},{"lineNumber":708,"author":{"gitId":"-"},"content":"This provides stability in the refactoring process."},{"lineNumber":709,"author":{"gitId":"-"},"content":"** Cons: Potentially expensive in terms of computation."},{"lineNumber":710,"author":{"gitId":"-"},"content":"Furthermore, we will have to implement observer pattern to handle the reference changes."},{"lineNumber":711,"author":{"gitId":"-"},"content":""},{"lineNumber":712,"author":{"gitId":"-"},"content":"* **Alternative 2 (previous choice)**: Manipulate the current view of the internship application list by using Predicate and FilteredList, along with the boolean isArchived variable in `InternshipApplication`."},{"lineNumber":713,"author":{"gitId":"-"},"content":"This will easily help us determine which internship application should be rendered."},{"lineNumber":714,"author":{"gitId":"-"},"content":"** Pros: Very easy to implement and less expensive in terms of memory and computation."},{"lineNumber":715,"author":{"gitId":"-"},"content":"No need to implement observer pattern as there will be no reference updates."},{"lineNumber":716,"author":{"gitId":"-"},"content":"** Cons: Potentially unsustainable as conflicts are likely to arise with commands that make heavy use of predicates (e.g. `Find` command)."},{"lineNumber":717,"author":{"gitId":"-"},"content":""},{"lineNumber":718,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: How to implement the Observer Pattern"},{"lineNumber":719,"author":{"gitId":"-"},"content":""},{"lineNumber":720,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice)**: Use `PropertyChangeSupport` class and `PropertyChangeListener` interface from the `java.beans` package to support our implementation."},{"lineNumber":721,"author":{"gitId":"-"},"content":"** Pros: Easy and intuitive to use."},{"lineNumber":722,"author":{"gitId":"-"},"content":"Good built-in support."},{"lineNumber":723,"author":{"gitId":"-"},"content":"Seems to be highly recommended by other users."},{"lineNumber":724,"author":{"gitId":"-"},"content":"** Cons: Seemingly negligible for our usage."},{"lineNumber":725,"author":{"gitId":"-"},"content":"* **Alternative 2**: Use Java\u0027s `Observable` class and `Observer` interface."},{"lineNumber":726,"author":{"gitId":"-"},"content":"** Pros: Seemingly negligible for our usage."},{"lineNumber":727,"author":{"gitId":"-"},"content":"** Cons: The package is deprecated."},{"lineNumber":728,"author":{"gitId":"-"},"content":"Harder to understand and implement."},{"lineNumber":729,"author":{"gitId":"-"},"content":""},{"lineNumber":730,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Archive \u0026 Unarchive"},{"lineNumber":731,"author":{"gitId":"-"},"content":""},{"lineNumber":732,"author":{"gitId":"-"},"content":"To allow users to move internship application(s) between the main and archival list of internship application(s), we implemented the commands `archive` and `unarchive`:"},{"lineNumber":733,"author":{"gitId":"-"},"content":""},{"lineNumber":734,"author":{"gitId":"-"},"content":"* `archive` allows a user to move internship application(s) from the main list to the archival list."},{"lineNumber":735,"author":{"gitId":"-"},"content":"* `unarchive` allows a user to move internship application(s) from the archival list to the main list."},{"lineNumber":736,"author":{"gitId":"-"},"content":""},{"lineNumber":737,"author":{"gitId":"-"},"content":"The following activity diagram depicts the behaviour of an `archive` command."},{"lineNumber":738,"author":{"gitId":"-"},"content":"You may use it as a reference for `unarchive` as well."},{"lineNumber":739,"author":{"gitId":"-"},"content":"The activity diagrams for both are very similar."},{"lineNumber":740,"author":{"gitId":"-"},"content":""},{"lineNumber":741,"author":{"gitId":"-"},"content":".Activity Diagram for `archive` Command"},{"lineNumber":742,"author":{"gitId":"-"},"content":"image::ActivityDiagramArchiveCommand.png[align\u003d\"center\",width\u003d\"700\"]"},{"lineNumber":743,"author":{"gitId":"-"},"content":""},{"lineNumber":744,"author":{"gitId":"-"},"content":"While implementing the `archive` and `unarchive` commands, we realised that users may sometimes want to cherry-pick multiple internship application(s) to execute on or mass-execute on certain types of internship application(s)."},{"lineNumber":745,"author":{"gitId":"-"},"content":"For example, a user may want to archive all the internship application(s) that have the status of \"rejected\"."},{"lineNumber":746,"author":{"gitId":"-"},"content":""},{"lineNumber":747,"author":{"gitId":"-"},"content":"Commands like `archive`, `unarchive`, and `delete` can be seen as *removal-based commands*."},{"lineNumber":748,"author":{"gitId":"-"},"content":"This is because the utility of such functions are very similar; in that they serve to modify the list by removing items."},{"lineNumber":749,"author":{"gitId":"-"},"content":""},{"lineNumber":750,"author":{"gitId":"-"},"content":"Therefore, we specifically created a new class, `RemovalBasedCommand`, to extend the functionality of *removal-based commands* like `archive`, `unarchive`, and `delete`."},{"lineNumber":751,"author":{"gitId":"-"},"content":"Through this new class, users will be able to execute the commands on multiple internship applications."},{"lineNumber":752,"author":{"gitId":"-"},"content":""},{"lineNumber":753,"author":{"gitId":"-"},"content":"In the following section, we will delve slightly deeper and discuss about the lower-level implementation of the extended functionality."},{"lineNumber":754,"author":{"gitId":"-"},"content":""},{"lineNumber":755,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Implementation"},{"lineNumber":756,"author":{"gitId":"-"},"content":""},{"lineNumber":757,"author":{"gitId":"-"},"content":"The following class diagram depicts our implementation of the extended functionality."},{"lineNumber":758,"author":{"gitId":"-"},"content":""},{"lineNumber":759,"author":{"gitId":"-"},"content":".Structure of `RemovalBasedCommand` and `RemovalBasedCommandExecutionTypeParser` with its associated classes"},{"lineNumber":760,"author":{"gitId":"-"},"content":"image::RemovalBasedClassDiagram.png[align\u003d\"center\"]"},{"lineNumber":761,"author":{"gitId":"-"},"content":""},{"lineNumber":762,"author":{"gitId":"-"},"content":"The idea of the implementation can be summarized as follows:"},{"lineNumber":763,"author":{"gitId":"-"},"content":""},{"lineNumber":764,"author":{"gitId":"-"},"content":". The purpose of `RemovalBasedCommandExecutionTypeParser` is solely to determine the execution type of the command by parsing the user input and calling `RemovalBasedCommandExecutionType#getExecutionType`."},{"lineNumber":765,"author":{"gitId":"-"},"content":""},{"lineNumber":766,"author":{"gitId":"-"},"content":". On the other hand, `RemovalBasedCommand` is responsible for creating and executing the appropriate command based on the `commandWord` that was generated from the user input and passed down from `InternshipDiaryParser`."},{"lineNumber":767,"author":{"gitId":"-"},"content":""},{"lineNumber":768,"author":{"gitId":"-"},"content":"Users are able to execute removal-based commands like `archive` according to the execution types we have in the enumeration class `RemovalBasedCommandExecutionType`."},{"lineNumber":769,"author":{"gitId":"-"},"content":""},{"lineNumber":770,"author":{"gitId":"-"},"content":"We have implemented the following execution types: `BY_INDEX`, `BY_INDICES`, and `BY_FIELD`."},{"lineNumber":771,"author":{"gitId":"-"},"content":"For the execution type `BY_FIELD`, users can only execute by the `Status` field of an internship application currently."},{"lineNumber":772,"author":{"gitId":"-"},"content":""},{"lineNumber":773,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":774,"author":{"gitId":"-"},"content":"The format of a removal-based command can take on any of the following forms:"},{"lineNumber":775,"author":{"gitId":"-"},"content":""},{"lineNumber":776,"author":{"gitId":"-"},"content":". `command` INDEX"},{"lineNumber":777,"author":{"gitId":"-"},"content":". `command` INDEX, [INDEX], [INDEX], ... +"},{"lineNumber":778,"author":{"gitId":"-"},"content":"(where INDEX within the bracket is optional and there can only be as many INDEX as the number of internship application(s) displayed)"},{"lineNumber":779,"author":{"gitId":"-"},"content":". `command` s/STATUS +"},{"lineNumber":780,"author":{"gitId":"-"},"content":"(where STATUS refers to a valid internship application status)"},{"lineNumber":781,"author":{"gitId":"-"},"content":""},{"lineNumber":782,"author":{"gitId":"-"},"content":"Note that `command` can be any one of the removal-based commands."},{"lineNumber":783,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":784,"author":{"gitId":"-"},"content":""},{"lineNumber":785,"author":{"gitId":"-"},"content":"It is important to note that each `RemovalBasedCommandExecutionType` works similarly."},{"lineNumber":786,"author":{"gitId":"-"},"content":"At the core, all of them involves retrieving the index of an internship application to execute on."},{"lineNumber":787,"author":{"gitId":"-"},"content":"The difference lies in the pre-processing stage -- the steps an execution type takes to retrieve all the required indices."},{"lineNumber":788,"author":{"gitId":"-"},"content":""},{"lineNumber":789,"author":{"gitId":"-"},"content":"Therefore, to ensure succinctness, we will only be illustrating the usage of the command `archive` with the execution type `BY_FIELD`."},{"lineNumber":790,"author":{"gitId":"-"},"content":"Other variations of *removal-based commands* and *execution types* are similar."},{"lineNumber":791,"author":{"gitId":"-"},"content":""},{"lineNumber":792,"author":{"gitId":"-"},"content":"The following sequence diagram provides a high-level overview of how the `archive` command with the execution type of `BY_FIELD` is executed in our application."},{"lineNumber":793,"author":{"gitId":"-"},"content":""},{"lineNumber":794,"author":{"gitId":"-"},"content":".Interactions inside the Logic Component for the `archive s/rejected` command"},{"lineNumber":795,"author":{"gitId":"-"},"content":"image::ArchiveSequenceDiagram.png[align\u003d\"center\"]"},{"lineNumber":796,"author":{"gitId":"-"},"content":""},{"lineNumber":797,"author":{"gitId":"-"},"content":"As illustrated in the diagram above, the pre-processing steps of `BY_FIELD` involves applying the appropriate predicate to filter the internship applications and then converting these internship applications to their respective index."},{"lineNumber":798,"author":{"gitId":"-"},"content":"This provides us with required indices that we will execute the removal-based command `archive` on."},{"lineNumber":799,"author":{"gitId":"-"},"content":""},{"lineNumber":800,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":801,"author":{"gitId":"-"},"content":"[NOTE]"},{"lineNumber":802,"author":{"gitId":"-"},"content":"We have implemented the mechanism to be reusable and extensible for new commands and execution types."},{"lineNumber":803,"author":{"gitId":"-"},"content":""},{"lineNumber":804,"author":{"gitId":"-"},"content":"This is evident in the sequence diagram above, where the different kinds of *removal-based commands* are abstracted from the diagram and referred to simply as `RemovalBasedCommand`."},{"lineNumber":805,"author":{"gitId":"-"},"content":"This means that the above diagram is applicable to `archive`, `unarchive`, `delete`, and any other *removal-based commands* that we may wish to introduce in the future."},{"lineNumber":806,"author":{"gitId":"-"},"content":""},{"lineNumber":807,"author":{"gitId":"-"},"content":"Furthermore, if we ever wish to create a *new* `RemovalBasedCommandExecutionType` (on top of `BY_INDEX`, `BY_INDICES`, and `BY_FIELD`), we may simply add a new alternative path to the diagram (or a new switch condition in terms of code)."},{"lineNumber":808,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":809,"author":{"gitId":"-"},"content":""},{"lineNumber":810,"author":{"gitId":"-"},"content":"The following sequence diagram captures how `RemovalBasedCommandExecuteTypeParser` parses the input and determines the *execution type* of the command."},{"lineNumber":811,"author":{"gitId":"-"},"content":"It also shows how a `RemovalBasedCommand` is created with the appropriate `RemovalBasedCommandExecutionType` and command word."},{"lineNumber":812,"author":{"gitId":"-"},"content":""},{"lineNumber":813,"author":{"gitId":"-"},"content":".Sequence Diagram of how `RemovalBasedCommandExecuteTypeParser` parses input and determines the execution type of command"},{"lineNumber":814,"author":{"gitId":"-"},"content":"image::RemovalBasedCommandExecutionTypeParserSequenceDiagram.png[align\u003d\"center\"]"},{"lineNumber":815,"author":{"gitId":"-"},"content":""},{"lineNumber":816,"author":{"gitId":"-"},"content":"As seen from the diagram above, the parser determined the execution type to be `BY_FIELD` and generated the appropriate predicate to construct a `RemovalBasedCommand` instance."},{"lineNumber":817,"author":{"gitId":"-"},"content":""},{"lineNumber":818,"author":{"gitId":"-"},"content":"Based on the command word passed in to construct the `RemovalBasedCommand` instance, `RemovalBasedCommand` creates a lazy lambda function that can be called to construct the appropriate *removal-based command* for execution."},{"lineNumber":819,"author":{"gitId":"-"},"content":""},{"lineNumber":820,"author":{"gitId":"-"},"content":"The following sequence diagram depicts the above behaviour."},{"lineNumber":821,"author":{"gitId":"-"},"content":""},{"lineNumber":822,"author":{"gitId":"-"},"content":".Creation of lazy lambda function by `RemovalBasedCommand` instance"},{"lineNumber":823,"author":{"gitId":"-"},"content":"image::GenerateLazyCommandSequenceDiagram.png[width\u003d\"500\",align\u003d\"center\"]"},{"lineNumber":824,"author":{"gitId":"-"},"content":""},{"lineNumber":825,"author":{"gitId":"-"},"content":"As the command word is `archive`, a lazy lambda function to construct an `ArchiveCommand` is returned."},{"lineNumber":826,"author":{"gitId":"-"},"content":""},{"lineNumber":827,"author":{"gitId":"-"},"content":"The following sequence diagram captures the process of executing the lazy removal-based command on one index."},{"lineNumber":828,"author":{"gitId":"-"},"content":"This particular index allows us to retrieve the appropriate internship application."},{"lineNumber":829,"author":{"gitId":"-"},"content":""},{"lineNumber":830,"author":{"gitId":"-"},"content":".Sequence diagram to illustrate the execution of the removal-based command, `archive`, on one index"},{"lineNumber":831,"author":{"gitId":"-"},"content":"image::ConstructAndExecuteLazyCommandByIndexSequenceDiagram.png[align\u003d\"center\",width\u003d\"800\"]"},{"lineNumber":832,"author":{"gitId":"-"},"content":""},{"lineNumber":833,"author":{"gitId":"-"},"content":"It can be seen that the previously-generated lazy command is executed in the above sequence diagram."},{"lineNumber":834,"author":{"gitId":"-"},"content":""},{"lineNumber":835,"author":{"gitId":"-"},"content":"`ArchiveCommand` is constructed and subsequently executed on the index provided, by making the appropriate function call to the model to execute on the internship application."},{"lineNumber":836,"author":{"gitId":"-"},"content":"In this case, `archiveInternshipApplication` is called."},{"lineNumber":837,"author":{"gitId":"-"},"content":""},{"lineNumber":838,"author":{"gitId":"-"},"content":"The following sequence diagram captures the process of executing the lazy `ArchiveCommand` on indices."},{"lineNumber":839,"author":{"gitId":"-"},"content":""},{"lineNumber":840,"author":{"gitId":"-"},"content":".Sequence diagram to illustrate the execution of the removal-based command, `archive`, on indices"},{"lineNumber":841,"author":{"gitId":"-"},"content":"image::ConstructAndExecuteLazyCommandByIndicesSequenceDiagram.png[width\u003d\"500\",align\u003d\"center\"]"},{"lineNumber":842,"author":{"gitId":"-"},"content":""},{"lineNumber":843,"author":{"gitId":"-"},"content":"As seen above, `executeLazyCommandOnIndices` merely reuses the function `executeLazyCommandOnIndex` (from the previous sequence diagram) by running it on every index provided."},{"lineNumber":844,"author":{"gitId":"-"},"content":"The feedback from each execution is cumulatively concatenated to form a single feedback."},{"lineNumber":845,"author":{"gitId":"-"},"content":""},{"lineNumber":846,"author":{"gitId":"-"},"content":"The following sequence diagram captures the process of re-creating the command result in `RemovalBasedCommand` by using the feedback obtained from the specific command execution, which is `ArchiveCommand` in our example."},{"lineNumber":847,"author":{"gitId":"-"},"content":""},{"lineNumber":848,"author":{"gitId":"-"},"content":".Re-creating the command result in `RemovalBasedCommand`"},{"lineNumber":849,"author":{"gitId":"-"},"content":"image::CreateCommandResultSequenceDiagram.png[width\u003d\"500\",align\u003d\"center\"]"},{"lineNumber":850,"author":{"gitId":"-"},"content":""},{"lineNumber":851,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":852,"author":{"gitId":"-"},"content":""},{"lineNumber":853,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: How to implement Multiple Execution Types for Removal-Based Commands"},{"lineNumber":854,"author":{"gitId":"-"},"content":""},{"lineNumber":855,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice)**: Use encapsulation to hold the appropriate command word, which will then be used to generate the removal-based command that will execute based on the execute type provided."},{"lineNumber":856,"author":{"gitId":"-"},"content":"`RemovalBasedCommand` will store the command word of the appropriate removal-based command and create the command when"},{"lineNumber":857,"author":{"gitId":"-"},"content":"`RemovalBasedCommand` is executed."},{"lineNumber":858,"author":{"gitId":"-"},"content":"This removal-based command will then be executed on the index/indices provided according to the execution type."},{"lineNumber":859,"author":{"gitId":"-"},"content":"** Pros: Easier to implement and convey the idea to team members."},{"lineNumber":860,"author":{"gitId":"-"},"content":"** Cons: Will require multiple case handling (e.g. switch cases)."},{"lineNumber":861,"author":{"gitId":"-"},"content":"Polymorphism may be a better solution in terms of code extensibility and elegance."},{"lineNumber":862,"author":{"gitId":"-"},"content":""},{"lineNumber":863,"author":{"gitId":"-"},"content":"* **Alternative 2**: Use polymorphism where each removal-based command extends the class `RemovalBasedCommand` and inherit the appropriate execution type methods. +"},{"lineNumber":864,"author":{"gitId":"-"},"content":"** Pros: Code will likely be more extensible and elegant."},{"lineNumber":865,"author":{"gitId":"-"},"content":"** Cons: Likely to require major redesigning and refactoring of existing logic codebase because we will have to modify `Command` class."},{"lineNumber":866,"author":{"gitId":"-"},"content":"Furthermore, the changes may affect areas that we may not have considered."},{"lineNumber":867,"author":{"gitId":"-"},"content":"This is risky and will take a lot of time, effort, and team discussion."},{"lineNumber":868,"author":{"gitId":"-"},"content":"// end::archival[]"},{"lineNumber":869,"author":{"gitId":"-"},"content":""},{"lineNumber":870,"author":{"gitId":"-"},"content":"// tag::statistics[]"},{"lineNumber":871,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Statistics Feature"},{"lineNumber":872,"author":{"gitId":"-"},"content":""},{"lineNumber":873,"author":{"gitId":"-"},"content":"This feature allows users to view relevant metrics about their internship application(s)."},{"lineNumber":874,"author":{"gitId":"-"},"content":""},{"lineNumber":875,"author":{"gitId":"-"},"content":"Currently, the tracked metrics include:"},{"lineNumber":876,"author":{"gitId":"-"},"content":""},{"lineNumber":877,"author":{"gitId":"-"},"content":"* the amount of internship applications in each status"},{"lineNumber":878,"author":{"gitId":"-"},"content":"* the percentage of internship applications in each status"},{"lineNumber":879,"author":{"gitId":"-"},"content":""},{"lineNumber":880,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Implementation"},{"lineNumber":881,"author":{"gitId":"-"},"content":""},{"lineNumber":882,"author":{"gitId":"-"},"content":"The following class diagram gives an overview of our implementation of the statistics feature."},{"lineNumber":883,"author":{"gitId":"-"},"content":""},{"lineNumber":884,"author":{"gitId":"-"},"content":".Structure of `Statistics` and its associated classes"},{"lineNumber":885,"author":{"gitId":"-"},"content":"image::StatisticsClassDiagram.png[width\u003d\"800\",align\u003d\"center\"]"},{"lineNumber":886,"author":{"gitId":"-"},"content":""},{"lineNumber":887,"author":{"gitId":"-"},"content":"Users will be able to view the metrics from two areas:"},{"lineNumber":888,"author":{"gitId":"-"},"content":""},{"lineNumber":889,"author":{"gitId":"-"},"content":". `StatisticsBarFooter`"},{"lineNumber":890,"author":{"gitId":"-"},"content":".. found at the bottom of the application in the form of a bar footer"},{"lineNumber":891,"author":{"gitId":"-"},"content":".. serves as a quick view of the metrics in terms of counters"},{"lineNumber":892,"author":{"gitId":"-"},"content":". `StatisticsWindow`"},{"lineNumber":893,"author":{"gitId":"-"},"content":".. displayed on a separate window that is opened upon the command `stats`"},{"lineNumber":894,"author":{"gitId":"-"},"content":".. serves as an additional graphical statistics interface for users to get a visual breakdown of the metrics +"},{"lineNumber":895,"author":{"gitId":"-"},"content":"(currently in the form of a bar chart and a pie chart)"},{"lineNumber":896,"author":{"gitId":"-"},"content":""},{"lineNumber":897,"author":{"gitId":"-"},"content":"The `Statistics` object is used to generate statistics for any internship application list that it is given."},{"lineNumber":898,"author":{"gitId":"-"},"content":"`StatisticsWindow` and `StatisticsBarFooter` each contains an instance of `Statistics` that helps them compute the relevant statistics whenever there is any update to the internship application list."},{"lineNumber":899,"author":{"gitId":"-"},"content":""},{"lineNumber":900,"author":{"gitId":"-"},"content":"The internship application list can be updated either due to a change in reference in `displayedInternships` from `InternshipDiary` (e.g. `archival` and `list`) or any modifications to the current internship application list (e.g. `add`, `delete`, `edit`, `archive`, `unarchive`, `find`)."},{"lineNumber":901,"author":{"gitId":"-"},"content":""},{"lineNumber":902,"author":{"gitId":"-"},"content":"The following activity diagram illustrates how `StatisticsWindow` (`StatisticsBarFooter` shares the same workflow) is notified of the updates in the internship application list and how it subsequently updates the statistics."},{"lineNumber":903,"author":{"gitId":"-"},"content":""},{"lineNumber":904,"author":{"gitId":"-"},"content":".Activity Diagram to show how `StatisticsWindow` is notified of updates in the internship application list and how statistics is updated accordingly"},{"lineNumber":905,"author":{"gitId":"-"},"content":"image::ActivityDiagramStatistics.png[align\u003d\"center\"]"},{"lineNumber":906,"author":{"gitId":"-"},"content":""},{"lineNumber":907,"author":{"gitId":"-"},"content":"Upon creation of the `StatisticsWindow` and `StatisticsBarFooter`, each of them will attach an event listener to the internship application list that it was given."},{"lineNumber":908,"author":{"gitId":"-"},"content":"This event listener will notify them of any internal modifications to the internship application list."},{"lineNumber":909,"author":{"gitId":"-"},"content":""},{"lineNumber":910,"author":{"gitId":"-"},"content":"On the other hand, both `StatisticsWindow` and `StatisticsBarFooter` will register themselves as *observers* as well."},{"lineNumber":911,"author":{"gitId":"-"},"content":"This is so that the implemented observer pattern can notify them of any changes in the internship application list reference and update them with the new reference accordingly."},{"lineNumber":912,"author":{"gitId":"-"},"content":""},{"lineNumber":913,"author":{"gitId":"-"},"content":"Any of the two updates above will trigger the `Statistics` to recompute with the updated internship application list."},{"lineNumber":914,"author":{"gitId":"-"},"content":"`StatisticsWindow` and `StatisticsBarFooter` will then retrieve the required computed metrics from `Statistics` and re-bind the them to the UI accordingly."},{"lineNumber":915,"author":{"gitId":"-"},"content":""},{"lineNumber":916,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":917,"author":{"gitId":"-"},"content":""},{"lineNumber":918,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Which list to retrieve data from to generate statistics"},{"lineNumber":919,"author":{"gitId":"-"},"content":""},{"lineNumber":920,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice)**: Use filtered ObservableList."},{"lineNumber":921,"author":{"gitId":"-"},"content":"The filtered list is dynamically updated by `find` and `sort` command."},{"lineNumber":922,"author":{"gitId":"-"},"content":"The statistics model will generate statistics based on the dynamic filtering changes that occur in either the main list or archival list (the current view selected by user)."},{"lineNumber":923,"author":{"gitId":"-"},"content":"** Pros: Users will be able to choose which list they want to view the relevant statistics for."},{"lineNumber":924,"author":{"gitId":"-"},"content":"Works well with `archival`, `list`, and `find` commands that dynamically changes the list."},{"lineNumber":925,"author":{"gitId":"-"},"content":"** Cons: Often re-computation upon changes in the filtered list may cause some performance bottleneck."},{"lineNumber":926,"author":{"gitId":"-"},"content":""},{"lineNumber":927,"author":{"gitId":"-"},"content":"* **Alternative 2**: Use the base list that contains all of the internship application(s)."},{"lineNumber":928,"author":{"gitId":"-"},"content":"The base list is not filtered according to predicate(s) set by users."},{"lineNumber":929,"author":{"gitId":"-"},"content":"** Pros: Require less re-computation compared to using filtered ObservableList, as it only re-computes upon addition(s), deletion(s), or changes in an internship application stored in the list."},{"lineNumber":930,"author":{"gitId":"-"},"content":"** Cons: May be unintuitive to some extent for users when the statistics do not tally with the current view of the list."},{"lineNumber":931,"author":{"gitId":"-"},"content":""},{"lineNumber":932,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How to store the statistics generated from data"},{"lineNumber":933,"author":{"gitId":"-"},"content":""},{"lineNumber":934,"author":{"gitId":"-"},"content":"A list of internship application(s) will be passed into the statistics model and upon function call, the statistics model will iterate through the list and generate/update the latest statistics accordingly."},{"lineNumber":935,"author":{"gitId":"-"},"content":""},{"lineNumber":936,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice)**: Store the mapping between each status and count using a HashMap."},{"lineNumber":937,"author":{"gitId":"-"},"content":"The idea is to retrieve all the statuses available from the enum (whenever the statistics model is created) and create a HashMap with those status as the key and respective count as the value."},{"lineNumber":938,"author":{"gitId":"-"},"content":"** Pros: Extensible and reusable."},{"lineNumber":939,"author":{"gitId":"-"},"content":"Regardless of any changes, this system can dynamically handle the addition, deletion, or changes in statuses."},{"lineNumber":940,"author":{"gitId":"-"},"content":"** Cons: Seemingly negligible cons for our usage."},{"lineNumber":941,"author":{"gitId":"-"},"content":""},{"lineNumber":942,"author":{"gitId":"-"},"content":"* **Alternative 2 (previous choice)**: Store each status count in separate variables that are initialized upon the creation of statistics model."},{"lineNumber":943,"author":{"gitId":"-"},"content":"** Pros: Straightforward and very easy to understand for future developers."},{"lineNumber":944,"author":{"gitId":"-"},"content":"** Cons: Very inextensible as we need to create new variables for new statuses each time."},{"lineNumber":945,"author":{"gitId":"-"},"content":"// end::statistics[]"},{"lineNumber":946,"author":{"gitId":"-"},"content":""},{"lineNumber":947,"author":{"gitId":"-"},"content":"// tag::reminder[]"},{"lineNumber":948,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Reminder Command"},{"lineNumber":949,"author":{"gitId":"-"},"content":""},{"lineNumber":950,"author":{"gitId":"-"},"content":"The reminder command displays to users a list of internship applications which:"},{"lineNumber":951,"author":{"gitId":"-"},"content":""},{"lineNumber":952,"author":{"gitId":"-"},"content":"* have status `wishlist` and need to be submitted in 7 days"},{"lineNumber":953,"author":{"gitId":"-"},"content":"* have status `interview` and interviews scheduled in 7 days"},{"lineNumber":954,"author":{"gitId":"-"},"content":""},{"lineNumber":955,"author":{"gitId":"-"},"content":"The applications will be displayed in order of earliest application date or scheduled interview date followed by those with later dates."},{"lineNumber":956,"author":{"gitId":"-"},"content":""},{"lineNumber":957,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the command is executed:"},{"lineNumber":958,"author":{"gitId":"-"},"content":""},{"lineNumber":959,"author":{"gitId":"-"},"content":".Interactions Inside the Logic Component for the `reminder` Command"},{"lineNumber":960,"author":{"gitId":"-"},"content":"image::ReminderSequenceDiagram.png[]"},{"lineNumber":961,"author":{"gitId":"-"},"content":""},{"lineNumber":962,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Implementation"},{"lineNumber":963,"author":{"gitId":"-"},"content":""},{"lineNumber":964,"author":{"gitId":"-"},"content":"The reminder command is implemented in the class `ReminderCommand`."},{"lineNumber":965,"author":{"gitId":"-"},"content":""},{"lineNumber":966,"author":{"gitId":"-"},"content":"When the `execute()` method of the `ReminderCommand` is called, several predicates classes implementing `Predicate\u003cInternshipApplication\u003e` are created:"},{"lineNumber":967,"author":{"gitId":"-"},"content":""},{"lineNumber":968,"author":{"gitId":"-"},"content":"* `ApplicationDateDuePredicate` -- Predicate to check whether the `ApplicationDate` field of an internship application has a date of the current date or within 7 days of the current date."},{"lineNumber":969,"author":{"gitId":"-"},"content":""},{"lineNumber":970,"author":{"gitId":"-"},"content":"* `StatusIsWishlistPredicate` -- Predicate to check whether the `Status` field of an internship application is"},{"lineNumber":971,"author":{"gitId":"-"},"content":"`wishlist`."},{"lineNumber":972,"author":{"gitId":"-"},"content":""},{"lineNumber":973,"author":{"gitId":"-"},"content":"* `InterviewDateDuePredicate` -- Predicate to check whether there is at least one interview in the `ArrayList\u003cInterview\u003e"},{"lineNumber":974,"author":{"gitId":"-"},"content":"interviews` of an internship application that has a date of the current date or within 7 days from the current date."},{"lineNumber":975,"author":{"gitId":"-"},"content":""},{"lineNumber":976,"author":{"gitId":"-"},"content":"* `StatusIsInterviewPredicate` -- Predicate to check whether the `Status` field of an internship application is"},{"lineNumber":977,"author":{"gitId":"-"},"content":"`interview`."},{"lineNumber":978,"author":{"gitId":"-"},"content":""},{"lineNumber":979,"author":{"gitId":"-"},"content":"* `IsNotArchivedPredicate` -- Predicate to check whether an internship application is not archived."},{"lineNumber":980,"author":{"gitId":"-"},"content":""},{"lineNumber":981,"author":{"gitId":"-"},"content":"Firstly, an `AND` operation on the `ApplicationDateDuePredicate` and `StatusIsWishlistPredicate` as well as another"},{"lineNumber":982,"author":{"gitId":"-"},"content":"`AND` operation on the `InterviewDateDuePredicate` and  `StatusIsInterviewPredicate` are performed. Next, an `OR`"},{"lineNumber":983,"author":{"gitId":"-"},"content":"operation is performed on the predicates from the previous two `AND` operations. An `AND` operation is then performed on"},{"lineNumber":984,"author":{"gitId":"-"},"content":"the predicate obtained from the previous `OR` operation and the `IsNotArchivedPredicate`. The `IsNotArchivedPredicate`"},{"lineNumber":985,"author":{"gitId":"-"},"content":"is used to make sure that archived internship applications do not appear when `reminder` is used. The final predicate"},{"lineNumber":986,"author":{"gitId":"-"},"content":"produced is then passed into the method `updateFilteredInternshipApplicationList()` of the `ModelManager` instance."},{"lineNumber":987,"author":{"gitId":"-"},"content":""},{"lineNumber":988,"author":{"gitId":"-"},"content":"The activity diagram below summarises how each internship application is checked by the predicates mentioned above:"},{"lineNumber":989,"author":{"gitId":"-"},"content":""},{"lineNumber":990,"author":{"gitId":"-"},"content":".Activity Diagram on how `ReminderCommand` filters out applications to display"},{"lineNumber":991,"author":{"gitId":"-"},"content":"image::ReminderActivityDiagram.png[Reminder, 400]"},{"lineNumber":992,"author":{"gitId":"-"},"content":""},{"lineNumber":993,"author":{"gitId":"-"},"content":"A comparator `ApplicationDateAndInterviewDateComparator` implementing `Comparator\u003cInternshipApplication\u003e` is also created and"},{"lineNumber":994,"author":{"gitId":"-"},"content":"then passed into the method `updateFilteredInternshipApplicationList()` of the `ModelManager` instance to sort internship"},{"lineNumber":995,"author":{"gitId":"-"},"content":"applications in terms of which application is more urgent. For each internship application, its `ApplicationDate` field"},{"lineNumber":996,"author":{"gitId":"-"},"content":"as well as the earliest interview date in the `List\u003cInterview\u003e interviews` are compared to current date and the"},{"lineNumber":997,"author":{"gitId":"-"},"content":"earlier date out of the two is used for the sorting. The most urgent application will be at the top."},{"lineNumber":998,"author":{"gitId":"-"},"content":""},{"lineNumber":999,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":1000,"author":{"gitId":"-"},"content":""},{"lineNumber":1001,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: The order to display the internship applications"},{"lineNumber":1002,"author":{"gitId":"-"},"content":""},{"lineNumber":1003,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice)**: Display the internship applications in the order of either their `applicationDate`"},{"lineNumber":1004,"author":{"gitId":"-"},"content":"or `interviewDate` of the earliest interview scheduled in `List\u003cInterview\u003e interviews` is closer to current date."},{"lineNumber":1005,"author":{"gitId":"-"},"content":""},{"lineNumber":1006,"author":{"gitId":"-"},"content":"** Pros: More useful to the user as the user can directly know which internship application to focus on more, regardless"},{"lineNumber":1007,"author":{"gitId":"-"},"content":"of whether it is to prepare for the submission of the application, or to prepare for an interview scheduled."},{"lineNumber":1008,"author":{"gitId":"-"},"content":"** Cons: Longer code as both the earliest `interviewDate` and the `applicationDate` of an application needs to be compared"},{"lineNumber":1009,"author":{"gitId":"-"},"content":"to current date to see which date is closer and that date will then be used to sort the internship applications."},{"lineNumber":1010,"author":{"gitId":"-"},"content":""},{"lineNumber":1011,"author":{"gitId":"-"},"content":"* **Alternative 2**: Display the internship applications in the order of which application\u0027s `applicationDate` is closer"},{"lineNumber":1012,"author":{"gitId":"-"},"content":"to current date."},{"lineNumber":1013,"author":{"gitId":"-"},"content":""},{"lineNumber":1014,"author":{"gitId":"-"},"content":"** Pros: Cleaner code as the applications can just be sorted by their `applicationDate`."},{"lineNumber":1015,"author":{"gitId":"-"},"content":"** Cons: Has the assumption that an internship application with a earlier `applicationDate` will have an interview"},{"lineNumber":1016,"author":{"gitId":"-"},"content":"scheduled at an earlier `interviewDate` as compared to an application with later `applicationDate`. User might miss out"},{"lineNumber":1017,"author":{"gitId":"-"},"content":"on a earlier `interviewDate` for an application with later `applicationDate` and additional commands have to be typed in"},{"lineNumber":1018,"author":{"gitId":"-"},"content":"to check `interviewDate`."},{"lineNumber":1019,"author":{"gitId":"-"},"content":""},{"lineNumber":1020,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: The filtering of internship applications to be shown"},{"lineNumber":1021,"author":{"gitId":"-"},"content":""},{"lineNumber":1022,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice)**: Using separate predicates(`ApplicationDateDuePredicate`, `StatusIsWishlistPredicate`,"},{"lineNumber":1023,"author":{"gitId":"-"},"content":"`InterviewDateDuePredicate`, `StatusIsInterviewPredicate`) to filter out internship applications with `ApplicationDate`"},{"lineNumber":1024,"author":{"gitId":"-"},"content":"or earliest `interviewDate` within 7 days from current date."},{"lineNumber":1025,"author":{"gitId":"-"},"content":""},{"lineNumber":1026,"author":{"gitId":"-"},"content":"** Pros: Cleaner code and each Predicate class only needs to check for one field. Easier to test as well."},{"lineNumber":1027,"author":{"gitId":"-"},"content":""},{"lineNumber":1028,"author":{"gitId":"-"},"content":"** Cons: Longer code as more predicates instantiated and used."},{"lineNumber":1029,"author":{"gitId":"-"},"content":""},{"lineNumber":1030,"author":{"gitId":"-"},"content":"* **Alternative 2**: Using just one predicate to filter out internship applications with `ApplicationDate`"},{"lineNumber":1031,"author":{"gitId":"-"},"content":"or earliest `interviewDate` within 7 days from current date."},{"lineNumber":1032,"author":{"gitId":"-"},"content":""},{"lineNumber":1033,"author":{"gitId":"-"},"content":"** Pros: Reduce the number of predicates to be instantiated and to be used."},{"lineNumber":1034,"author":{"gitId":"-"},"content":""},{"lineNumber":1035,"author":{"gitId":"-"},"content":"** Cons: More conditions to check for in one predicate which could lead to potential bugs."},{"lineNumber":1036,"author":{"gitId":"-"},"content":""},{"lineNumber":1037,"author":{"gitId":"-"},"content":"//end::reminder[]"},{"lineNumber":1038,"author":{"gitId":"-"},"content":""},{"lineNumber":1039,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":1040,"author":{"gitId":"-"},"content":""},{"lineNumber":1041,"author":{"gitId":"-"},"content":"We are using `java.util.logging` package for logging."},{"lineNumber":1042,"author":{"gitId":"-"},"content":"The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":1043,"author":{"gitId":"-"},"content":""},{"lineNumber":1044,"author":{"gitId":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":1045,"author":{"gitId":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":1046,"author":{"gitId":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":1047,"author":{"gitId":"-"},"content":""},{"lineNumber":1048,"author":{"gitId":"-"},"content":"*Logging Levels*"},{"lineNumber":1049,"author":{"gitId":"-"},"content":""},{"lineNumber":1050,"author":{"gitId":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":1051,"author":{"gitId":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":1052,"author":{"gitId":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":1053,"author":{"gitId":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":1054,"author":{"gitId":"-"},"content":""},{"lineNumber":1055,"author":{"gitId":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":1056,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":1057,"author":{"gitId":"-"},"content":""},{"lineNumber":1058,"author":{"gitId":"-"},"content":"Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":1059,"author":{"gitId":"-"},"content":""},{"lineNumber":1060,"author":{"gitId":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":1061,"author":{"gitId":"-"},"content":""},{"lineNumber":1062,"author":{"gitId":"-"},"content":"You may refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."},{"lineNumber":1063,"author":{"gitId":"-"},"content":""},{"lineNumber":1064,"author":{"gitId":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":1065,"author":{"gitId":"-"},"content":""},{"lineNumber":1066,"author":{"gitId":"-"},"content":"You may refer to the guide \u003c\u003cTesting#, here\u003e\u003e."},{"lineNumber":1067,"author":{"gitId":"-"},"content":""},{"lineNumber":1068,"author":{"gitId":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":1069,"author":{"gitId":"-"},"content":""},{"lineNumber":1070,"author":{"gitId":"-"},"content":"You may refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."},{"lineNumber":1071,"author":{"gitId":"-"},"content":""},{"lineNumber":1072,"author":{"gitId":"-"},"content":"[appendix]"},{"lineNumber":1073,"author":{"gitId":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1074,"author":{"gitId":"-"},"content":""},{"lineNumber":1075,"author":{"gitId":"-"},"content":"*Target user profile*:"},{"lineNumber":1076,"author":{"gitId":"-"},"content":""},{"lineNumber":1077,"author":{"gitId":"-"},"content":"* is a Computer Science student"},{"lineNumber":1078,"author":{"gitId":"-"},"content":"* is actively looking for internships"},{"lineNumber":1079,"author":{"gitId":"-"},"content":"* has a need to organise and track internship applications"},{"lineNumber":1080,"author":{"gitId":"-"},"content":"* is a fast typist"},{"lineNumber":1081,"author":{"gitId":"-"},"content":"* is comfortable using CLI apps"},{"lineNumber":1082,"author":{"gitId":"-"},"content":"* prefers desktop applications"},{"lineNumber":1083,"author":{"gitId":"-"},"content":""},{"lineNumber":1084,"author":{"gitId":"-"},"content":"*Value proposition*: An easy-to-use CLI program that can help students to organise and track their internship applications"},{"lineNumber":1085,"author":{"gitId":"-"},"content":""},{"lineNumber":1086,"author":{"gitId":"-"},"content":"[appendix]"},{"lineNumber":1087,"author":{"gitId":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1088,"author":{"gitId":"-"},"content":""},{"lineNumber":1089,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1090,"author":{"gitId":"-"},"content":""},{"lineNumber":1091,"author":{"gitId":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1092,"author":{"gitId":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1093,"author":{"gitId":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1094,"author":{"gitId":"gerhean"},"content":"|`* * *` |user |trace all my internship applications\u0027 contact | easily follow up on the application"},{"lineNumber":1095,"author":{"gitId":"-"},"content":""},{"lineNumber":1096,"author":{"gitId":"-"},"content":"|`* * *` |user |tag each application with a status | track my internship application phase"},{"lineNumber":1097,"author":{"gitId":"-"},"content":""},{"lineNumber":1098,"author":{"gitId":"-"},"content":"|`* * *` |self-reflecting user |mark what positions of internship I have been applying to | look up past internship applications and see which positions I had been offered more as a reference for future applications"},{"lineNumber":1099,"author":{"gitId":"-"},"content":""},{"lineNumber":1100,"author":{"gitId":"-"},"content":"|`* * *` |user |set reminders for internship application deadlines/interviews| make sure I do not miss any internship opportunities by not applying in time / missing interviews"},{"lineNumber":1101,"author":{"gitId":"-"},"content":""},{"lineNumber":1102,"author":{"gitId":"-"},"content":"|`* *` |user |be able to add companies I wish to apply to in a wish-list |apply to them when the window opens"},{"lineNumber":1103,"author":{"gitId":"-"},"content":""},{"lineNumber":1104,"author":{"gitId":"-"},"content":"|`* *` |self-reflecting user |see at which stage my internship application failed |get a better idea of what to improve on"},{"lineNumber":1105,"author":{"gitId":"-"},"content":""},{"lineNumber":1106,"author":{"gitId":"-"},"content":"|`* *` |future job seeker|use this program to easily reference successful applications |apply them to future endeavours"},{"lineNumber":1107,"author":{"gitId":"-"},"content":""},{"lineNumber":1108,"author":{"gitId":"-"},"content":"|`* *` |disorganised user |store my cover letters |easily refer to them when applying for internships"},{"lineNumber":1109,"author":{"gitId":"-"},"content":""},{"lineNumber":1110,"author":{"gitId":"-"},"content":"|`* *` |user |give a rating to each internship based on my preference |easily decide which internship to prioritise"},{"lineNumber":1111,"author":{"gitId":"-"},"content":""},{"lineNumber":1112,"author":{"gitId":"-"},"content":"|`*` |frequent interviewee |maintain a checklist of questions to ask the interviewer |"},{"lineNumber":1113,"author":{"gitId":"-"},"content":""},{"lineNumber":1114,"author":{"gitId":"-"},"content":"|`*` |first-time internship seeker |use the program as a guide to internship applications |learn how to start applying for an internship"},{"lineNumber":1115,"author":{"gitId":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1116,"author":{"gitId":"-"},"content":""},{"lineNumber":1117,"author":{"gitId":"-"},"content":""},{"lineNumber":1118,"author":{"gitId":"-"},"content":"[appendix]"},{"lineNumber":1119,"author":{"gitId":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1120,"author":{"gitId":"-"},"content":""},{"lineNumber":1121,"author":{"gitId":"-"},"content":"For all use cases below, the *System* is the `Internship Diary` (Internship Diary) and the *Actor* is the `user`, unless specified otherwise."},{"lineNumber":1122,"author":{"gitId":"-"},"content":"Furthermore, any references made to the `list` refers to the *main list* (unarchived internship applications), unless specified otherwise."},{"lineNumber":1123,"author":{"gitId":"-"},"content":""},{"lineNumber":1124,"author":{"gitId":"-"},"content":"[discrete]"},{"lineNumber":1125,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Use case: UC1 - View Main List"},{"lineNumber":1126,"author":{"gitId":"-"},"content":""},{"lineNumber":1127,"author":{"gitId":"-"},"content":"*MSS*"},{"lineNumber":1128,"author":{"gitId":"-"},"content":""},{"lineNumber":1129,"author":{"gitId":"-"},"content":"1. User requests to view the main list."},{"lineNumber":1130,"author":{"gitId":"-"},"content":"2. Internship Diary displays the main list."},{"lineNumber":1131,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1132,"author":{"gitId":"-"},"content":"Use case ends."},{"lineNumber":1133,"author":{"gitId":"-"},"content":""},{"lineNumber":1134,"author":{"gitId":"-"},"content":"[discrete]"},{"lineNumber":1135,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Use case: UC2 - View Archival List"},{"lineNumber":1136,"author":{"gitId":"-"},"content":""},{"lineNumber":1137,"author":{"gitId":"-"},"content":"*MSS*"},{"lineNumber":1138,"author":{"gitId":"-"},"content":""},{"lineNumber":1139,"author":{"gitId":"-"},"content":"1. User requests to view the archival list."},{"lineNumber":1140,"author":{"gitId":"-"},"content":"2. Internship Diary displays the archival list."},{"lineNumber":1141,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1142,"author":{"gitId":"-"},"content":"Use case ends."},{"lineNumber":1143,"author":{"gitId":"-"},"content":""},{"lineNumber":1144,"author":{"gitId":"-"},"content":"[discrete]"},{"lineNumber":1145,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Use case: UC3 - Add Internship Application"},{"lineNumber":1146,"author":{"gitId":"-"},"content":""},{"lineNumber":1147,"author":{"gitId":"-"},"content":"*MSS*"},{"lineNumber":1148,"author":{"gitId":"-"},"content":""},{"lineNumber":1149,"author":{"gitId":"-"},"content":"1. User requests to add an internship application to the list."},{"lineNumber":1150,"author":{"gitId":"-"},"content":"2. Internship Diary adds the internship application to the list."},{"lineNumber":1151,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1152,"author":{"gitId":"-"},"content":"Use case ends."},{"lineNumber":1153,"author":{"gitId":"-"},"content":""},{"lineNumber":1154,"author":{"gitId":"-"},"content":"*Extensions*"},{"lineNumber":1155,"author":{"gitId":"-"},"content":""},{"lineNumber":1156,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1157,"author":{"gitId":"-"},"content":"* 1a. Internship Diary detects an error in the input."},{"lineNumber":1158,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1159,"author":{"gitId":"-"},"content":"** 1a1. Internship Diary shows an error message."},{"lineNumber":1160,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1161,"author":{"gitId":"-"},"content":"Use case resumes from step 1."},{"lineNumber":1162,"author":{"gitId":"-"},"content":""},{"lineNumber":1163,"author":{"gitId":"-"},"content":"[discrete]"},{"lineNumber":1164,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Use case: UC4 - Delete Internship Application"},{"lineNumber":1165,"author":{"gitId":"-"},"content":""},{"lineNumber":1166,"author":{"gitId":"-"},"content":"*MSS*"},{"lineNumber":1167,"author":{"gitId":"-"},"content":""},{"lineNumber":1168,"author":{"gitId":"-"},"content":"1. User requests to delete an internship application from the list."},{"lineNumber":1169,"author":{"gitId":"-"},"content":"2. Internship Diary deletes the internship application from the list."},{"lineNumber":1170,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1171,"author":{"gitId":"-"},"content":"Use case ends."},{"lineNumber":1172,"author":{"gitId":"-"},"content":""},{"lineNumber":1173,"author":{"gitId":"-"},"content":"*Extensions*"},{"lineNumber":1174,"author":{"gitId":"-"},"content":""},{"lineNumber":1175,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1176,"author":{"gitId":"-"},"content":"* 1a. Internship Diary detects an invalid index."},{"lineNumber":1177,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1178,"author":{"gitId":"-"},"content":"** 1a1. Internship Diary shows an error message."},{"lineNumber":1179,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1180,"author":{"gitId":"-"},"content":"Use case resumes from step 1."},{"lineNumber":1181,"author":{"gitId":"-"},"content":""},{"lineNumber":1182,"author":{"gitId":"-"},"content":"[discrete]"},{"lineNumber":1183,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Use case: UC5 - Archive Internship Application"},{"lineNumber":1184,"author":{"gitId":"-"},"content":""},{"lineNumber":1185,"author":{"gitId":"-"},"content":"*Precondition(s)*"},{"lineNumber":1186,"author":{"gitId":"-"},"content":""},{"lineNumber":1187,"author":{"gitId":"-"},"content":"* Internship Diary is displaying the main list."},{"lineNumber":1188,"author":{"gitId":"-"},"content":""},{"lineNumber":1189,"author":{"gitId":"-"},"content":"*Guarantee(s)*"},{"lineNumber":1190,"author":{"gitId":"-"},"content":""},{"lineNumber":1191,"author":{"gitId":"-"},"content":"* Internship Application appears in the archival list."},{"lineNumber":1192,"author":{"gitId":"-"},"content":""},{"lineNumber":1193,"author":{"gitId":"-"},"content":"*MSS*"},{"lineNumber":1194,"author":{"gitId":"-"},"content":""},{"lineNumber":1195,"author":{"gitId":"-"},"content":"1. User requests to archive an internship application from the list."},{"lineNumber":1196,"author":{"gitId":"-"},"content":"2. Internship Diary archives the internship application."},{"lineNumber":1197,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1198,"author":{"gitId":"-"},"content":"Use case ends."},{"lineNumber":1199,"author":{"gitId":"-"},"content":""},{"lineNumber":1200,"author":{"gitId":"-"},"content":"*Extensions*"},{"lineNumber":1201,"author":{"gitId":"-"},"content":""},{"lineNumber":1202,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1203,"author":{"gitId":"-"},"content":"* 1a. Internship Diary detects an invalid index."},{"lineNumber":1204,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1205,"author":{"gitId":"-"},"content":"** 1a1. Internship Diary shows an error message."},{"lineNumber":1206,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1207,"author":{"gitId":"-"},"content":"Use case resumes from step 1."},{"lineNumber":1208,"author":{"gitId":"-"},"content":""},{"lineNumber":1209,"author":{"gitId":"-"},"content":"[discrete]"},{"lineNumber":1210,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Use case: UC6 - Unarchive Internship Application"},{"lineNumber":1211,"author":{"gitId":"-"},"content":""},{"lineNumber":1212,"author":{"gitId":"-"},"content":"*Precondition(s)*"},{"lineNumber":1213,"author":{"gitId":"-"},"content":""},{"lineNumber":1214,"author":{"gitId":"-"},"content":"* Internship Diary is displaying the archival list."},{"lineNumber":1215,"author":{"gitId":"-"},"content":""},{"lineNumber":1216,"author":{"gitId":"-"},"content":"*Guarantee(s)*"},{"lineNumber":1217,"author":{"gitId":"-"},"content":""},{"lineNumber":1218,"author":{"gitId":"-"},"content":"* Internship Application appears in the main list."},{"lineNumber":1219,"author":{"gitId":"-"},"content":""},{"lineNumber":1220,"author":{"gitId":"-"},"content":"*MSS*"},{"lineNumber":1221,"author":{"gitId":"-"},"content":""},{"lineNumber":1222,"author":{"gitId":"-"},"content":"1. User requests to unarchive an internship application from the archival list."},{"lineNumber":1223,"author":{"gitId":"-"},"content":"2. Internship Diary unarchives the internship application."},{"lineNumber":1224,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1225,"author":{"gitId":"-"},"content":"Use case ends."},{"lineNumber":1226,"author":{"gitId":"-"},"content":""},{"lineNumber":1227,"author":{"gitId":"-"},"content":"*Extensions*"},{"lineNumber":1228,"author":{"gitId":"-"},"content":""},{"lineNumber":1229,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1230,"author":{"gitId":"-"},"content":"* 1a. Internship Diary detects an invalid index."},{"lineNumber":1231,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1232,"author":{"gitId":"-"},"content":"** 1a1. Internship Diary shows an error message."},{"lineNumber":1233,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1234,"author":{"gitId":"-"},"content":"Use case resumes from step 1."},{"lineNumber":1235,"author":{"gitId":"-"},"content":""},{"lineNumber":1236,"author":{"gitId":"-"},"content":"[discrete]"},{"lineNumber":1237,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Use case: UC7 - Find Internship Applications"},{"lineNumber":1238,"author":{"gitId":"-"},"content":""},{"lineNumber":1239,"author":{"gitId":"-"},"content":"*MSS*"},{"lineNumber":1240,"author":{"gitId":"-"},"content":""},{"lineNumber":1241,"author":{"gitId":"-"},"content":"1. User pass:q[\u003cu\u003eviews main list UC1\u003c/u\u003e]."},{"lineNumber":1242,"author":{"gitId":"-"},"content":"2. User requests to find a list of Internship Application based on given keywords."},{"lineNumber":1243,"author":{"gitId":"-"},"content":"3. Internship Diary shows the list of Internship Application with any of the fields `Company`, `Role`, `Address`, `Phone`, `Email`, `Priority` or `Status` matching any of the keywords."},{"lineNumber":1244,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1245,"author":{"gitId":"-"},"content":"Use case ends."},{"lineNumber":1246,"author":{"gitId":"-"},"content":""},{"lineNumber":1247,"author":{"gitId":"-"},"content":"*Extensions*"},{"lineNumber":1248,"author":{"gitId":"-"},"content":""},{"lineNumber":1249,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1250,"author":{"gitId":"-"},"content":"* 1a. User pass:q[\u003cu\u003eviews archival list UC2\u003c/u\u003e]."},{"lineNumber":1251,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1252,"author":{"gitId":"-"},"content":"Use case resumes from step 2."},{"lineNumber":1253,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1254,"author":{"gitId":"-"},"content":"* 2a. No Internship Application is shown."},{"lineNumber":1255,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1256,"author":{"gitId":"-"},"content":"Use case ends."},{"lineNumber":1257,"author":{"gitId":"-"},"content":""},{"lineNumber":1258,"author":{"gitId":"-"},"content":"[discrete]"},{"lineNumber":1259,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Use case: UC8 - Find Internship Applications by Specific Field(s)"},{"lineNumber":1260,"author":{"gitId":"-"},"content":""},{"lineNumber":1261,"author":{"gitId":"-"},"content":"*MSS*"},{"lineNumber":1262,"author":{"gitId":"-"},"content":""},{"lineNumber":1263,"author":{"gitId":"-"},"content":"1. User pass:q[\u003cu\u003eviews main list UC1\u003c/u\u003e]."},{"lineNumber":1264,"author":{"gitId":"-"},"content":"2. User requests to find a list of Internship Application based on given keywords for specific field(s)."},{"lineNumber":1265,"author":{"gitId":"-"},"content":"3. Internship Diary shows the list of Internship Application with the specified field(s) matching the any of the given keywords for each field."},{"lineNumber":1266,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1267,"author":{"gitId":"-"},"content":"Use case ends."},{"lineNumber":1268,"author":{"gitId":"-"},"content":""},{"lineNumber":1269,"author":{"gitId":"-"},"content":"*Extensions*"},{"lineNumber":1270,"author":{"gitId":"-"},"content":""},{"lineNumber":1271,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1272,"author":{"gitId":"-"},"content":"* 1a. User pass:q[\u003cu\u003eviews archival list UC2\u003c/u\u003e]."},{"lineNumber":1273,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1274,"author":{"gitId":"-"},"content":"Use case resumes from step 2."},{"lineNumber":1275,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1276,"author":{"gitId":"-"},"content":"* 2a. Internship Diary detects an invalid date given for the `Date` field."},{"lineNumber":1277,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1278,"author":{"gitId":"-"},"content":"** 2a1. Internship Diary shows an error message."},{"lineNumber":1279,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1280,"author":{"gitId":"-"},"content":"Use case resumes from step 2."},{"lineNumber":1281,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1282,"author":{"gitId":"-"},"content":"* 2b. No Internship Application is shown."},{"lineNumber":1283,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1284,"author":{"gitId":"-"},"content":"Use case ends."},{"lineNumber":1285,"author":{"gitId":"-"},"content":""},{"lineNumber":1286,"author":{"gitId":"-"},"content":"[discrete]"},{"lineNumber":1287,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Use case: UC9 - Edit Internship Application"},{"lineNumber":1288,"author":{"gitId":"-"},"content":""},{"lineNumber":1289,"author":{"gitId":"-"},"content":"*MSS*"},{"lineNumber":1290,"author":{"gitId":"-"},"content":""},{"lineNumber":1291,"author":{"gitId":"-"},"content":"1. User pass:q[\u003cu\u003efind Internship Applications UC7\u003c/u\u003e]."},{"lineNumber":1292,"author":{"gitId":"-"},"content":"2. User requests to edit the fields of the Internship Application."},{"lineNumber":1293,"author":{"gitId":"-"},"content":"3. Internship Diary updates the new fields of the Internship Application."},{"lineNumber":1294,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1295,"author":{"gitId":"-"},"content":"Use case ends"},{"lineNumber":1296,"author":{"gitId":"-"},"content":""},{"lineNumber":1297,"author":{"gitId":"-"},"content":"*Extensions*"},{"lineNumber":1298,"author":{"gitId":"-"},"content":""},{"lineNumber":1299,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1300,"author":{"gitId":"-"},"content":"* 2a."},{"lineNumber":1301,"author":{"gitId":"-"},"content":"The given index is invalid."},{"lineNumber":1302,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1303,"author":{"gitId":"-"},"content":"** 2a1. Internship Diary shows an error message"},{"lineNumber":1304,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1305,"author":{"gitId":"-"},"content":"Use case resumes at step 1"},{"lineNumber":1306,"author":{"gitId":"-"},"content":""},{"lineNumber":1307,"author":{"gitId":"-"},"content":"[discrete]"},{"lineNumber":1308,"author":{"gitId":"-"},"content":""},{"lineNumber":1309,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Use case: UC10 - Prioritise Internship Application"},{"lineNumber":1310,"author":{"gitId":"-"},"content":""},{"lineNumber":1311,"author":{"gitId":"-"},"content":"*MSS*"},{"lineNumber":1312,"author":{"gitId":"-"},"content":""},{"lineNumber":1313,"author":{"gitId":"-"},"content":"1. User pass:q[\u003cu\u003efind Internship Applications UC7\u003c/u\u003e]."},{"lineNumber":1314,"author":{"gitId":"-"},"content":"2. User requests to prioritise the Internship Application."},{"lineNumber":1315,"author":{"gitId":"-"},"content":"3. Internship Diary updates the priority level of the Internship Application."},{"lineNumber":1316,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1317,"author":{"gitId":"-"},"content":"Use case ends"},{"lineNumber":1318,"author":{"gitId":"-"},"content":""},{"lineNumber":1319,"author":{"gitId":"gerhean"},"content":"[discrete]"},{"lineNumber":1320,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Use case: UC11 - Sort Internship Application"},{"lineNumber":1321,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":1322,"author":{"gitId":"gerhean"},"content":"*MSS*"},{"lineNumber":1323,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":1324,"author":{"gitId":"gerhean"},"content":"1. User requests to sort the list."},{"lineNumber":1325,"author":{"gitId":"-"},"content":"2. Internship Diary sorts the list."},{"lineNumber":1326,"author":{"gitId":"-"},"content":"3. Internship Diary displays the sorted list."},{"lineNumber":1327,"author":{"gitId":"gerhean"},"content":"4. Footer displays the field which list is sorted by."},{"lineNumber":1328,"author":{"gitId":"gerhean"},"content":"+"},{"lineNumber":1329,"author":{"gitId":"gerhean"},"content":"Use case ends"},{"lineNumber":1330,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":1331,"author":{"gitId":"gerhean"},"content":"*Extensions*"},{"lineNumber":1332,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":1333,"author":{"gitId":"gerhean"},"content":"[none]"},{"lineNumber":1334,"author":{"gitId":"-"},"content":"* 1a."},{"lineNumber":1335,"author":{"gitId":"gerhean"},"content":"Internship Diary detects the keyword reverse."},{"lineNumber":1336,"author":{"gitId":"gerhean"},"content":"[none]"},{"lineNumber":1337,"author":{"gitId":"gerhean"},"content":"** 1a.1. Internship Diary sorts the list in reverse order."},{"lineNumber":1338,"author":{"gitId":"gerhean"},"content":"+"},{"lineNumber":1339,"author":{"gitId":"gerhean"},"content":"Use case resumes from step 3."},{"lineNumber":1340,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":1341,"author":{"gitId":"gerhean"},"content":"[none]"},{"lineNumber":1342,"author":{"gitId":"gerhean"},"content":"* 1b."},{"lineNumber":1343,"author":{"gitId":"-"},"content":"Internship Diary detects invalid syntax."},{"lineNumber":1344,"author":{"gitId":"gerhean"},"content":"[none]"},{"lineNumber":1345,"author":{"gitId":"gerhean"},"content":"** 1b.1. Internship Diary shows an error message."},{"lineNumber":1346,"author":{"gitId":"gerhean"},"content":"+"},{"lineNumber":1347,"author":{"gitId":"gerhean"},"content":"Use case ends"},{"lineNumber":1348,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":1349,"author":{"gitId":"-"},"content":"[discrete]"},{"lineNumber":1350,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Use case: UC12 - Select Internship Application"},{"lineNumber":1351,"author":{"gitId":"-"},"content":""},{"lineNumber":1352,"author":{"gitId":"-"},"content":"*MSS*"},{"lineNumber":1353,"author":{"gitId":"-"},"content":""},{"lineNumber":1354,"author":{"gitId":"-"},"content":"1. User requests to select an Internship Application."},{"lineNumber":1355,"author":{"gitId":"-"},"content":"2. Internship Diary displays selected Internship Application."},{"lineNumber":1356,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1357,"author":{"gitId":"-"},"content":"Use case ends"},{"lineNumber":1358,"author":{"gitId":"-"},"content":""},{"lineNumber":1359,"author":{"gitId":"-"},"content":"*Extensions*"},{"lineNumber":1360,"author":{"gitId":"-"},"content":""},{"lineNumber":1361,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1362,"author":{"gitId":"-"},"content":"* 1a. The Internship Application to be selected does not exist."},{"lineNumber":1363,"author":{"gitId":"gerhean"},"content":"[none]"},{"lineNumber":1364,"author":{"gitId":"-"},"content":"** 1a.1. Internship Diary shows an error message."},{"lineNumber":1365,"author":{"gitId":"gerhean"},"content":"+"},{"lineNumber":1366,"author":{"gitId":"-"},"content":"Use case resumes at step 1"},{"lineNumber":1367,"author":{"gitId":"-"},"content":""},{"lineNumber":1368,"author":{"gitId":"-"},"content":"[discrete]"},{"lineNumber":1369,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Use case: UC13 - Add Interview"},{"lineNumber":1370,"author":{"gitId":"-"},"content":""},{"lineNumber":1371,"author":{"gitId":"-"},"content":"*MSS*"},{"lineNumber":1372,"author":{"gitId":"-"},"content":""},{"lineNumber":1373,"author":{"gitId":"-"},"content":"1. User pass:q[\u003cu\u003efind Internship Applications UC7\u003c/u\u003e]."},{"lineNumber":1374,"author":{"gitId":"-"},"content":"2. User requests to add an Interview to a specific Internship Application."},{"lineNumber":1375,"author":{"gitId":"-"},"content":"3. Internship Diary creates an Interview."},{"lineNumber":1376,"author":{"gitId":"-"},"content":"4. Internship Diary adds Interview into Internship Application."},{"lineNumber":1377,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1378,"author":{"gitId":"gerhean"},"content":"Use case ends"},{"lineNumber":1379,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":1380,"author":{"gitId":"-"},"content":"*Extensions*"},{"lineNumber":1381,"author":{"gitId":"-"},"content":""},{"lineNumber":1382,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1383,"author":{"gitId":"-"},"content":"* 2a. The Internship Application does not exist."},{"lineNumber":1384,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1385,"author":{"gitId":"-"},"content":"** 2a.1. Internship Diary shows an error message."},{"lineNumber":1386,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1387,"author":{"gitId":"-"},"content":"Use case resumes at step 2"},{"lineNumber":1388,"author":{"gitId":"-"},"content":""},{"lineNumber":1389,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1390,"author":{"gitId":"-"},"content":"* 2b. The Interview to be created has invalid fields."},{"lineNumber":1391,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1392,"author":{"gitId":"-"},"content":"** 2b.1. Internship Diary shows an error message."},{"lineNumber":1393,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1394,"author":{"gitId":"-"},"content":"Use case resumes at step 2"},{"lineNumber":1395,"author":{"gitId":"-"},"content":""},{"lineNumber":1396,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1397,"author":{"gitId":"-"},"content":"* 3a. The Interview created already exists in the Internship Application."},{"lineNumber":1398,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1399,"author":{"gitId":"-"},"content":"** 3a.1 Internship Diary shows an error message."},{"lineNumber":1400,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1401,"author":{"gitId":"-"},"content":"Use case resumes at step 2"},{"lineNumber":1402,"author":{"gitId":"-"},"content":""},{"lineNumber":1403,"author":{"gitId":"-"},"content":"[discrete]"},{"lineNumber":1404,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Use case: UC14 - Edit Interview"},{"lineNumber":1405,"author":{"gitId":"-"},"content":""},{"lineNumber":1406,"author":{"gitId":"-"},"content":"*MSS*"},{"lineNumber":1407,"author":{"gitId":"-"},"content":""},{"lineNumber":1408,"author":{"gitId":"-"},"content":"1. User requests to edit a specific Interview in a specific Internship Application."},{"lineNumber":1409,"author":{"gitId":"-"},"content":"2. Internship Diary creates a new Interview with edited fields."},{"lineNumber":1410,"author":{"gitId":"-"},"content":"3. Internship Diary replaces old Interview with new Interview in Internship Application."},{"lineNumber":1411,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1412,"author":{"gitId":"-"},"content":"Use case ends"},{"lineNumber":1413,"author":{"gitId":"-"},"content":""},{"lineNumber":1414,"author":{"gitId":"-"},"content":"*Extensions*"},{"lineNumber":1415,"author":{"gitId":"-"},"content":""},{"lineNumber":1416,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1417,"author":{"gitId":"-"},"content":"* 1a. The Internship Application does not exist."},{"lineNumber":1418,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1419,"author":{"gitId":"-"},"content":"** 1a.1. Internship Diary shows an error message."},{"lineNumber":1420,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1421,"author":{"gitId":"-"},"content":"Use case resumes at step 2"},{"lineNumber":1422,"author":{"gitId":"-"},"content":""},{"lineNumber":1423,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1424,"author":{"gitId":"-"},"content":"* 1b. The new Interview to be created has invalid fields."},{"lineNumber":1425,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1426,"author":{"gitId":"-"},"content":"** 1b.1. Internship Diary shows an error message."},{"lineNumber":1427,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1428,"author":{"gitId":"-"},"content":"Use case resumes at step 2"},{"lineNumber":1429,"author":{"gitId":"-"},"content":""},{"lineNumber":1430,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1431,"author":{"gitId":"-"},"content":"* 2a. The edited Interview already exists in the Internship Application."},{"lineNumber":1432,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1433,"author":{"gitId":"-"},"content":"** 2a.1 Internship Diary shows an error message."},{"lineNumber":1434,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1435,"author":{"gitId":"-"},"content":"Use case resumes at step 2"},{"lineNumber":1436,"author":{"gitId":"-"},"content":""},{"lineNumber":1437,"author":{"gitId":"-"},"content":"[discrete]"},{"lineNumber":1438,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Use case: UC15 - Delete Interview"},{"lineNumber":1439,"author":{"gitId":"-"},"content":""},{"lineNumber":1440,"author":{"gitId":"-"},"content":"*MSS*"},{"lineNumber":1441,"author":{"gitId":"-"},"content":""},{"lineNumber":1442,"author":{"gitId":"-"},"content":"1. User requests to delete a specific Interview in a specific Internship Application."},{"lineNumber":1443,"author":{"gitId":"-"},"content":"2. Internship Diary removes Interview in Internship Application."},{"lineNumber":1444,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1445,"author":{"gitId":"-"},"content":"Use case ends"},{"lineNumber":1446,"author":{"gitId":"-"},"content":""},{"lineNumber":1447,"author":{"gitId":"-"},"content":"*Extensions*"},{"lineNumber":1448,"author":{"gitId":"-"},"content":""},{"lineNumber":1449,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1450,"author":{"gitId":"-"},"content":"* 1a. The Internship Application does not exist."},{"lineNumber":1451,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1452,"author":{"gitId":"-"},"content":"** 1a.1. Internship Diary shows an error message."},{"lineNumber":1453,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1454,"author":{"gitId":"-"},"content":"Use case resumes at step 2"},{"lineNumber":1455,"author":{"gitId":"-"},"content":""},{"lineNumber":1456,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1457,"author":{"gitId":"-"},"content":"* 1b. The Interview to be deleted does not exist."},{"lineNumber":1458,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1459,"author":{"gitId":"-"},"content":"** 1b.1. Internship Diary shows an error message."},{"lineNumber":1460,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1461,"author":{"gitId":"-"},"content":"Use case resumes at step 2"},{"lineNumber":1462,"author":{"gitId":"-"},"content":""},{"lineNumber":1463,"author":{"gitId":"-"},"content":"[discrete]"},{"lineNumber":1464,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Use case: UC16 - View Statistics"},{"lineNumber":1465,"author":{"gitId":"-"},"content":""},{"lineNumber":1466,"author":{"gitId":"-"},"content":"*Guarantee(s)*"},{"lineNumber":1467,"author":{"gitId":"-"},"content":""},{"lineNumber":1468,"author":{"gitId":"-"},"content":"* Separate window that contains the statistics appears."},{"lineNumber":1469,"author":{"gitId":"-"},"content":""},{"lineNumber":1470,"author":{"gitId":"-"},"content":"*MSS*"},{"lineNumber":1471,"author":{"gitId":"-"},"content":""},{"lineNumber":1472,"author":{"gitId":"-"},"content":"1. User requests to view the statistics of his internship application(s)."},{"lineNumber":1473,"author":{"gitId":"-"},"content":"2. Internship Diary displays the statistics."},{"lineNumber":1474,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1475,"author":{"gitId":"-"},"content":"Use case ends."},{"lineNumber":1476,"author":{"gitId":"-"},"content":""},{"lineNumber":1477,"author":{"gitId":"gerhean"},"content":"[discrete]"},{"lineNumber":1478,"author":{"gitId":"gerhean"},"content":"\u003d\u003d\u003d Use case: UC17 - Clear Command"},{"lineNumber":1479,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":1480,"author":{"gitId":"gerhean"},"content":"*MSS*"},{"lineNumber":1481,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":1482,"author":{"gitId":"gerhean"},"content":"1. User requests to delete all internship application(s)."},{"lineNumber":1483,"author":{"gitId":"gerhean"},"content":"2. Internship Diary prompts the user for confirmation."},{"lineNumber":1484,"author":{"gitId":"gerhean"},"content":"3. User enters confirmation phrase."},{"lineNumber":1485,"author":{"gitId":"gerhean"},"content":"4. Internship Diary deletes all internship application(s)."},{"lineNumber":1486,"author":{"gitId":"gerhean"},"content":"+"},{"lineNumber":1487,"author":{"gitId":"gerhean"},"content":"Use case ends."},{"lineNumber":1488,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":1489,"author":{"gitId":"gerhean"},"content":"*Extensions*"},{"lineNumber":1490,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":1491,"author":{"gitId":"gerhean"},"content":"[none]"},{"lineNumber":1492,"author":{"gitId":"gerhean"},"content":"* 3a. The user enters something else."},{"lineNumber":1493,"author":{"gitId":"gerhean"},"content":"[none]"},{"lineNumber":1494,"author":{"gitId":"gerhean"},"content":"** 3a.1. Internship Diary does not delete any internship application(s)."},{"lineNumber":1495,"author":{"gitId":"gerhean"},"content":"+"},{"lineNumber":1496,"author":{"gitId":"gerhean"},"content":"Use case ends."},{"lineNumber":1497,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":1498,"author":{"gitId":"-"},"content":"[discrete]"},{"lineNumber":1499,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Use case: UC18 - Getting Internship Application due or has interviews in 7 days in main list"},{"lineNumber":1500,"author":{"gitId":"-"},"content":""},{"lineNumber":1501,"author":{"gitId":"-"},"content":"*MSS*"},{"lineNumber":1502,"author":{"gitId":"-"},"content":""},{"lineNumber":1503,"author":{"gitId":"-"},"content":"1. User pass:q[\u003cu\u003eviews main list UC1\u003c/u\u003e]."},{"lineNumber":1504,"author":{"gitId":"-"},"content":"2. Users request to get applications which are due or have interviews in 7 days."},{"lineNumber":1505,"author":{"gitId":"-"},"content":"3. Internship Diary shows relevant applications."},{"lineNumber":1506,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1507,"author":{"gitId":"-"},"content":"Use case ends."},{"lineNumber":1508,"author":{"gitId":"-"},"content":""},{"lineNumber":1509,"author":{"gitId":"-"},"content":"*Extensions*"},{"lineNumber":1510,"author":{"gitId":"-"},"content":""},{"lineNumber":1511,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1512,"author":{"gitId":"-"},"content":"* 2a."},{"lineNumber":1513,"author":{"gitId":"-"},"content":"No Internship Application is shown."},{"lineNumber":1514,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1515,"author":{"gitId":"-"},"content":"Use case ends."},{"lineNumber":1516,"author":{"gitId":"-"},"content":""},{"lineNumber":1517,"author":{"gitId":"-"},"content":"[discrete]"},{"lineNumber":1518,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Use case: UC19 - Getting Internship Application due or has interviews in 7 days in archival list"},{"lineNumber":1519,"author":{"gitId":"-"},"content":""},{"lineNumber":1520,"author":{"gitId":"-"},"content":"*MSS*"},{"lineNumber":1521,"author":{"gitId":"-"},"content":""},{"lineNumber":1522,"author":{"gitId":"-"},"content":"1. User pass:q[\u003cu\u003eviews archival list UC2\u003c/u\u003e]."},{"lineNumber":1523,"author":{"gitId":"-"},"content":"2. Users request to get applications which are due or have interviews in 7 days."},{"lineNumber":1524,"author":{"gitId":"-"},"content":"3. No Internship Application is shown."},{"lineNumber":1525,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1526,"author":{"gitId":"-"},"content":"Use case ends."},{"lineNumber":1527,"author":{"gitId":"-"},"content":""},{"lineNumber":1528,"author":{"gitId":"-"},"content":"[appendix]"},{"lineNumber":1529,"author":{"gitId":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1530,"author":{"gitId":"-"},"content":""},{"lineNumber":1531,"author":{"gitId":"-"},"content":"*Availability*"},{"lineNumber":1532,"author":{"gitId":"-"},"content":""},{"lineNumber":1533,"author":{"gitId":"-"},"content":". The application is available for download on our GitHub release page in the form of a JAR file."},{"lineNumber":1534,"author":{"gitId":"-"},"content":""},{"lineNumber":1535,"author":{"gitId":"-"},"content":"*Capacity*"},{"lineNumber":1536,"author":{"gitId":"-"},"content":""},{"lineNumber":1537,"author":{"gitId":"-"},"content":". The application should be able to store up to 1000 internship applications."},{"lineNumber":1538,"author":{"gitId":"-"},"content":""},{"lineNumber":1539,"author":{"gitId":"-"},"content":"*Performance*"},{"lineNumber":1540,"author":{"gitId":"-"},"content":""},{"lineNumber":1541,"author":{"gitId":"-"},"content":". Response time to any user command is within 3 seconds."},{"lineNumber":1542,"author":{"gitId":"-"},"content":". The application should be able to contain and handle up to 300 internship applications before facing any form of performance bottleneck issues."},{"lineNumber":1543,"author":{"gitId":"-"},"content":""},{"lineNumber":1544,"author":{"gitId":"-"},"content":"*Reliability*"},{"lineNumber":1545,"author":{"gitId":"-"},"content":""},{"lineNumber":1546,"author":{"gitId":"-"},"content":". The application should guide the user if it is unable to execute any of the user actions for various reasons."},{"lineNumber":1547,"author":{"gitId":"-"},"content":""},{"lineNumber":1548,"author":{"gitId":"-"},"content":"*Compatibility*"},{"lineNumber":1549,"author":{"gitId":"-"},"content":""},{"lineNumber":1550,"author":{"gitId":"-"},"content":". The application should work as intended on any mainstream operating systems."},{"lineNumber":1551,"author":{"gitId":"-"},"content":". The application is guaranteed to work on Java version 11."},{"lineNumber":1552,"author":{"gitId":"-"},"content":""},{"lineNumber":1553,"author":{"gitId":"-"},"content":"*Usability*"},{"lineNumber":1554,"author":{"gitId":"-"},"content":""},{"lineNumber":1555,"author":{"gitId":"-"},"content":". A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1556,"author":{"gitId":"-"},"content":""},{"lineNumber":1557,"author":{"gitId":"-"},"content":"*Robustness*"},{"lineNumber":1558,"author":{"gitId":"-"},"content":""},{"lineNumber":1559,"author":{"gitId":"-"},"content":". The application should remain highly relevant to internship applications at any point in the future."},{"lineNumber":1560,"author":{"gitId":"-"},"content":""},{"lineNumber":1561,"author":{"gitId":"-"},"content":"*Integrity*"},{"lineNumber":1562,"author":{"gitId":"-"},"content":""},{"lineNumber":1563,"author":{"gitId":"-"},"content":". There should be user updates to the internship applications to ensure its integrity."},{"lineNumber":1564,"author":{"gitId":"-"},"content":". When there is an application update, it should not compromise the integrity of the save file."},{"lineNumber":1565,"author":{"gitId":"-"},"content":""},{"lineNumber":1566,"author":{"gitId":"-"},"content":"*Maintainability*"},{"lineNumber":1567,"author":{"gitId":"-"},"content":""},{"lineNumber":1568,"author":{"gitId":"gerhean"},"content":". The application should be compliant with the coding standard set forth by CS2103T."},{"lineNumber":1569,"author":{"gitId":"gerhean"},"content":". The application should be compliant with best coding practices highlighted in CS2103T."},{"lineNumber":1570,"author":{"gitId":"-"},"content":". The application should be designed such that any programmer with at least a year of experience should be able to read, maintain, and contribute to the source code easily."},{"lineNumber":1571,"author":{"gitId":"-"},"content":""},{"lineNumber":1572,"author":{"gitId":"-"},"content":"*Process*"},{"lineNumber":1573,"author":{"gitId":"-"},"content":""},{"lineNumber":1574,"author":{"gitId":"-"},"content":". The project features are to be in line with any changes to real world internship application process."},{"lineNumber":1575,"author":{"gitId":"-"},"content":""},{"lineNumber":1576,"author":{"gitId":"-"},"content":"*Project Scope*"},{"lineNumber":1577,"author":{"gitId":"-"},"content":""},{"lineNumber":1578,"author":{"gitId":"-"},"content":". The application requires manual addition of internship application into the system."},{"lineNumber":1579,"author":{"gitId":"-"},"content":""},{"lineNumber":1580,"author":{"gitId":"-"},"content":"*Privacy*"},{"lineNumber":1581,"author":{"gitId":"-"},"content":""},{"lineNumber":1582,"author":{"gitId":"-"},"content":". The application should not store any information of user\u0027s internship applications in remote storage."},{"lineNumber":1583,"author":{"gitId":"-"},"content":""},{"lineNumber":1584,"author":{"gitId":"-"},"content":"[appendix]"},{"lineNumber":1585,"author":{"gitId":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1586,"author":{"gitId":"-"},"content":""},{"lineNumber":1587,"author":{"gitId":"-"},"content":"[[mainstream-os]]"},{"lineNumber":1588,"author":{"gitId":"-"},"content":"Mainstream OS::"},{"lineNumber":1589,"author":{"gitId":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1590,"author":{"gitId":"-"},"content":""},{"lineNumber":1591,"author":{"gitId":"-"},"content":"[[internship-application]]"},{"lineNumber":1592,"author":{"gitId":"-"},"content":"Internship application::"},{"lineNumber":1593,"author":{"gitId":"-"},"content":"An application made by the user to a company offering an internship position"},{"lineNumber":1594,"author":{"gitId":"-"},"content":""},{"lineNumber":1595,"author":{"gitId":"-"},"content":"[[fields]]"},{"lineNumber":1596,"author":{"gitId":"-"},"content":"Fields::"},{"lineNumber":1597,"author":{"gitId":"-"},"content":"A list of descriptions for an internship application grouped by type"},{"lineNumber":1598,"author":{"gitId":"-"},"content":""},{"lineNumber":1599,"author":{"gitId":"-"},"content":"[[window-preferences]]"},{"lineNumber":1600,"author":{"gitId":"-"},"content":"Window preferences::"},{"lineNumber":1601,"author":{"gitId":"-"},"content":"The last application window size and location the user used before shutdown"},{"lineNumber":1602,"author":{"gitId":"-"},"content":""},{"lineNumber":1603,"author":{"gitId":"-"},"content":"// tag::productSurvey[]"},{"lineNumber":1604,"author":{"gitId":"-"},"content":"[appendix]"},{"lineNumber":1605,"author":{"gitId":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1606,"author":{"gitId":"-"},"content":""},{"lineNumber":1607,"author":{"gitId":"-"},"content":"Below are some of the programs currently available that could be used to manage internship applications, as well as their pros and cons"},{"lineNumber":1608,"author":{"gitId":"-"},"content":""},{"lineNumber":1609,"author":{"gitId":"-"},"content":"*Huntr*"},{"lineNumber":1610,"author":{"gitId":"-"},"content":""},{"lineNumber":1611,"author":{"gitId":"-"},"content":"Pros:"},{"lineNumber":1612,"author":{"gitId":"-"},"content":""},{"lineNumber":1613,"author":{"gitId":"-"},"content":"* Uses online database"},{"lineNumber":1614,"author":{"gitId":"-"},"content":"* Uses kanban board for drag and drop management"},{"lineNumber":1615,"author":{"gitId":"-"},"content":""},{"lineNumber":1616,"author":{"gitId":"-"},"content":"Cons:"},{"lineNumber":1617,"author":{"gitId":"-"},"content":""},{"lineNumber":1618,"author":{"gitId":"-"},"content":"* Cannot use CLI for interactions with the system"},{"lineNumber":1619,"author":{"gitId":"-"},"content":"* Cannot use without internet connection"},{"lineNumber":1620,"author":{"gitId":"-"},"content":"* Cannot use without signing up for an account"},{"lineNumber":1621,"author":{"gitId":"-"},"content":"* Cannot get filtered list, the whole board is always shown and can be disorganised"},{"lineNumber":1622,"author":{"gitId":"-"},"content":"* Cannot directly get reminders for deadlines, must add a new task"},{"lineNumber":1623,"author":{"gitId":"-"},"content":""},{"lineNumber":1624,"author":{"gitId":"-"},"content":"*Excel*"},{"lineNumber":1625,"author":{"gitId":"-"},"content":""},{"lineNumber":1626,"author":{"gitId":"-"},"content":"Pros:"},{"lineNumber":1627,"author":{"gitId":"-"},"content":""},{"lineNumber":1628,"author":{"gitId":"-"},"content":"* Free for NUS students"},{"lineNumber":1629,"author":{"gitId":"-"},"content":"* Allows the user to define what to include"},{"lineNumber":1630,"author":{"gitId":"-"},"content":"* Allows the user to use it offline"},{"lineNumber":1631,"author":{"gitId":"-"},"content":""},{"lineNumber":1632,"author":{"gitId":"-"},"content":"Cons:"},{"lineNumber":1633,"author":{"gitId":"-"},"content":""},{"lineNumber":1634,"author":{"gitId":"-"},"content":"* Does not use CLI for interactions with the system"},{"lineNumber":1635,"author":{"gitId":"-"},"content":"* Cannot easily go straight to managing internship applications, steep learning curve"},{"lineNumber":1636,"author":{"gitId":"-"},"content":"* Can get messy quickly, no inbuilt filter and archive functions"},{"lineNumber":1637,"author":{"gitId":"-"},"content":"* Does not include inbuilt statistics and reminder functions"},{"lineNumber":1638,"author":{"gitId":"-"},"content":""},{"lineNumber":1639,"author":{"gitId":"-"},"content":"// end::productSurvey[]"},{"lineNumber":1640,"author":{"gitId":"-"},"content":""},{"lineNumber":1641,"author":{"gitId":"-"},"content":"[appendix]"},{"lineNumber":1642,"author":{"gitId":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1643,"author":{"gitId":"-"},"content":""},{"lineNumber":1644,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1645,"author":{"gitId":"-"},"content":""},{"lineNumber":1646,"author":{"gitId":"-"},"content":"[NOTE]"},{"lineNumber":1647,"author":{"gitId":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1648,"author":{"gitId":"-"},"content":""},{"lineNumber":1649,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1650,"author":{"gitId":"-"},"content":""},{"lineNumber":1651,"author":{"gitId":"-"},"content":". Initial launch"},{"lineNumber":1652,"author":{"gitId":"-"},"content":""},{"lineNumber":1653,"author":{"gitId":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1654,"author":{"gitId":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1655,"author":{"gitId":"-"},"content":"   Expected: Shows the GUI with a set of sample internship applications. The window size may not be optimum."},{"lineNumber":1656,"author":{"gitId":"-"},"content":". Saving window preferences"},{"lineNumber":1657,"author":{"gitId":"-"},"content":""},{"lineNumber":1658,"author":{"gitId":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1659,"author":{"gitId":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1660,"author":{"gitId":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1661,"author":{"gitId":"-"},"content":""},{"lineNumber":1662,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Using Internship Diary with Sample Internship Application List"},{"lineNumber":1663,"author":{"gitId":"-"},"content":". Close Internship Diary."},{"lineNumber":1664,"author":{"gitId":"-"},"content":". Delete the file `./internshipdiary.json` (if applicable)."},{"lineNumber":1665,"author":{"gitId":"-"},"content":". Launch Internship Diary. +"},{"lineNumber":1666,"author":{"gitId":"-"},"content":"  Expected: A sample internship application list with 6 internship applications should be displayed."},{"lineNumber":1667,"author":{"gitId":"-"},"content":""},{"lineNumber":1668,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Command Box"},{"lineNumber":1669,"author":{"gitId":"-"},"content":""},{"lineNumber":1670,"author":{"gitId":"-"},"content":". Retrieving previous commands"},{"lineNumber":1671,"author":{"gitId":"-"},"content":""},{"lineNumber":1672,"author":{"gitId":"-"},"content":".. Prerequisites:"},{"lineNumber":1673,"author":{"gitId":"-"},"content":"* At least one command has been executed"},{"lineNumber":1674,"author":{"gitId":"-"},"content":"* Tester is not already at the oldest executed command"},{"lineNumber":1675,"author":{"gitId":"-"},"content":""},{"lineNumber":1676,"author":{"gitId":"-"},"content":"... Test case: press up key +"},{"lineNumber":1677,"author":{"gitId":"-"},"content":"Expected: Previously executed command appears in the Command Box."},{"lineNumber":1678,"author":{"gitId":"-"},"content":""},{"lineNumber":1679,"author":{"gitId":"-"},"content":". Retrieving later commands"},{"lineNumber":1680,"author":{"gitId":"-"},"content":""},{"lineNumber":1681,"author":{"gitId":"-"},"content":".. Prerequisites:"},{"lineNumber":1682,"author":{"gitId":"-"},"content":"* Tester has retrieved at least one previous command"},{"lineNumber":1683,"author":{"gitId":"-"},"content":""},{"lineNumber":1684,"author":{"gitId":"-"},"content":"... Test case: press down key +"},{"lineNumber":1685,"author":{"gitId":"-"},"content":"Expected: A command that was entered after the current retrieved command appears in the Command Box."},{"lineNumber":1686,"author":{"gitId":"-"},"content":""},{"lineNumber":1687,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Main List View"},{"lineNumber":1688,"author":{"gitId":"-"},"content":""},{"lineNumber":1689,"author":{"gitId":"-"},"content":". Viewing the main list of internship application(s)"},{"lineNumber":1690,"author":{"gitId":"-"},"content":"... Test case: `list` +"},{"lineNumber":1691,"author":{"gitId":"-"},"content":"Expected: All unarchived internship application(s) are displayed."},{"lineNumber":1692,"author":{"gitId":"-"},"content":""},{"lineNumber":1693,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Archival List View"},{"lineNumber":1694,"author":{"gitId":"-"},"content":""},{"lineNumber":1695,"author":{"gitId":"-"},"content":". Viewing the archival list of internship application(s)"},{"lineNumber":1696,"author":{"gitId":"-"},"content":"... Test case: `archival` +"},{"lineNumber":1697,"author":{"gitId":"-"},"content":"Expected: All archived internship application(s) are displayed."},{"lineNumber":1698,"author":{"gitId":"-"},"content":""},{"lineNumber":1699,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Adding an Internship Application"},{"lineNumber":1700,"author":{"gitId":"-"},"content":""},{"lineNumber":1701,"author":{"gitId":"-"},"content":". Adding an internship application"},{"lineNumber":1702,"author":{"gitId":"-"},"content":""},{"lineNumber":1703,"author":{"gitId":"-"},"content":"... Test case: `add c/Google r/Software Engineer d/17 04 2020 s/applied` +"},{"lineNumber":1704,"author":{"gitId":"-"},"content":"Expected: New internship application is added to the bottom of the list."},{"lineNumber":1705,"author":{"gitId":"-"},"content":"Details of the newly-added internship application shown in the feedback box."},{"lineNumber":1706,"author":{"gitId":"-"},"content":""},{"lineNumber":1707,"author":{"gitId":"-"},"content":"... Test case: `add c/Google r/Software Engineer d/17 04 2020` +"},{"lineNumber":1708,"author":{"gitId":"-"},"content":"Expected: Internship application is not added."},{"lineNumber":1709,"author":{"gitId":"-"},"content":"Error details shown in feedback box."},{"lineNumber":1710,"author":{"gitId":"-"},"content":""},{"lineNumber":1711,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Deleting Internship Application"},{"lineNumber":1712,"author":{"gitId":"-"},"content":""},{"lineNumber":1713,"author":{"gitId":"-"},"content":". Deleting an internship application by index"},{"lineNumber":1714,"author":{"gitId":"-"},"content":""},{"lineNumber":1715,"author":{"gitId":"-"},"content":".. Prerequisites:"},{"lineNumber":1716,"author":{"gitId":"-"},"content":"* At least one internship application displayed"},{"lineNumber":1717,"author":{"gitId":"-"},"content":""},{"lineNumber":1718,"author":{"gitId":"-"},"content":"... Test case: `delete 1` +"},{"lineNumber":1719,"author":{"gitId":"-"},"content":"Expected: First internship application is deleted from the list."},{"lineNumber":1720,"author":{"gitId":"-"},"content":"Details of the deleted internship application shown in the feedback box."},{"lineNumber":1721,"author":{"gitId":"-"},"content":""},{"lineNumber":1722,"author":{"gitId":"-"},"content":"... Test case: `delete 0` +"},{"lineNumber":1723,"author":{"gitId":"-"},"content":"Expected: No internship application is deleted."},{"lineNumber":1724,"author":{"gitId":"-"},"content":"Error details shown in feedback box."},{"lineNumber":1725,"author":{"gitId":"-"},"content":""},{"lineNumber":1726,"author":{"gitId":"-"},"content":"... Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) +"},{"lineNumber":1727,"author":{"gitId":"-"},"content":"Expected: Similar to previous."},{"lineNumber":1728,"author":{"gitId":"-"},"content":""},{"lineNumber":1729,"author":{"gitId":"-"},"content":". Deleting internship applications by indices"},{"lineNumber":1730,"author":{"gitId":"-"},"content":""},{"lineNumber":1731,"author":{"gitId":"-"},"content":".. Prerequisites:"},{"lineNumber":1732,"author":{"gitId":"-"},"content":"* At least two internship applications displayed"},{"lineNumber":1733,"author":{"gitId":"-"},"content":""},{"lineNumber":1734,"author":{"gitId":"-"},"content":"... Test case: `delete 1, 2` +"},{"lineNumber":1735,"author":{"gitId":"-"},"content":"Expected: First and second internship applications are deleted from the list."},{"lineNumber":1736,"author":{"gitId":"-"},"content":"Details of the deleted internship applications shown in the feedback box."},{"lineNumber":1737,"author":{"gitId":"-"},"content":""},{"lineNumber":1738,"author":{"gitId":"-"},"content":"... Test case: `delete 2, 1` +"},{"lineNumber":1739,"author":{"gitId":"-"},"content":"Expected: First and second internship applications are deleted from the list."},{"lineNumber":1740,"author":{"gitId":"-"},"content":"Details of the deleted internship applications shown in the feedback box."},{"lineNumber":1741,"author":{"gitId":"-"},"content":""},{"lineNumber":1742,"author":{"gitId":"-"},"content":"... Test case: `delete 2, 2` +"},{"lineNumber":1743,"author":{"gitId":"-"},"content":"Expected: Second internship application is deleted from the list."},{"lineNumber":1744,"author":{"gitId":"-"},"content":"Details of the deleted internship application shown in the feedback box."},{"lineNumber":1745,"author":{"gitId":"-"},"content":""},{"lineNumber":1746,"author":{"gitId":"-"},"content":"... Test case: `delete 0, 2` +"},{"lineNumber":1747,"author":{"gitId":"-"},"content":"Expected: No internship application is deleted."},{"lineNumber":1748,"author":{"gitId":"-"},"content":"Error details shown in feedback box."},{"lineNumber":1749,"author":{"gitId":"-"},"content":""},{"lineNumber":1750,"author":{"gitId":"-"},"content":". Deleting internship application(s) by status field"},{"lineNumber":1751,"author":{"gitId":"-"},"content":""},{"lineNumber":1752,"author":{"gitId":"-"},"content":".. Prerequisites:"},{"lineNumber":1753,"author":{"gitId":"-"},"content":"* at least one internship application with status \"applied\""},{"lineNumber":1754,"author":{"gitId":"-"},"content":"* at least one internship application with status \"wishlist\""},{"lineNumber":1755,"author":{"gitId":"-"},"content":"* no internship applications with status \"rejected\""},{"lineNumber":1756,"author":{"gitId":"-"},"content":""},{"lineNumber":1757,"author":{"gitId":"-"},"content":"... Test case: `delete s/applied` +"},{"lineNumber":1758,"author":{"gitId":"-"},"content":"Expected: All internship applications with status \"applied\" are deleted from the list."},{"lineNumber":1759,"author":{"gitId":"-"},"content":"Details of the deleted internship applications shown in the feedback box."},{"lineNumber":1760,"author":{"gitId":"-"},"content":""},{"lineNumber":1761,"author":{"gitId":"-"},"content":"... Test case: `delete s/rejected` +"},{"lineNumber":1762,"author":{"gitId":"-"},"content":"Expected: No internship applications deleted."},{"lineNumber":1763,"author":{"gitId":"-"},"content":"Feedback box will show blank list of internship applications deleted."},{"lineNumber":1764,"author":{"gitId":"-"},"content":""},{"lineNumber":1765,"author":{"gitId":"-"},"content":"... Test case: `delete s/notvalidstatus` +"},{"lineNumber":1766,"author":{"gitId":"-"},"content":"Expected: No internship application deleted."},{"lineNumber":1767,"author":{"gitId":"-"},"content":"Error details shown in feedback box."},{"lineNumber":1768,"author":{"gitId":"-"},"content":""},{"lineNumber":1769,"author":{"gitId":"-"},"content":"... Test case: `delete s/applied wishlist` +"},{"lineNumber":1770,"author":{"gitId":"-"},"content":"Expected: All internship applications with status \"applied\" or \"wishlist\" are deleted from the list."},{"lineNumber":1771,"author":{"gitId":"-"},"content":"Details of the deleted internship applications shown in the feedback box."},{"lineNumber":1772,"author":{"gitId":"-"},"content":""},{"lineNumber":1773,"author":{"gitId":"-"},"content":"... Test case: `delete s/applied notvalidstatus` +"},{"lineNumber":1774,"author":{"gitId":"-"},"content":"Expected: All internship applications with status \"applied\" are deleted from the list."},{"lineNumber":1775,"author":{"gitId":"-"},"content":"Details of the deleted internship applications shown in the feedback box."},{"lineNumber":1776,"author":{"gitId":"-"},"content":""},{"lineNumber":1777,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Archiving Internship Application"},{"lineNumber":1778,"author":{"gitId":"-"},"content":""},{"lineNumber":1779,"author":{"gitId":"-"},"content":". Archiving an internship application by index"},{"lineNumber":1780,"author":{"gitId":"-"},"content":""},{"lineNumber":1781,"author":{"gitId":"-"},"content":".. Prerequisites:"},{"lineNumber":1782,"author":{"gitId":"-"},"content":"* Current view is the main list"},{"lineNumber":1783,"author":{"gitId":"-"},"content":"* At least one internship application displayed"},{"lineNumber":1784,"author":{"gitId":"-"},"content":""},{"lineNumber":1785,"author":{"gitId":"-"},"content":"... Test case: `archive 1` +"},{"lineNumber":1786,"author":{"gitId":"-"},"content":"Expected: First internship application is archived from the list."},{"lineNumber":1787,"author":{"gitId":"-"},"content":"Details of the archived internship application shown in the feedback box."},{"lineNumber":1788,"author":{"gitId":"-"},"content":""},{"lineNumber":1789,"author":{"gitId":"-"},"content":"... Test case: `archive 0` +"},{"lineNumber":1790,"author":{"gitId":"-"},"content":"Expected: No internship application is archived."},{"lineNumber":1791,"author":{"gitId":"-"},"content":"Error details shown in feedback box."},{"lineNumber":1792,"author":{"gitId":"-"},"content":""},{"lineNumber":1793,"author":{"gitId":"-"},"content":"... Other incorrect archive commands to try: `archive`, `archive x` (where x is larger than the list size) +"},{"lineNumber":1794,"author":{"gitId":"-"},"content":"Expected: Similar to previous."},{"lineNumber":1795,"author":{"gitId":"-"},"content":""},{"lineNumber":1796,"author":{"gitId":"-"},"content":". Archiving internship applications by indices"},{"lineNumber":1797,"author":{"gitId":"-"},"content":""},{"lineNumber":1798,"author":{"gitId":"-"},"content":".. Prerequisites:"},{"lineNumber":1799,"author":{"gitId":"-"},"content":"* Current view is the main list"},{"lineNumber":1800,"author":{"gitId":"-"},"content":"* At least two internship applications displayed"},{"lineNumber":1801,"author":{"gitId":"-"},"content":""},{"lineNumber":1802,"author":{"gitId":"-"},"content":"... Test case: `archive 1, 2` +"},{"lineNumber":1803,"author":{"gitId":"-"},"content":"Expected: First and second internship applications are archived from the list."},{"lineNumber":1804,"author":{"gitId":"-"},"content":"Details of the archived internship applications shown in the feedback box."},{"lineNumber":1805,"author":{"gitId":"-"},"content":""},{"lineNumber":1806,"author":{"gitId":"-"},"content":"... Test case: `archive 2, 1` +"},{"lineNumber":1807,"author":{"gitId":"-"},"content":"Expected: First and second internship applications are archived from the list."},{"lineNumber":1808,"author":{"gitId":"-"},"content":"Details of the archived internship applications shown in the feedback box."},{"lineNumber":1809,"author":{"gitId":"-"},"content":""},{"lineNumber":1810,"author":{"gitId":"-"},"content":"... Test case: `archive 2, 2` +"},{"lineNumber":1811,"author":{"gitId":"-"},"content":"Expected: Second internship application is archived from the list."},{"lineNumber":1812,"author":{"gitId":"-"},"content":"Details of the archived internship application shown in the feedback box."},{"lineNumber":1813,"author":{"gitId":"-"},"content":""},{"lineNumber":1814,"author":{"gitId":"-"},"content":"... Test case: `archive 0, 2` +"},{"lineNumber":1815,"author":{"gitId":"-"},"content":"Expected: No internship application is archived."},{"lineNumber":1816,"author":{"gitId":"-"},"content":"Error details shown in feedback box."},{"lineNumber":1817,"author":{"gitId":"-"},"content":""},{"lineNumber":1818,"author":{"gitId":"-"},"content":". Archiving internship application(s) by status field"},{"lineNumber":1819,"author":{"gitId":"-"},"content":""},{"lineNumber":1820,"author":{"gitId":"-"},"content":".. Prerequisites:"},{"lineNumber":1821,"author":{"gitId":"-"},"content":"* current view is the main list"},{"lineNumber":1822,"author":{"gitId":"-"},"content":"* at least one internship application with status \"applied\""},{"lineNumber":1823,"author":{"gitId":"-"},"content":"* at least one internship application with status \"wishlist\""},{"lineNumber":1824,"author":{"gitId":"-"},"content":"* no internship applications with status \"rejected\""},{"lineNumber":1825,"author":{"gitId":"-"},"content":""},{"lineNumber":1826,"author":{"gitId":"-"},"content":"... Test case: `archive s/applied` +"},{"lineNumber":1827,"author":{"gitId":"-"},"content":"Expected: All internship application(s) with status \"applied\" are archived from the list."},{"lineNumber":1828,"author":{"gitId":"-"},"content":"Details of the archived internship applications shown in the feedback box."},{"lineNumber":1829,"author":{"gitId":"-"},"content":""},{"lineNumber":1830,"author":{"gitId":"-"},"content":"... Test case: `archive s/rejected` +"},{"lineNumber":1831,"author":{"gitId":"-"},"content":"Expected: No internship application(s) archived."},{"lineNumber":1832,"author":{"gitId":"-"},"content":"Feedback box will show blank list of internship applications archived."},{"lineNumber":1833,"author":{"gitId":"-"},"content":""},{"lineNumber":1834,"author":{"gitId":"-"},"content":"... Test case: `archive s/notvalidstatus` +"},{"lineNumber":1835,"author":{"gitId":"-"},"content":"Expected: No internship application archived."},{"lineNumber":1836,"author":{"gitId":"-"},"content":"Error details shown in feedback box."},{"lineNumber":1837,"author":{"gitId":"-"},"content":""},{"lineNumber":1838,"author":{"gitId":"-"},"content":"... Test case: `archive s/applied wishlist` +"},{"lineNumber":1839,"author":{"gitId":"-"},"content":"Expected: All internship applications with status \"applied\" or \"wishlist\" are archived from the list."},{"lineNumber":1840,"author":{"gitId":"-"},"content":"Details of the archived internship applications shown in the feedback box."},{"lineNumber":1841,"author":{"gitId":"-"},"content":""},{"lineNumber":1842,"author":{"gitId":"-"},"content":"... Test case: `archive s/applied notvalidstatus` +"},{"lineNumber":1843,"author":{"gitId":"-"},"content":"Expected: All internship applications with status \"applied\" are archived from the list."},{"lineNumber":1844,"author":{"gitId":"-"},"content":"Details of the archived internship applications shown in the feedback box."},{"lineNumber":1845,"author":{"gitId":"-"},"content":""},{"lineNumber":1846,"author":{"gitId":"-"},"content":""},{"lineNumber":1847,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Unarchiving Internship Application"},{"lineNumber":1848,"author":{"gitId":"-"},"content":""},{"lineNumber":1849,"author":{"gitId":"-"},"content":". Unarchiving an internship application by index"},{"lineNumber":1850,"author":{"gitId":"-"},"content":""},{"lineNumber":1851,"author":{"gitId":"-"},"content":".. Prerequisites:"},{"lineNumber":1852,"author":{"gitId":"-"},"content":"* current view is the archival list"},{"lineNumber":1853,"author":{"gitId":"-"},"content":"* At least one internship application displayed"},{"lineNumber":1854,"author":{"gitId":"-"},"content":""},{"lineNumber":1855,"author":{"gitId":"-"},"content":"... Test case: `unarchive 1` +"},{"lineNumber":1856,"author":{"gitId":"-"},"content":"Expected: First internship application is unarchived from the list."},{"lineNumber":1857,"author":{"gitId":"-"},"content":"Details of the unarchived internship application shown in the feedback box."},{"lineNumber":1858,"author":{"gitId":"-"},"content":""},{"lineNumber":1859,"author":{"gitId":"-"},"content":"... Test case: `unarchive 0` +"},{"lineNumber":1860,"author":{"gitId":"-"},"content":"Expected: No internship application is unarchived."},{"lineNumber":1861,"author":{"gitId":"-"},"content":"Error details shown in feedback box."},{"lineNumber":1862,"author":{"gitId":"-"},"content":""},{"lineNumber":1863,"author":{"gitId":"-"},"content":"... Other incorrect unarchive commands to try: `unarchive`, `unarchive x` (where x is larger than the list size) +"},{"lineNumber":1864,"author":{"gitId":"-"},"content":"Expected: Similar to previous."},{"lineNumber":1865,"author":{"gitId":"-"},"content":""},{"lineNumber":1866,"author":{"gitId":"-"},"content":". Unarchiving internship applications by indices"},{"lineNumber":1867,"author":{"gitId":"-"},"content":""},{"lineNumber":1868,"author":{"gitId":"-"},"content":".. Prerequisites:"},{"lineNumber":1869,"author":{"gitId":"-"},"content":"* current view is the archival list"},{"lineNumber":1870,"author":{"gitId":"-"},"content":"* At least two internship applications displayed"},{"lineNumber":1871,"author":{"gitId":"-"},"content":""},{"lineNumber":1872,"author":{"gitId":"-"},"content":"... Test case: `unarchive 1, 2` +"},{"lineNumber":1873,"author":{"gitId":"-"},"content":"Expected: First and second internship applications are unarchived from the list."},{"lineNumber":1874,"author":{"gitId":"-"},"content":"Details of the unarchived internship applications shown in the feedback box."},{"lineNumber":1875,"author":{"gitId":"-"},"content":""},{"lineNumber":1876,"author":{"gitId":"-"},"content":"... Test case: `unarchive 2, 1` +"},{"lineNumber":1877,"author":{"gitId":"-"},"content":"Expected: First and second internship applications are unarchived from the list."},{"lineNumber":1878,"author":{"gitId":"-"},"content":"Details of the unarchived internship applications shown in the feedback box."},{"lineNumber":1879,"author":{"gitId":"-"},"content":""},{"lineNumber":1880,"author":{"gitId":"-"},"content":"... Test case: `unarchive 2, 2` +"},{"lineNumber":1881,"author":{"gitId":"-"},"content":"Expected: Second internship application is unarchived from the list."},{"lineNumber":1882,"author":{"gitId":"-"},"content":"Details of the unarchived internship application shown in the feedback box."},{"lineNumber":1883,"author":{"gitId":"-"},"content":""},{"lineNumber":1884,"author":{"gitId":"-"},"content":"... Test case: `unarchive 0, 2` +"},{"lineNumber":1885,"author":{"gitId":"-"},"content":"Expected: No internship application is unarchived."},{"lineNumber":1886,"author":{"gitId":"-"},"content":"Error details shown in feedback box."},{"lineNumber":1887,"author":{"gitId":"-"},"content":""},{"lineNumber":1888,"author":{"gitId":"-"},"content":". Unarchiving internship application(s) by status field"},{"lineNumber":1889,"author":{"gitId":"-"},"content":""},{"lineNumber":1890,"author":{"gitId":"-"},"content":".. Prerequisites:"},{"lineNumber":1891,"author":{"gitId":"-"},"content":"* current view is the archival list"},{"lineNumber":1892,"author":{"gitId":"-"},"content":"* at least one internship application with status \"applied\""},{"lineNumber":1893,"author":{"gitId":"-"},"content":"* at least one internship application with status \"wishlist\""},{"lineNumber":1894,"author":{"gitId":"-"},"content":"* no internship applications with status \"rejected\""},{"lineNumber":1895,"author":{"gitId":"-"},"content":""},{"lineNumber":1896,"author":{"gitId":"-"},"content":"... Test case: `unarchive s/applied` +"},{"lineNumber":1897,"author":{"gitId":"-"},"content":"Expected: All internship application(s) with status \"applied\" are unarchived from the list."},{"lineNumber":1898,"author":{"gitId":"-"},"content":"Details of the unarchived internship applications shown in the feedback box."},{"lineNumber":1899,"author":{"gitId":"-"},"content":""},{"lineNumber":1900,"author":{"gitId":"-"},"content":"... Test case: `unarchive s/rejected` +"},{"lineNumber":1901,"author":{"gitId":"-"},"content":"Expected: No internship application(s) unarchived."},{"lineNumber":1902,"author":{"gitId":"-"},"content":"Feedback box will show blank list of internship applications unarchived."},{"lineNumber":1903,"author":{"gitId":"-"},"content":""},{"lineNumber":1904,"author":{"gitId":"-"},"content":"... Test case: `unarchive s/notvalidstatus` +"},{"lineNumber":1905,"author":{"gitId":"-"},"content":"Expected: No internship application unarchived."},{"lineNumber":1906,"author":{"gitId":"-"},"content":"Error details shown in feedback box."},{"lineNumber":1907,"author":{"gitId":"-"},"content":""},{"lineNumber":1908,"author":{"gitId":"-"},"content":"... Test case: `unarchive s/applied wishlist` +"},{"lineNumber":1909,"author":{"gitId":"-"},"content":"Expected: All internship applications with status \"applied\" or \"wishlist\" are unarchived from the list."},{"lineNumber":1910,"author":{"gitId":"-"},"content":"Details of the unarchived internship applications shown in the feedback box."},{"lineNumber":1911,"author":{"gitId":"-"},"content":""},{"lineNumber":1912,"author":{"gitId":"-"},"content":"... Test case: `unarchive s/applied notvalidstatus` +"},{"lineNumber":1913,"author":{"gitId":"-"},"content":"Expected: All internship applications with status \"applied\" are unarchived from the list."},{"lineNumber":1914,"author":{"gitId":"-"},"content":"Details of the unarchived internship applications shown in the feedback box."},{"lineNumber":1915,"author":{"gitId":"-"},"content":""},{"lineNumber":1916,"author":{"gitId":"-"},"content":""},{"lineNumber":1917,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Adding an Interview to an Internship Application"},{"lineNumber":1918,"author":{"gitId":"-"},"content":""},{"lineNumber":1919,"author":{"gitId":"-"},"content":". Adding an interview while an internship application is displayed."},{"lineNumber":1920,"author":{"gitId":"-"},"content":".. Prerequisites: List all internship applications using the `list`.  +"},{"lineNumber":1921,"author":{"gitId":"-"},"content":"   Select the first internship application using the `select 1` command."},{"lineNumber":1922,"author":{"gitId":"-"},"content":".. Test case: `interview 1 add o/true d/(internship application date)` +"},{"lineNumber":1923,"author":{"gitId":"-"},"content":"   As the interview relies on the date of application, use the application date in the internship application displayed. +"},{"lineNumber":1924,"author":{"gitId":"-"},"content":"   Expected: Online interview added to the internship application. Details of the interview displayed in the list inside the displayed internship application."},{"lineNumber":1925,"author":{"gitId":"-"},"content":".. Test case: `interview 1 add o/false d/(internship application date) a/123 Kent Ridge Road` +"},{"lineNumber":1926,"author":{"gitId":"-"},"content":"   Expected: Offline interview added to the internship application. Details of the interview displayed in the list inside the displayed internship application."},{"lineNumber":1927,"author":{"gitId":"-"},"content":".. Test case: `interview 1 add o/true d/(internship application date - 1 )` +"},{"lineNumber":1928,"author":{"gitId":"-"},"content":"   Expected: No interview is added. Error details shown in the result box."},{"lineNumber":1929,"author":{"gitId":"-"},"content":".. Other incorrect interview add commands to try: `interview 1 add`, `interview 0 add`, `interview 1 add o/false d/(valid date)` (offline interview must have address)."},{"lineNumber":1930,"author":{"gitId":"-"},"content":""},{"lineNumber":1931,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Editing an Interview in an Internship Application"},{"lineNumber":1932,"author":{"gitId":"-"},"content":""},{"lineNumber":1933,"author":{"gitId":"-"},"content":". Editing an interview while an internship application is displayed."},{"lineNumber":1934,"author":{"gitId":"-"},"content":".. Prerequisites: List all internship applications using the `list`.  +"},{"lineNumber":1935,"author":{"gitId":"-"},"content":"   Select the first internship application using the `select 1` command. +"},{"lineNumber":1936,"author":{"gitId":"-"},"content":"   Add an online interview to the first internship application using the `interview 1 add o/true d/(internship application date)` command. +"},{"lineNumber":1937,"author":{"gitId":"-"},"content":"   Let x be the index number of the new online interview as displayed inside the internship application displayed."},{"lineNumber":1938,"author":{"gitId":"-"},"content":".. Test case: `interview 1 edit x d/(internship application date + 1)`"},{"lineNumber":1939,"author":{"gitId":"-"},"content":"   Expected: The online interview\u0027s date has been successfully changed."},{"lineNumber":1940,"author":{"gitId":"-"},"content":".. Test case: `interview 1 edit x o/false a/123 Kent Ridge Road` +"},{"lineNumber":1941,"author":{"gitId":"-"},"content":"   Expected: The online interview has been edited into an offline interview."},{"lineNumber":1942,"author":{"gitId":"-"},"content":".. Test case: `interview 1 edit x o/false` +"},{"lineNumber":1943,"author":{"gitId":"-"},"content":"   Expected: No change to online interview. Error details shown in the result box as address field is mandatory when editing an online into an offline interview."},{"lineNumber":1944,"author":{"gitId":"-"},"content":".. Test case: `interview 1 edit 0 o/false a/123 Kent Ridge Road` +"},{"lineNumber":1945,"author":{"gitId":"-"},"content":"   Expected: No change to online interview. Error details shown in the result box as interview index is out of bounds."},{"lineNumber":1946,"author":{"gitId":"-"},"content":".. Other incorrect interview edit commands to try: `interview 1 edit`, `interview 1 edit x` (no change of interview fields will result in error)."},{"lineNumber":1947,"author":{"gitId":"-"},"content":""},{"lineNumber":1948,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Showing Statistics Window"},{"lineNumber":1949,"author":{"gitId":"-"},"content":""},{"lineNumber":1950,"author":{"gitId":"-"},"content":". Display statistics window"},{"lineNumber":1951,"author":{"gitId":"-"},"content":".. Test case: `stats`"},{"lineNumber":1952,"author":{"gitId":"-"},"content":"* Expected: A separate window will appear with graphical representation of the statistics."},{"lineNumber":1953,"author":{"gitId":"-"},"content":""},{"lineNumber":1954,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Sorting the List of Internship Applications"},{"lineNumber":1955,"author":{"gitId":"gerhean"},"content":". Sorting a list of internship applications."},{"lineNumber":1956,"author":{"gitId":"gerhean"},"content":".. Prerequisites: List all internship applications using `list`.  +"},{"lineNumber":1957,"author":{"gitId":"gerhean"},"content":"Select any internship application by clicking one."},{"lineNumber":1958,"author":{"gitId":"gerhean"},"content":"... Test case: `sort c/`"},{"lineNumber":1959,"author":{"gitId":"gerhean"},"content":"Expected: No change in displayed internship details. Internship application list sorted by company (case insensitive)."},{"lineNumber":1960,"author":{"gitId":"gerhean"},"content":"Sort order displayed in footer."},{"lineNumber":1961,"author":{"gitId":"gerhean"},"content":"... Test case: `sort reverse c/` +"},{"lineNumber":1962,"author":{"gitId":"gerhean"},"content":"Expected: No change in displayed internship details. Internship application list sorted by company in"},{"lineNumber":1963,"author":{"gitId":"gerhean"},"content":"reverse alphabetical order (case insensitive). Sort order displayed in footer."},{"lineNumber":1964,"author":{"gitId":"gerhean"},"content":"... Test case: `sort reversed c/` +"},{"lineNumber":1965,"author":{"gitId":"gerhean"},"content":"Expected: Internship application list not sorted. Error details shown in the result box as invalid command format."},{"lineNumber":1966,"author":{"gitId":"gerhean"},"content":"No change in footer display."},{"lineNumber":1967,"author":{"gitId":"gerhean"},"content":"... Test case: `sort c/ a` +"},{"lineNumber":1968,"author":{"gitId":"gerhean"},"content":"Expected: Internship application list not sorted. Error details shown in the result box as invalid command format."},{"lineNumber":1969,"author":{"gitId":"gerhean"},"content":"No change in footer display."},{"lineNumber":1970,"author":{"gitId":"gerhean"},"content":"... Test case: `sort c/ r/` +"},{"lineNumber":1971,"author":{"gitId":"gerhean"},"content":"Expected: Internship application list not sorted. Error details shown in the result box as invalid command format."},{"lineNumber":1972,"author":{"gitId":"gerhean"},"content":"No change in footer display."},{"lineNumber":1973,"author":{"gitId":"gerhean"},"content":".. Prerequisites: Use `find` command to reduce size of internship application list without deleting any internship applications. +"},{"lineNumber":1974,"author":{"gitId":"gerhean"},"content":"For example, `find r/software`"},{"lineNumber":1975,"author":{"gitId":"gerhean"},"content":"... Test case: `sort c/` +"},{"lineNumber":1976,"author":{"gitId":"gerhean"},"content":"Expected: No change to number of internship applications displayed."},{"lineNumber":1977,"author":{"gitId":"gerhean"},"content":".. Prerequisites: Ensure current internship application list has multiple internship applications with fields of the same value."},{"lineNumber":1978,"author":{"gitId":"gerhean"},"content":"For example, multiple internship applications with `role` being `software developer`"},{"lineNumber":1979,"author":{"gitId":"gerhean"},"content":"... Test case: `sort r/` +"},{"lineNumber":1980,"author":{"gitId":"gerhean"},"content":"Expected: No change in order of internship applications with identical roles (stable sort)."},{"lineNumber":1981,"author":{"gitId":"gerhean"},"content":". Sorting a list of internship applications in `archival` mode."},{"lineNumber":1982,"author":{"gitId":"gerhean"},"content":".. Repeat the above steps, but list all internship applications using `archival`."},{"lineNumber":1983,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":1984,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Getting Reminders for Internship Applications"},{"lineNumber":1985,"author":{"gitId":"-"},"content":". Getting reminders for internship applications which are due or have interviews scheduled in 7 days +"},{"lineNumber":1986,"author":{"gitId":"-"},"content":"Test case: `reminder` +"},{"lineNumber":1987,"author":{"gitId":"-"},"content":"Expected: Only applications which are due or have interviews scheduled in 7 days will be shown. They should be displayed"},{"lineNumber":1988,"author":{"gitId":"-"},"content":"in order of earliest application date or scheduled interview date followed by those with later dates."},{"lineNumber":1989,"author":{"gitId":"-"},"content":". Getting reminders for internship applications which are due or have interviews scheduled in 7 days in `archival` mode +"},{"lineNumber":1990,"author":{"gitId":"-"},"content":"Test case: `reminder` +"},{"lineNumber":1991,"author":{"gitId":"-"},"content":"Expected: No applications should be shown."},{"lineNumber":1992,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":1993,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Finding Internship Applications"},{"lineNumber":1994,"author":{"gitId":"-"},"content":""},{"lineNumber":1995,"author":{"gitId":"-"},"content":". Finding a list of internship application."},{"lineNumber":1996,"author":{"gitId":"-"},"content":".. Prerequisites: Starting from an empty list, +"},{"lineNumber":1997,"author":{"gitId":"-"},"content":"    add 3 internship applications into the list using the following commands: +"},{"lineNumber":1998,"author":{"gitId":"-"},"content":"    `add c/Google r/Software Engineer a/123 Kent Ridge Road p/98765432 e/hr@google.com d/02-12-2019 w/10 s/applied` +"},{"lineNumber":1999,"author":{"gitId":"-"},"content":"    `add c/Facebook r/Software Developer a/Singapore p/87654321 e/joinus@facebook.com d/20-04-2020 w/9 s/wishlist` +"},{"lineNumber":2000,"author":{"gitId":"-"},"content":"    `add c/Shopee r/Product Developer a/5 Science Park Dr p/99999999 e/shopee@google.com d/10-03-2020 w/1 s/rejected`"},{"lineNumber":2001,"author":{"gitId":"-"},"content":".. Test case: `find` +"},{"lineNumber":2002,"author":{"gitId":"-"},"content":"    Expected: No change in list. Error details shown in the result box as at least one of the optional parameters must be entered."},{"lineNumber":2003,"author":{"gitId":"-"},"content":".. Test case: `find google` +"},{"lineNumber":2004,"author":{"gitId":"-"},"content":"    Expected: Only the internship applications with company names `Google` and `Shopee` will be listed (google can be found in the email of Shopee)"},{"lineNumber":2005,"author":{"gitId":"-"},"content":".. Test case: `find r/software developer` +"},{"lineNumber":2006,"author":{"gitId":"-"},"content":"    Expected: All 3 internship applications are listed."},{"lineNumber":2007,"author":{"gitId":"-"},"content":".. Test case: `find 02-12-2019` +"},{"lineNumber":2008,"author":{"gitId":"-"},"content":"    Expected: No internship applications are listed as general find don\u0027t work with dates."},{"lineNumber":2009,"author":{"gitId":"-"},"content":".. Test case: `find d/02-12-2019` +"},{"lineNumber":2010,"author":{"gitId":"-"},"content":"    Expected: Only the internship applications with company names `Google` is listed as it matches the application date."},{"lineNumber":2011,"author":{"gitId":"-"},"content":".. Test case: `find w/1` +"},{"lineNumber":2012,"author":{"gitId":"-"},"content":"    Expected: Only the internship applications with company names `Shopee` will be listed (search for priority is not based on substring so `Google` is not listed)"},{"lineNumber":2013,"author":{"gitId":"-"},"content":""},{"lineNumber":2014,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Saving Data"},{"lineNumber":2015,"author":{"gitId":"-"},"content":""},{"lineNumber":2016,"author":{"gitId":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":2017,"author":{"gitId":"-"},"content":".. Internship Diary will load with an empty JSON file which will overwrite the existing corrupted data file upon the execution of"},{"lineNumber":2018,"author":{"gitId":"-"},"content":"any commands."},{"lineNumber":2019,"author":{"gitId":"-"},"content":""},{"lineNumber":2020,"author":{"gitId":"-"},"content":"[appendix]"},{"lineNumber":2021,"author":{"gitId":"-"},"content":"\u003d\u003d Effort"},{"lineNumber":2022,"author":{"gitId":"-"},"content":""},{"lineNumber":2023,"author":{"gitId":"-"},"content":"A lot of time and effort were channeled into designing and implementing a set of robust, easy-to-use, and cohesive features for our users."},{"lineNumber":2024,"author":{"gitId":"-"},"content":"To help users *organise* their internship applications, we designed and implemented `find`, `sort`, `archive` and `unarchive`. On the other hand, to help users *track*"},{"lineNumber":2025,"author":{"gitId":"-"},"content":"their internship applications, we designed and implemented `reminder`, `interview`, and `stats`."},{"lineNumber":2026,"author":{"gitId":"-"},"content":""},{"lineNumber":2027,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Challenges Faced"},{"lineNumber":2028,"author":{"gitId":"-"},"content":""},{"lineNumber":2029,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Designing Find, Sort, and Reminder"},{"lineNumber":2030,"author":{"gitId":"-"},"content":""},{"lineNumber":2031,"author":{"gitId":"-"},"content":"There was a need to plan how `find`, `sort`, and `reminder` should behave and how we can extend such commands with new behaviours easily in the future."},{"lineNumber":2032,"author":{"gitId":"-"},"content":"This required a lot of team discussion and effort in terms of coming up with drafts for our intended implementation. For `find`, we had to ensure that"},{"lineNumber":2033,"author":{"gitId":"-"},"content":"when a new field is added, or if an existing field is changed, we can simply add / edit predicate classes accordingly and make changes only in the `FindCommandParser`."},{"lineNumber":2034,"author":{"gitId":"-"},"content":"For `sort`, we had to ensure that adding or removing a sort comparator only required very minimal changes to the `SortCommandParser` (which requires only a single line in our final implementation)."},{"lineNumber":2035,"author":{"gitId":"-"},"content":"On top of that, we also had to ensure that it is easy to pass a description of the predicate and comparator used to the `PredicateDisplayFooter` and `SortDisplayFooter` respectively."},{"lineNumber":2036,"author":{"gitId":"-"},"content":"For `reminder`, there was a need to plan the conditions to decide which internship applications to show when the reminder command is used for the implementation of the corresponding predicates to use."},{"lineNumber":2037,"author":{"gitId":"-"},"content":""},{"lineNumber":2038,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Implementing Interview Classes and Commands"},{"lineNumber":2039,"author":{"gitId":"-"},"content":"The interview classes must be highly extensible as new interview types could be added in the future. Therefore, extra effort was made to ensure new interviews could be easily integrated into the current logic and model structure of interviews."},{"lineNumber":2040,"author":{"gitId":"-"},"content":""},{"lineNumber":2041,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Enabling Multiple Execution Type Functionality for Removal-Based Commands"},{"lineNumber":2042,"author":{"gitId":"-"},"content":""},{"lineNumber":2043,"author":{"gitId":"-"},"content":"We wanted to make the application as user-friendly as possible for the users. Being able to execute removal-based commands like `delete`, `archive`, and `unarchive` is therefore a good feature to include."},{"lineNumber":2044,"author":{"gitId":"-"},"content":"However, there are many ways to extend our commands to accommodate multiple execution type. The only question is: at what cost? As a team, we had to conduct multiple online team meetings during *milestone v1.4*"},{"lineNumber":2045,"author":{"gitId":"-"},"content":"to discuss about the most suitable, time-effective, and extensible implementation considering that the deadline is around the corner."},{"lineNumber":2046,"author":{"gitId":"-"},"content":""},{"lineNumber":2047,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Modifying GUI"},{"lineNumber":2048,"author":{"gitId":"-"},"content":"The GUI must be made easily readable and understandable by the user. Research and effort was made to ensure a well organised and consistent application layout."},{"lineNumber":2049,"author":{"gitId":"-"},"content":""},{"lineNumber":2050,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Integrating the Implemented Features"},{"lineNumber":2051,"author":{"gitId":"-"},"content":"Due to the cohesive nature of our features, it resulted in extensive interaction between the components -- ensuring a smooth integration was therefore a significant challenge."},{"lineNumber":2052,"author":{"gitId":"-"},"content":"For example, as our features introduced many new UI elements and backend implementation, we ran into UI / data reactivity issue where ObservableList was no longer an adequate and sustainable solution."},{"lineNumber":2053,"author":{"gitId":"-"},"content":""},{"lineNumber":2054,"author":{"gitId":"-"},"content":"We needed a more robust solution to help us keep the UI in sync with the state of our data. This required the team to look into how we can implement the observer pattern design into our system and the best options we have"},{"lineNumber":2055,"author":{"gitId":"-"},"content":"to implement the structure. There were various constraints that we had to be mindful of as we incorporated the observer pattern, mainly due to the way we implemented certain features (as reactivity issue was something we did"},{"lineNumber":2056,"author":{"gitId":"-"},"content":"not foresee). As this was our first time dealing with the observer pattern, we had to spend a good amount of time to research, understand, and implement it properly."}],"authorContributionMap":{"gerhean":239,"-":1817}},{"path":"docs/UserGuide.adoc","fileType":"adoc","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003d Internship Diary - User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":":site-section: UserGuide"},{"lineNumber":3,"author":{"gitId":"-"},"content":":toc:"},{"lineNumber":4,"author":{"gitId":"-"},"content":":toclevels: 5"},{"lineNumber":5,"author":{"gitId":"-"},"content":":toc-title:"},{"lineNumber":6,"author":{"gitId":"-"},"content":":toc-placement: preamble"},{"lineNumber":7,"author":{"gitId":"-"},"content":":sectnums:"},{"lineNumber":8,"author":{"gitId":"-"},"content":":sectnumlevels: 5"},{"lineNumber":9,"author":{"gitId":"-"},"content":":imagesDir: images"},{"lineNumber":10,"author":{"gitId":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":11,"author":{"gitId":"-"},"content":":xrefstyle: full"},{"lineNumber":12,"author":{"gitId":"-"},"content":":experimental:"},{"lineNumber":13,"author":{"gitId":"-"},"content":"ifdef::env-github[]"},{"lineNumber":14,"author":{"gitId":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":15,"author":{"gitId":"-"},"content":":note-caption: :information_source:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"endif::[]"},{"lineNumber":17,"author":{"gitId":"-"},"content":":repoURL: https://github.com/AY1920S2-CS2103T-F10-2/main"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"By: `CS2103T-F10-2`      Since: `Feb 2020`      Licence: `MIT`"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"Internship Diary is a desktop application that assists university students in managing their internship applications."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"With the Internship Diary, you can leave behind your troubling times trying to to organize, track, and review all your past and upcoming internship applications."},{"lineNumber":26,"author":{"gitId":"-"},"content":"The application is designed and optimized for users who can type quickly, and provides an elegant design which is easy on the eyes."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"Here are the steps to get you started on using Internship Diary:"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":". Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":33,"author":{"gitId":"-"},"content":". Download the latest `internshipdiary.jar` link:{repoURL}/releases[here]."},{"lineNumber":34,"author":{"gitId":"-"},"content":". Copy the file to the folder you want to use as the home folder for your Internship Diary."},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":". Double-click the file to start the app."},{"lineNumber":36,"author":{"gitId":"-"},"content":"The Graphical User Interface (GUI) should appear in a few seconds."},{"lineNumber":37,"author":{"gitId":"-"},"content":"+"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":".Graphical User Interface of Internship Diary"},{"lineNumber":40,"author":{"gitId":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"+"},{"lineNumber":43,"author":{"gitId":"-"},"content":". Test the application by typing the command *`help`* in the command box and pressing kbd:[Enter] to execute it. This should open the help window. +"},{"lineNumber":44,"author":{"gitId":"-"},"content":"+"},{"lineNumber":45,"author":{"gitId":"-"},"content":".Help window that appears when `help` is executed"},{"lineNumber":46,"author":{"gitId":"-"},"content":"image::help_window.png[width\u003d\"790\"]"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"+"},{"lineNumber":49,"author":{"gitId":"-"},"content":". Refer to \u003c\u003cCommands\u003e\u003e to find out what other commands you can use on Internship Diary."},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"\u003d\u003d Key Information"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"Here are some important information you should know."},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Graphical user interface"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":".Major graphical components of Internship Diary"},{"lineNumber":58,"author":{"gitId":"-"},"content":"image::internship_diary_label.png[align\u003d\"center\", width\u003d\"790\"]"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"The above image illustrates the major graphical components of *Internship Diary* to help you navigate our application."},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"[[fields]]"},{"lineNumber":63,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Structure of internship application"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":"[%header,cols\u003d\"1a, 1, 1, 1, 6\"]"},{"lineNumber":66,"author":{"gitId":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":67,"author":{"gitId":"-"},"content":"|*Field* | *Prefix* | Can Be Empty? | Max Number of Values | Remarks"},{"lineNumber":68,"author":{"gitId":"-"},"content":"| Company | c/ | No | 1 | No restrictions on input."},{"lineNumber":69,"author":{"gitId":"-"},"content":"| Role | r/ | No | 1 | No restrictions on input."},{"lineNumber":70,"author":{"gitId":"-"},"content":"| Address | a/ | Yes | 1 | No restrictions on input."},{"lineNumber":71,"author":{"gitId":"-"},"content":"| Phone | p/ | Yes | 1 | \"+\" at the start is optional. Must have between 4 and 15 digits if not empty."},{"lineNumber":72,"author":{"gitId":"gerhean"},"content":"| Email | e/ | Yes | 1 | Email should be of format \"LOCAL@DOMAIN\". LOCAL consists of at least 1 character."},{"lineNumber":73,"author":{"gitId":"gerhean"},"content":"DOMAIN starts and ends with alphanumeric characters, and consists of alphanumeric characters, periods or hyphens for the characters in between."},{"lineNumber":74,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":75,"author":{"gitId":"gerhean"},"content":"E.g. example@example.com"},{"lineNumber":76,"author":{"gitId":"gerhean"},"content":"| Application Date | d/ | Yes | 1 | Must be a valid date of the form `day-month-year`. Whitespace and `/` are also supported"},{"lineNumber":77,"author":{"gitId":"-"},"content":"separators. If year is not given, will default to the current year."},{"lineNumber":78,"author":{"gitId":"gerhean"},"content":"| Priority | w/ | No | 1 | Must be an integer from 0 to 10 (inclusive). If left empty, default to 5."},{"lineNumber":79,"author":{"gitId":"-"},"content":"| Status | s/ | No | 1 | Possible values listed in \u003c\u003cValid status\u003e\u003e. The first letter of the Status can be"},{"lineNumber":80,"author":{"gitId":"-"},"content":"used to input the respective Status values."},{"lineNumber":81,"author":{"gitId":"-"},"content":"| Interviews | Not applicable | Yes | No limits | See below, \u003c\u003cinterview\u003e\u003e"},{"lineNumber":82,"author":{"gitId":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"//image::internshipDetailsExample.png[width\u003d\"790\"]"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Valid status"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"The following are the valid statuses for internship application, listed in sort order:"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"gerhean"},"content":"[cols\u003d\"1, 2, 14\"]"},{"lineNumber":91,"author":{"gitId":"gerhean"},"content":"|\u003d\u003d\u003d"},{"lineNumber":92,"author":{"gitId":"gerhean"},"content":"|1. |`wishlist` | An internship application that you are planning to apply for."},{"lineNumber":93,"author":{"gitId":"gerhean"},"content":"|2. |`applied` | An internship application that you have already applied for."},{"lineNumber":94,"author":{"gitId":"gerhean"},"content":"|3. |`interview` | An internship application that you have applied to, and have been invited to an interview."},{"lineNumber":95,"author":{"gitId":"gerhean"},"content":"|4. |`offered` | An internship application that you have received a job offer for."},{"lineNumber":96,"author":{"gitId":"gerhean"},"content":"|5. |`rejected` | An internship application that you have been rejected for."},{"lineNumber":97,"author":{"gitId":"gerhean"},"content":"|6. |`ghosted` | An internship application that you have heard no reply from for a long time."},{"lineNumber":98,"author":{"gitId":"gerhean"},"content":"|\u003d\u003d\u003d"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"// tag::interviewStructure[]"},{"lineNumber":101,"author":{"gitId":"-"},"content":"[[interview]]"},{"lineNumber":102,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Structure of interview"},{"lineNumber":103,"author":{"gitId":"-"},"content":"* `Interview` represents an interview that you have been given by the company you are applying to."},{"lineNumber":104,"author":{"gitId":"-"},"content":"It exists within an `InternshipApplication`"},{"lineNumber":105,"author":{"gitId":"-"},"content":"* Currently there are two types of `Interview` provided by the Internship Diary:"},{"lineNumber":106,"author":{"gitId":"-"},"content":"** Online Interview -- No address is needed."},{"lineNumber":107,"author":{"gitId":"-"},"content":"** Offline Interview -- Address must be provided when interview is added or modified from online to offline."},{"lineNumber":108,"author":{"gitId":"-"},"content":"* You can specify what type of interview you want to add by using the `o/IS_ONLINE` prefix."},{"lineNumber":109,"author":{"gitId":"-"},"content":"* In order to facilitate your tracking of interviews, there are no restriction to what `InternshipApplication`"},{"lineNumber":110,"author":{"gitId":"-"},"content":"you can add your interview to. +"},{"lineNumber":111,"author":{"gitId":"-"},"content":"Therefore, it is possible for you to add an interview to an `InternshipApplication` with any status."},{"lineNumber":112,"author":{"gitId":"-"},"content":"** This is so that just in case you forgot to record an interview after you already got offered or rejected,"},{"lineNumber":113,"author":{"gitId":"-"},"content":"you could still add it into the Internship Diary for your personal tracking."},{"lineNumber":114,"author":{"gitId":"-"},"content":"** In v2.0, we will create a prompt on whether you want to automatically change your `InternshipApplication` status"},{"lineNumber":115,"author":{"gitId":"-"},"content":"to \u0027interview\u0027."},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"[%header,cols\u003d\"1a, 1, 1, 1, 5\"]"},{"lineNumber":118,"author":{"gitId":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":119,"author":{"gitId":"-"},"content":"|*Field* | *Prefix* | Can Be Empty? | Max Number of Values | Remarks"},{"lineNumber":120,"author":{"gitId":"-"},"content":"| isOnline | o/ | No | 1 | Can only be `true` or `false`"},{"lineNumber":121,"author":{"gitId":"-"},"content":"| Interview Date | d/ | No | 1 | Must be a valid date of the form `day-month-year`. Whitespace and `/` are also supported"},{"lineNumber":122,"author":{"gitId":"-"},"content":"separators. If year is not given, will default to the current year."},{"lineNumber":123,"author":{"gitId":"-"},"content":"| Interview Address | a/ | online: yes offline: no | 1 | No restrictions on input."},{"lineNumber":124,"author":{"gitId":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":125,"author":{"gitId":"-"},"content":"// end::interviewStructure[]"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Command format"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user. +"},{"lineNumber":130,"author":{"gitId":"-"},"content":"(e.g. in `add n/COMPANY_NAME`, `COMPANY_NAME` is a parameter which can be used as `add c/Google`)"},{"lineNumber":131,"author":{"gitId":"-"},"content":"* Items in square brackets are optional. +"},{"lineNumber":132,"author":{"gitId":"-"},"content":"(e.g `c/COMPANY_NAME [w/PRIORITY]` can be used as `c/Google w/5` or as `c/Google`)"},{"lineNumber":133,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times. +"},{"lineNumber":134,"author":{"gitId":"-"},"content":"(e.g. `delete INDEX, [INDEX],...` can be used as `delete 1` or `delete 1, 2, 3`)"},{"lineNumber":135,"author":{"gitId":"-"},"content":"* Parameters can be entered in any order. +"},{"lineNumber":136,"author":{"gitId":"-"},"content":"(e.g. if the command specifies `s/STATUS r/ROLE`, `r/designer s/applied` is also acceptable)"},{"lineNumber":137,"author":{"gitId":"-"},"content":"* An input consisting of only spaces is considered empty."},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Viewing command history"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"Use the `up` and `down` arrow keys while the command box is being focused to scroll through your command history."},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Other important information"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Index of an internship application"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"* We will use `INDEX` to refer to a particular internship application."},{"lineNumber":148,"author":{"gitId":"-"},"content":"** `INDEX` can be found on the left side of an internship application card."},{"lineNumber":149,"author":{"gitId":"-"},"content":"** `INDEX` will start from **1** (inclusive)."},{"lineNumber":150,"author":{"gitId":"-"},"content":"** `INDEX` is not unique to a particular internship application -- it will change as the list is updated."},{"lineNumber":151,"author":{"gitId":"-"},"content":"** `INDEX` only serves as a reference for you to choose the correct internship application."},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":".Example of an internship application card seen on the Internship Application List"},{"lineNumber":154,"author":{"gitId":"-"},"content":"image::sample_index.png[align\u003d\"center\", width\u003d\"600\"]"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"* For any command that uses `INDEX`:"},{"lineNumber":157,"author":{"gitId":"-"},"content":"** `INDEX` must be among those displayed in the current list."},{"lineNumber":158,"author":{"gitId":"-"},"content":"*** For example, if the current list displays `INDEX` *1 to 10*, `INDEX` 11 will not be considered valid."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Multiple fields"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"* Commands that contain fields (see: \u003c\u003cfields\u003e\u003e) will be able to take in multiple"},{"lineNumber":163,"author":{"gitId":"-"},"content":"entry of each field (except `sort` which only allows one field)."},{"lineNumber":164,"author":{"gitId":"-"},"content":"* However, when multiple fields are inputted, eg. `c/Google c/Facebook`, only the last field will be recognised"},{"lineNumber":165,"author":{"gitId":"-"},"content":"by the application. In the example above, only `c/Facebook` will be registered, `c/Google`"},{"lineNumber":166,"author":{"gitId":"-"},"content":"will be ignored by the application."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Command availability"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"* Commands will work on both *main list* and *archival list*."},{"lineNumber":171,"author":{"gitId":"-"},"content":"** The exceptions are: `Archive`, `Unarchive`, `Reminder`"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Colored internship applications"},{"lineNumber":174,"author":{"gitId":"-"},"content":"* Some internship applications in the list may be colored green or red. This is what each color means:"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"** Internship applications colored green indicates that there is an upcoming application deadline or interviews for that internship application."},{"lineNumber":177,"author":{"gitId":"-"},"content":"** Internship applications colored red indicates that the internship application\u0027s status is `ghosted` and you might want to take action to keep the list relevant."},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":".Example of colored internship applications"},{"lineNumber":180,"author":{"gitId":"-"},"content":"image::ColoredCards.png[align\u003d\"center\", width\u003d\"600\"]"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"[[Commands]]"},{"lineNumber":183,"author":{"gitId":"-"},"content":"\u003d\u003d Commands"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Viewing offline user guide: `help`"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"Format: `help`"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"// tag::list[]"},{"lineNumber":190,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Viewing unarchived internship applications: `list`"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"Displays *unarchived* internship applications. This is known as your *main list*."},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"Format: `list`"},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":".Display of main list"},{"lineNumber":197,"author":{"gitId":"-"},"content":"image::main_list.png[align\u003d\"center\", width\u003d\"800\"]"},{"lineNumber":198,"author":{"gitId":"-"},"content":"// end::list[]"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"// tag::archival[]"},{"lineNumber":201,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Viewing archived internship applications: `archival`"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"Displays *archived* internship applications. This is known as your *archival list*."},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"Format: `archival`"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":".Display of archival list"},{"lineNumber":208,"author":{"gitId":"-"},"content":"image::archival_list.png[align\u003d\"center\", width\u003d\"800\"]"},{"lineNumber":209,"author":{"gitId":"-"},"content":"// end::archival[]"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"// tag::select[]"},{"lineNumber":212,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Selecting an internship application to display: `select`"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"Selects an internship application to display on the right panel of the internship diary."},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"Only one internship application may be selected at any point in time."},{"lineNumber":217,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"[TIP]"},{"lineNumber":219,"author":{"gitId":"-"},"content":"Alternatively, you may use your mouse to click on a specific internship application on the left panel of the internship diary."},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"Format: `select INDEX`"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"Example(s):"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"* `select 1`"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"//end::select[]"},{"lineNumber":228,"author":{"gitId":"-"},"content":".Display of internship application details when selected"},{"lineNumber":229,"author":{"gitId":"-"},"content":"image::select_internship.png[align\u003d\"center\", width\u003d\"790\"]"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Adding an internship application: `add`"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"Adds an internship application to the current list."},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"Format: `add c/COMPANY r/ROLE d/DATE s/STATUS [p/PHONE] [e/EMAIL] [a/ADDRESS] [w/PRIORITY]`"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"gerhean"},"content":"Refer to \u003c\u003cStructure of internship application\u003e\u003e for details about the input constraints."},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"* `add c/Microsoft r/software engineer d/01 01 2020 s/rejected`"},{"lineNumber":242,"author":{"gitId":"-"},"content":"* `add c/Google r/Software Engineer d/20 02 2020 s/applied p/91234567 e/google@google.com a/123 Orchard Road`"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"// tag::delete[]"},{"lineNumber":245,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Deleting internship application: `delete`"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":"Deletes internship application from the current list. +"},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":"Formats:"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":"* `delete INDEX`"},{"lineNumber":252,"author":{"gitId":"-"},"content":"* `delete INDEX, [INDEX],...`"},{"lineNumber":253,"author":{"gitId":"-"},"content":"* `delete s/STATUS [STATUS]...`"},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":"****"},{"lineNumber":256,"author":{"gitId":"-"},"content":"* Deleting by `INDEX`:"},{"lineNumber":257,"author":{"gitId":"-"},"content":"** Deletes the internship application at `INDEX`."},{"lineNumber":258,"author":{"gitId":"-"},"content":"** `INDEX` may be entered in any order."},{"lineNumber":259,"author":{"gitId":"-"},"content":"*** e.g. `delete 3, 1, 2`."},{"lineNumber":260,"author":{"gitId":"-"},"content":"** Duplicated `INDEX` will be ignored."},{"lineNumber":261,"author":{"gitId":"-"},"content":"*** e.g. `delete 1, 2, 2` has the same effect as `delete 1, 2`."},{"lineNumber":262,"author":{"gitId":"-"},"content":"* Deleting by `STATUS`:"},{"lineNumber":263,"author":{"gitId":"-"},"content":"** There must be at least one valid `STATUS`."},{"lineNumber":264,"author":{"gitId":"-"},"content":"** The command will execute as long as there is a valid `STATUS` -- it will ignore other invalid inputs. If there is no internship application with the"},{"lineNumber":265,"author":{"gitId":"-"},"content":"specified `STATUS`, then the feedback box will not display any internship application information (as there is no internship application to act upon)."},{"lineNumber":266,"author":{"gitId":"-"},"content":"*** e.g. the command will delete internship application(s) with status `rejected` for `delete s/ somethinginvalid rejected`."},{"lineNumber":267,"author":{"gitId":"-"},"content":"*** e.g. the command will delete internship application(s) with status `applied` or `wishlist` for `delete s/applied somethinginvalid wishlist`."},{"lineNumber":268,"author":{"gitId":"-"},"content":"****"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":"Example(s):"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"-"},"content":"* `list` +"},{"lineNumber":273,"author":{"gitId":"-"},"content":"`delete 2` +"},{"lineNumber":274,"author":{"gitId":"-"},"content":"Deletes the 2nd internship application from the main list."},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":"* `list` +"},{"lineNumber":277,"author":{"gitId":"-"},"content":"`delete 1, 2, 3` +"},{"lineNumber":278,"author":{"gitId":"-"},"content":"Deletes the 1st, 2nd, and 3rd internship applications from the main list."},{"lineNumber":279,"author":{"gitId":"-"},"content":""},{"lineNumber":280,"author":{"gitId":"-"},"content":"* `archival` +"},{"lineNumber":281,"author":{"gitId":"-"},"content":"`delete s/applied` +"},{"lineNumber":282,"author":{"gitId":"-"},"content":"Deletes all the internship application(s) with the `applied` status from the archival list."},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":"* `archival` +"},{"lineNumber":285,"author":{"gitId":"-"},"content":"`delete s/applied rejected` +"},{"lineNumber":286,"author":{"gitId":"-"},"content":"Deletes all the internship application(s) with the `applied` or `rejected` status from the archival list."},{"lineNumber":287,"author":{"gitId":"-"},"content":"// end::delete[]"},{"lineNumber":288,"author":{"gitId":"-"},"content":""},{"lineNumber":289,"author":{"gitId":"-"},"content":"// tag::archive[]"},{"lineNumber":290,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Archiving internship application: `archive`"},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"-"},"content":"Moves internship application from the *main list* to the *archival list*. +"},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":"Formats:"},{"lineNumber":295,"author":{"gitId":"-"},"content":""},{"lineNumber":296,"author":{"gitId":"-"},"content":"* `archive INDEX`"},{"lineNumber":297,"author":{"gitId":"-"},"content":"* `archive INDEX, [INDEX],...`"},{"lineNumber":298,"author":{"gitId":"-"},"content":"* `archive s/STATUS [STATUS]...`"},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"-"},"content":"****"},{"lineNumber":301,"author":{"gitId":"-"},"content":"* Archiving by `INDEX`:"},{"lineNumber":302,"author":{"gitId":"-"},"content":"** Archives the internship application at `INDEX`."},{"lineNumber":303,"author":{"gitId":"-"},"content":"** `INDEX` may be entered in any order."},{"lineNumber":304,"author":{"gitId":"-"},"content":"*** e.g. `archive 3, 1, 2`."},{"lineNumber":305,"author":{"gitId":"-"},"content":"** Duplicated `INDEX` will be ignored."},{"lineNumber":306,"author":{"gitId":"-"},"content":"*** e.g. `archive 1, 2, 2` has the same effect as `archive 1, 2`."},{"lineNumber":307,"author":{"gitId":"-"},"content":"* Archiving by `STATUS`:"},{"lineNumber":308,"author":{"gitId":"-"},"content":"** There must be at least one valid `STATUS`."},{"lineNumber":309,"author":{"gitId":"-"},"content":"** The command will execute as long as there is a valid `STATUS` -- it will ignore other invalid inputs. If there is no internship application with the"},{"lineNumber":310,"author":{"gitId":"-"},"content":"specified `STATUS`, then the feedback box will not display any internship application information (as there is no internship application to act upon)."},{"lineNumber":311,"author":{"gitId":"-"},"content":"*** e.g. the command will archive internship application(s) with status `rejected` for `archive s/ somethinginvalid rejected`."},{"lineNumber":312,"author":{"gitId":"-"},"content":"*** e.g. the command will archive internship application(s) with status `applied` or `wishlist` for `archive s/applied somethinginvalid wishlist`."},{"lineNumber":313,"author":{"gitId":"-"},"content":"****"},{"lineNumber":314,"author":{"gitId":"-"},"content":""},{"lineNumber":315,"author":{"gitId":"-"},"content":"Example(s):"},{"lineNumber":316,"author":{"gitId":"-"},"content":""},{"lineNumber":317,"author":{"gitId":"-"},"content":"* `list` +"},{"lineNumber":318,"author":{"gitId":"-"},"content":"`archive 2` +"},{"lineNumber":319,"author":{"gitId":"-"},"content":"Archives the 2nd internship application in the main list."},{"lineNumber":320,"author":{"gitId":"-"},"content":""},{"lineNumber":321,"author":{"gitId":"-"},"content":"* `list` +"},{"lineNumber":322,"author":{"gitId":"-"},"content":"`archive 1, 2, 3` +"},{"lineNumber":323,"author":{"gitId":"-"},"content":"Archives the 1st, 2nd, and 3rd internship application in the main list."},{"lineNumber":324,"author":{"gitId":"-"},"content":""},{"lineNumber":325,"author":{"gitId":"-"},"content":"* `list` +"},{"lineNumber":326,"author":{"gitId":"-"},"content":"`archive s/applied` +"},{"lineNumber":327,"author":{"gitId":"-"},"content":"Archives all the internship application(s) with the `applied` status in the main list."},{"lineNumber":328,"author":{"gitId":"-"},"content":""},{"lineNumber":329,"author":{"gitId":"-"},"content":"* `list` +"},{"lineNumber":330,"author":{"gitId":"-"},"content":"`archive s/applied rejected` +"},{"lineNumber":331,"author":{"gitId":"-"},"content":"Archives all the internship application(s) with the `applied` or `rejected` status in the main list."},{"lineNumber":332,"author":{"gitId":"-"},"content":"// end::archive[]"},{"lineNumber":333,"author":{"gitId":"-"},"content":""},{"lineNumber":334,"author":{"gitId":"-"},"content":"// tag::unarchive[]"},{"lineNumber":335,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Unarchiving internship application: `unarchive`"},{"lineNumber":336,"author":{"gitId":"-"},"content":""},{"lineNumber":337,"author":{"gitId":"-"},"content":"Moves internship application from the *archival list* to the *main list*. +"},{"lineNumber":338,"author":{"gitId":"-"},"content":""},{"lineNumber":339,"author":{"gitId":"-"},"content":"Formats:"},{"lineNumber":340,"author":{"gitId":"-"},"content":""},{"lineNumber":341,"author":{"gitId":"-"},"content":"* `unarchive INDEX`"},{"lineNumber":342,"author":{"gitId":"-"},"content":"* `unarchive INDEX, [INDEX],...`"},{"lineNumber":343,"author":{"gitId":"-"},"content":"* `unarchive s/STATUS [STATUS]...`"},{"lineNumber":344,"author":{"gitId":"-"},"content":""},{"lineNumber":345,"author":{"gitId":"-"},"content":"****"},{"lineNumber":346,"author":{"gitId":"-"},"content":"* Unarchiving by `INDEX`:"},{"lineNumber":347,"author":{"gitId":"-"},"content":"** Unarchives the internship application at `INDEX`."},{"lineNumber":348,"author":{"gitId":"-"},"content":"** `INDEX` may be entered in any order."},{"lineNumber":349,"author":{"gitId":"-"},"content":"*** e.g. `unarchive 3, 1, 2`."},{"lineNumber":350,"author":{"gitId":"-"},"content":"** Duplicated `INDEX` will be ignored."},{"lineNumber":351,"author":{"gitId":"-"},"content":"*** e.g. `unarchive 1, 2, 2` has the same effect as `unarchive 1, 2`."},{"lineNumber":352,"author":{"gitId":"-"},"content":"* Unarchiving by `STATUS`:"},{"lineNumber":353,"author":{"gitId":"-"},"content":"** There must be at least one valid `STATUS`."},{"lineNumber":354,"author":{"gitId":"-"},"content":"** The command will execute as long as there is a valid `STATUS` -- it will ignore other invalid inputs. If there is no internship application with the"},{"lineNumber":355,"author":{"gitId":"-"},"content":"specified `STATUS`, then the feedback box will not display any internship application information (as there is no internship application to act upon)."},{"lineNumber":356,"author":{"gitId":"-"},"content":"*** e.g. the command will unarchive internship application(s) with status `rejected` for `unarchive s/ somethinginvalid rejected`."},{"lineNumber":357,"author":{"gitId":"-"},"content":"*** e.g. the command will unarchive internship application(s) with status `applied` or `wishlist` for `unarchive s/applied somethinginvalid wishlist`."},{"lineNumber":358,"author":{"gitId":"-"},"content":"****"},{"lineNumber":359,"author":{"gitId":"-"},"content":""},{"lineNumber":360,"author":{"gitId":"-"},"content":"Example(s):"},{"lineNumber":361,"author":{"gitId":"-"},"content":""},{"lineNumber":362,"author":{"gitId":"-"},"content":"* `archival` +"},{"lineNumber":363,"author":{"gitId":"-"},"content":"`unarchive 2` +"},{"lineNumber":364,"author":{"gitId":"-"},"content":"Unarchives the 2nd internship application in the archival list."},{"lineNumber":365,"author":{"gitId":"-"},"content":""},{"lineNumber":366,"author":{"gitId":"-"},"content":"* `archival` +"},{"lineNumber":367,"author":{"gitId":"-"},"content":"`unarchive 1, 2, 3` +"},{"lineNumber":368,"author":{"gitId":"-"},"content":"Unarchives the 1st, 2nd, and 3rd internship application in the archival list."},{"lineNumber":369,"author":{"gitId":"-"},"content":""},{"lineNumber":370,"author":{"gitId":"-"},"content":"* `archival` +"},{"lineNumber":371,"author":{"gitId":"-"},"content":"`unarchive s/applied` +"},{"lineNumber":372,"author":{"gitId":"-"},"content":"Unarchives all the internship application(s) with the `applied` status in the archival list."},{"lineNumber":373,"author":{"gitId":"-"},"content":""},{"lineNumber":374,"author":{"gitId":"-"},"content":"* `archival` +"},{"lineNumber":375,"author":{"gitId":"-"},"content":"`unarchive s/applied rejected` +"},{"lineNumber":376,"author":{"gitId":"-"},"content":"Unarchives all the internship application(s) with the `applied` or `rejected` status in the archival list."},{"lineNumber":377,"author":{"gitId":"-"},"content":"// end::unarchive[]"},{"lineNumber":378,"author":{"gitId":"-"},"content":""},{"lineNumber":379,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Editing an internship application: `edit`"},{"lineNumber":380,"author":{"gitId":"-"},"content":""},{"lineNumber":381,"author":{"gitId":"-"},"content":"Edits an internship application in the internship diary. +"},{"lineNumber":382,"author":{"gitId":"-"},"content":"Format: `edit INDEX [c/COMPANY] [r/ROLE] [d/DATE] [s/STATUS] [p/PHONE] [e/EMAIL] [a/ADDRESS] [w/PRIORITY]​`"},{"lineNumber":383,"author":{"gitId":"-"},"content":""},{"lineNumber":384,"author":{"gitId":"-"},"content":"****"},{"lineNumber":385,"author":{"gitId":"gerhean"},"content":"* Edits the internship application at the specified `INDEX`."},{"lineNumber":386,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":387,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":388,"author":{"gitId":"-"},"content":"****"},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":391,"author":{"gitId":"-"},"content":""},{"lineNumber":392,"author":{"gitId":"-"},"content":"* `edit 1 s/applied r/Product Management` +"},{"lineNumber":393,"author":{"gitId":"-"},"content":"Edits the status and role of the internship application to be `applied` and `Product Management` respectively."},{"lineNumber":394,"author":{"gitId":"-"},"content":""},{"lineNumber":395,"author":{"gitId":"-"},"content":"// tag::find[]"},{"lineNumber":396,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Locating internship applications: `find`"},{"lineNumber":397,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":398,"author":{"gitId":"-"},"content":"Finds all internship application(s) with the specified fields containing any of the given keywords."},{"lineNumber":399,"author":{"gitId":"-"},"content":""},{"lineNumber":400,"author":{"gitId":"-"},"content":"[TIP]"},{"lineNumber":401,"author":{"gitId":"-"},"content":"The find parameters will appear at the bottom left of the internship diary"},{"lineNumber":402,"author":{"gitId":"-"},"content":""},{"lineNumber":403,"author":{"gitId":"-"},"content":"Format: `find [KEYWORDS] [c/COMPANY] [r/ROLE] [a/ADDRESS] [p/PHONE] [e/EMAIL] [d/DATE] [w/PRIORITY] [s/STATUS]`"},{"lineNumber":404,"author":{"gitId":"-"},"content":""},{"lineNumber":405,"author":{"gitId":"-"},"content":"****"},{"lineNumber":406,"author":{"gitId":"-"},"content":"* At least one of the optional parameter must be provided."},{"lineNumber":407,"author":{"gitId":"-"},"content":"* If `[KEYWORDS]` is provided, find will look for matches in any field except for application date based on `KEYWORDS` (i.e. `OR` search), regardless of whether other fields are specified."},{"lineNumber":408,"author":{"gitId":"-"},"content":"* When fields are specified without `[KEYWORDS]`, only applications where all the specified fields match are returned (i.e. `AND` search)."},{"lineNumber":409,"author":{"gitId":"-"},"content":"e.g. `find c/google r/software engineer` will return application with company being `Google` and role"},{"lineNumber":410,"author":{"gitId":"-"},"content":"being `Software Engineer` but not company that is `Facebook` and role being `Software Engineer`."},{"lineNumber":411,"author":{"gitId":"-"},"content":"* The search is case insensitive. e.g `google` will match `Google`."},{"lineNumber":412,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `AI Singapore` will match `Singapore AI`."},{"lineNumber":413,"author":{"gitId":"-"},"content":"* Companies matching at least one keyword will be returned (i.e. `OR` search). e.g. `AI Singapore` will return `AISingapore`, `AI Malaysia`."},{"lineNumber":414,"author":{"gitId":"-"},"content":"* Partial words will be matched e.g. `find a/Singapore` will match internship application with address field named `Singapores`."},{"lineNumber":415,"author":{"gitId":"-"},"content":"* Consecutive find command calls will not stack on the resulting list from the preceding find command. It is always performed on either the main list or archival list (shown on the bottom left of the program window)."},{"lineNumber":416,"author":{"gitId":"-"},"content":"****"},{"lineNumber":417,"author":{"gitId":"-"},"content":""},{"lineNumber":418,"author":{"gitId":"-"},"content":"Example(s):"},{"lineNumber":419,"author":{"gitId":"-"},"content":""},{"lineNumber":420,"author":{"gitId":"-"},"content":"* `find Google` +"},{"lineNumber":421,"author":{"gitId":"-"},"content":"Lists internship application(s) with company `Google` OR with email `alice@google.com`."},{"lineNumber":422,"author":{"gitId":"-"},"content":""},{"lineNumber":423,"author":{"gitId":"-"},"content":"[cols\u003d\"2\", frame\u003d\"none\", grid\u003d\"none\"]"},{"lineNumber":424,"author":{"gitId":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":425,"author":{"gitId":"-"},"content":"a|"},{"lineNumber":426,"author":{"gitId":"-"},"content":".Before executing `find Google`."},{"lineNumber":427,"author":{"gitId":"-"},"content":"image::BeforeFind1.png[]"},{"lineNumber":428,"author":{"gitId":"-"},"content":"a|"},{"lineNumber":429,"author":{"gitId":"-"},"content":".After executing `find Google`."},{"lineNumber":430,"author":{"gitId":"-"},"content":"image::AfterFind1.png[]"},{"lineNumber":431,"author":{"gitId":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":432,"author":{"gitId":"-"},"content":""},{"lineNumber":433,"author":{"gitId":"-"},"content":"* `find c/Google s/applied` +"},{"lineNumber":434,"author":{"gitId":"-"},"content":"Lists internship application(s) with company `Google` AND status `applied`."},{"lineNumber":435,"author":{"gitId":"-"},"content":""},{"lineNumber":436,"author":{"gitId":"-"},"content":"[cols\u003d\"2\", frame\u003d\"none\", grid\u003d\"none\"]"},{"lineNumber":437,"author":{"gitId":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":438,"author":{"gitId":"-"},"content":"a|"},{"lineNumber":439,"author":{"gitId":"-"},"content":".Before executing `find c/Google s/applied`."},{"lineNumber":440,"author":{"gitId":"-"},"content":"image::BeforeFind2.png[]"},{"lineNumber":441,"author":{"gitId":"-"},"content":"a|"},{"lineNumber":442,"author":{"gitId":"-"},"content":".After executing `find c/Google s/applied`."},{"lineNumber":443,"author":{"gitId":"-"},"content":"image::AfterFind2.png[]"},{"lineNumber":444,"author":{"gitId":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":445,"author":{"gitId":"-"},"content":""},{"lineNumber":446,"author":{"gitId":"-"},"content":"// end::find[]"},{"lineNumber":447,"author":{"gitId":"-"},"content":""},{"lineNumber":448,"author":{"gitId":"gerhean"},"content":"// tag::sort[]"},{"lineNumber":449,"author":{"gitId":"gerhean"},"content":"\u003d\u003d\u003d Sorting internship companies by field: `sort`"},{"lineNumber":450,"author":{"gitId":"-"},"content":""},{"lineNumber":451,"author":{"gitId":"gerhean"},"content":"Sort displayed internship companies based on a given FIELD."},{"lineNumber":452,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":453,"author":{"gitId":"-"},"content":"[TIP]"},{"lineNumber":454,"author":{"gitId":"-"},"content":"The sort parameters will appear at the bottom left of the internship diary"},{"lineNumber":455,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":456,"author":{"gitId":"gerhean"},"content":"Type `reverse` before `FIELD` to sort in the reverse order."},{"lineNumber":457,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":458,"author":{"gitId":"gerhean"},"content":"Format: `sort [reverse] FIELD`."},{"lineNumber":459,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":460,"author":{"gitId":"gerhean"},"content":"Available values for `FIELD`: +"},{"lineNumber":461,"author":{"gitId":"gerhean"},"content":"`c/`: Sorts by company name (Dictionary Order). +"},{"lineNumber":462,"author":{"gitId":"gerhean"},"content":"`d/`: Sorts by application date (Chronological Order). +"},{"lineNumber":463,"author":{"gitId":"gerhean"},"content":"`r/`: Sorts by role (Dictionary Order). +"},{"lineNumber":464,"author":{"gitId":"gerhean"},"content":"`s/`: Sorts by status (Refer to \u003c\u003cValid status\u003e\u003e). +"},{"lineNumber":465,"author":{"gitId":"gerhean"},"content":"`w/`: Sorts by priority level (Ascending Order). +"},{"lineNumber":466,"author":{"gitId":"-"},"content":""},{"lineNumber":467,"author":{"gitId":"-"},"content":"****"},{"lineNumber":468,"author":{"gitId":"gerhean"},"content":"* Sort displayed internship companies based on a given FIELD"},{"lineNumber":469,"author":{"gitId":"-"},"content":"****"},{"lineNumber":470,"author":{"gitId":"-"},"content":""},{"lineNumber":471,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":472,"author":{"gitId":"-"},"content":""},{"lineNumber":473,"author":{"gitId":"gerhean"},"content":"* `Sort c/` +"},{"lineNumber":474,"author":{"gitId":"gerhean"},"content":"Returns a list of currently displayed companies sorted by company name."},{"lineNumber":475,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":476,"author":{"gitId":"gerhean"},"content":"[cols\u003d\"2\", frame\u003d\"none\", grid\u003d\"none\"]"},{"lineNumber":477,"author":{"gitId":"gerhean"},"content":"|\u003d\u003d\u003d"},{"lineNumber":478,"author":{"gitId":"gerhean"},"content":"a|"},{"lineNumber":479,"author":{"gitId":"gerhean"},"content":".Before sorting the diary."},{"lineNumber":480,"author":{"gitId":"gerhean"},"content":"image::beforeSort.png[]"},{"lineNumber":481,"author":{"gitId":"gerhean"},"content":"a|"},{"lineNumber":482,"author":{"gitId":"gerhean"},"content":".After sorting the diary."},{"lineNumber":483,"author":{"gitId":"gerhean"},"content":"image::afterSort.png[]"},{"lineNumber":484,"author":{"gitId":"gerhean"},"content":"|\u003d\u003d\u003d"},{"lineNumber":485,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":486,"author":{"gitId":"-"},"content":"// tag::sort[]"},{"lineNumber":487,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":488,"author":{"gitId":"-"},"content":"// tag::interview[]"},{"lineNumber":489,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Modifying an interview in an internship application: `interview`"},{"lineNumber":490,"author":{"gitId":"-"},"content":""},{"lineNumber":491,"author":{"gitId":"-"},"content":"Add, list, edit or delete interviews within an internship application +"},{"lineNumber":492,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":493,"author":{"gitId":"-"},"content":"[TIP]"},{"lineNumber":494,"author":{"gitId":"-"},"content":"An interview must contain a date and a boolean (true or false) that represents whether an interview is conducted online or not. +"},{"lineNumber":495,"author":{"gitId":"-"},"content":"If the interview is not conducted online, an additional address field must be provided."},{"lineNumber":496,"author":{"gitId":"-"},"content":"See \u003c\u003cinterview\u003e\u003e for more information."},{"lineNumber":497,"author":{"gitId":"-"},"content":""},{"lineNumber":498,"author":{"gitId":"-"},"content":"Format:"},{"lineNumber":499,"author":{"gitId":"-"},"content":""},{"lineNumber":500,"author":{"gitId":"-"},"content":"* Overview +"},{"lineNumber":501,"author":{"gitId":"-"},"content":"`interview INTERNSHIP_INDEX COMMAND_WORD [INTERVIEW_INDEX] [a/ADDRESS] [d/DATE] [o/IS_ONLINE]`"},{"lineNumber":502,"author":{"gitId":"-"},"content":""},{"lineNumber":503,"author":{"gitId":"-"},"content":"****"},{"lineNumber":504,"author":{"gitId":"-"},"content":"* A `COMMAND_WORD` can be: `add list edit delete` +"},{"lineNumber":505,"author":{"gitId":"-"},"content":"The command will behave identically to their internship application counterparts"},{"lineNumber":506,"author":{"gitId":"-"},"content":"** `list` is currently functionally similar to `select`, additional features will be added in v2.0."},{"lineNumber":507,"author":{"gitId":"-"},"content":"* The `INTERNSHIP_INDEX` corresponds to the index of the internship in the displayed internship list."},{"lineNumber":508,"author":{"gitId":"-"},"content":"Whereas the `INTERVIEW_INDEX` corresponds to the index of the interview in the interview list."},{"lineNumber":509,"author":{"gitId":"-"},"content":"****"},{"lineNumber":510,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":511,"author":{"gitId":"-"},"content":"* Specific format of each `COMMAND_WORD`:"},{"lineNumber":512,"author":{"gitId":"-"},"content":""},{"lineNumber":513,"author":{"gitId":"-"},"content":"** Add interview +"},{"lineNumber":514,"author":{"gitId":"-"},"content":"`interview INTERNSHIP_INDEX add d/DATE o/IS_ONLINE [a/ADDRESS]` +"},{"lineNumber":515,"author":{"gitId":"-"},"content":"*** Address field `a/ADDRESS` is listed as optional here as online interview do not require an address but offline interview does."},{"lineNumber":516,"author":{"gitId":"-"},"content":"** List interview +"},{"lineNumber":517,"author":{"gitId":"-"},"content":"`interview INTERNSHIP_INDEX list`"},{"lineNumber":518,"author":{"gitId":"-"},"content":"** Edit interview +"},{"lineNumber":519,"author":{"gitId":"-"},"content":"`interview INTERNSHIP_INDEX edit INTERVIEW_INDEX [a/ADDRESS] [d/DATE] [o/IS_ONLINE]`"},{"lineNumber":520,"author":{"gitId":"-"},"content":"*** If you are editing an online interview into an offline interview, Address field `a/ADDRESS` is a requirement."},{"lineNumber":521,"author":{"gitId":"-"},"content":"** Delete interview +"},{"lineNumber":522,"author":{"gitId":"-"},"content":"`interview INTERNSHIP_INDEX delete INTERVIEW_INDEX`"},{"lineNumber":523,"author":{"gitId":"-"},"content":""},{"lineNumber":524,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":525,"author":{"gitId":"-"},"content":""},{"lineNumber":526,"author":{"gitId":"-"},"content":"* `list` +"},{"lineNumber":527,"author":{"gitId":"-"},"content":"`interview 2 list` +"},{"lineNumber":528,"author":{"gitId":"-"},"content":"Lists all interviews in the 2nd internship application in the list"},{"lineNumber":529,"author":{"gitId":"-"},"content":""},{"lineNumber":530,"author":{"gitId":"-"},"content":".Display of interview list in internship application details panel"},{"lineNumber":531,"author":{"gitId":"-"},"content":"image::InterviewListExample.png[align\u003d\"center\", width\u003d\"800\"]"},{"lineNumber":532,"author":{"gitId":"-"},"content":""},{"lineNumber":533,"author":{"gitId":"-"},"content":"* `interview 2 add o/false d/05 02 2020 a/Raffles City #02-22` +"},{"lineNumber":534,"author":{"gitId":"-"},"content":"Adds an interview to the 2nd internship application in the list."},{"lineNumber":535,"author":{"gitId":"-"},"content":""},{"lineNumber":536,"author":{"gitId":"-"},"content":".Display of change in interview list after a new interview is added"},{"lineNumber":537,"author":{"gitId":"-"},"content":"image::InterviewAddExample.png[align\u003d\"center\", width\u003d\"800\"]"},{"lineNumber":538,"author":{"gitId":"-"},"content":""},{"lineNumber":539,"author":{"gitId":"-"},"content":"* `interview 2 list` +"},{"lineNumber":540,"author":{"gitId":"-"},"content":"`interview 2 edit 1 d/05 05 2020` +"},{"lineNumber":541,"author":{"gitId":"-"},"content":"Edits the date of the 1st interview in the 2nd internship application in the list to `05 05 2020`."},{"lineNumber":542,"author":{"gitId":"-"},"content":""},{"lineNumber":543,"author":{"gitId":"-"},"content":".Display of change of interview field after an interview is edited"},{"lineNumber":544,"author":{"gitId":"-"},"content":"image::InterviewEditExample.png[align\u003d\"center\", width\u003d\"800\"]"},{"lineNumber":545,"author":{"gitId":"-"},"content":""},{"lineNumber":546,"author":{"gitId":"-"},"content":"* `interview 2 list` +"},{"lineNumber":547,"author":{"gitId":"-"},"content":"`interview 2 delete 3` +"},{"lineNumber":548,"author":{"gitId":"-"},"content":"Deletes the 3rd interview in the 2nd internship application in the list."},{"lineNumber":549,"author":{"gitId":"-"},"content":""},{"lineNumber":550,"author":{"gitId":"-"},"content":".Display of change in interview list after an interview is deleted"},{"lineNumber":551,"author":{"gitId":"-"},"content":"image::InterviewDeleteExample.png[align\u003d\"center\", width\u003d\"800\"]"},{"lineNumber":552,"author":{"gitId":"-"},"content":"// end::interview[]"},{"lineNumber":553,"author":{"gitId":"-"},"content":""},{"lineNumber":554,"author":{"gitId":"-"},"content":"//tag::reminder[]"},{"lineNumber":555,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Getting applications due or have interviews in 7 days: `reminder`"},{"lineNumber":556,"author":{"gitId":"-"},"content":""},{"lineNumber":557,"author":{"gitId":"-"},"content":"Displays all internship application(s) that:"},{"lineNumber":558,"author":{"gitId":"-"},"content":""},{"lineNumber":559,"author":{"gitId":"-"},"content":"* have status `wishlist` and need to be submitted in 7 days"},{"lineNumber":560,"author":{"gitId":"-"},"content":"* have status `interview` and interviews scheduled in 7 days"},{"lineNumber":561,"author":{"gitId":"-"},"content":""},{"lineNumber":562,"author":{"gitId":"-"},"content":"The applications will be displayed in order of earliest application date or scheduled interview date followed by those with later dates."},{"lineNumber":563,"author":{"gitId":"-"},"content":""},{"lineNumber":564,"author":{"gitId":"-"},"content":"This command helps to remind you of applications which you might want to focus on first, so that you do not miss submission deadlines or any upcoming interviews."},{"lineNumber":565,"author":{"gitId":"-"},"content":""},{"lineNumber":566,"author":{"gitId":"-"},"content":"Format: `reminder`"},{"lineNumber":567,"author":{"gitId":"-"},"content":""},{"lineNumber":568,"author":{"gitId":"-"},"content":".Example display of Internship Diary when `reminder` is executed"},{"lineNumber":569,"author":{"gitId":"-"},"content":"image::reminderexample.png[align\u003d\"center\", width\u003d\"800\"]"},{"lineNumber":570,"author":{"gitId":"-"},"content":""},{"lineNumber":571,"author":{"gitId":"-"},"content":"[TIP]"},{"lineNumber":572,"author":{"gitId":"-"},"content":"`reminder` can be used anytime, but it does not work on archived applications."},{"lineNumber":573,"author":{"gitId":"-"},"content":""},{"lineNumber":574,"author":{"gitId":"-"},"content":""},{"lineNumber":575,"author":{"gitId":"-"},"content":"[TIP]"},{"lineNumber":576,"author":{"gitId":"-"},"content":"Any command after `reminder` will be ignored. +"},{"lineNumber":577,"author":{"gitId":"-"},"content":"e.g. `reminder dummy variable` be just be treated as `reminder`"},{"lineNumber":578,"author":{"gitId":"-"},"content":"//end::reminder[]"},{"lineNumber":579,"author":{"gitId":"-"},"content":""},{"lineNumber":580,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Clearing all entries: `clear`"},{"lineNumber":581,"author":{"gitId":"-"},"content":""},{"lineNumber":582,"author":{"gitId":"-"},"content":"Clears all entries from the Internship Diary. +"},{"lineNumber":583,"author":{"gitId":"-"},"content":"Format: `clear`"},{"lineNumber":584,"author":{"gitId":"-"},"content":""},{"lineNumber":585,"author":{"gitId":"-"},"content":"// tag::stats[]"},{"lineNumber":586,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Retrieving statistics: `stats`"},{"lineNumber":587,"author":{"gitId":"-"},"content":""},{"lineNumber":588,"author":{"gitId":"-"},"content":"Displays the statistics about your internship application(s) on the current list."},{"lineNumber":589,"author":{"gitId":"-"},"content":""},{"lineNumber":590,"author":{"gitId":"-"},"content":"It will open a separate window that contains a bar chart and a pie chart."},{"lineNumber":591,"author":{"gitId":"-"},"content":""},{"lineNumber":592,"author":{"gitId":"-"},"content":"The statistics will dynamically update as you update the current list (e.g. switching between main and archival list)."},{"lineNumber":593,"author":{"gitId":"-"},"content":""},{"lineNumber":594,"author":{"gitId":"-"},"content":"Format: `stats`"},{"lineNumber":595,"author":{"gitId":"-"},"content":""},{"lineNumber":596,"author":{"gitId":"-"},"content":".Statistics window which opens when `stats` is executed"},{"lineNumber":597,"author":{"gitId":"-"},"content":"image::internship_diary_stats.png[align\u003d\"center\", width\u003d\"500\"]"},{"lineNumber":598,"author":{"gitId":"-"},"content":""},{"lineNumber":599,"author":{"gitId":"-"},"content":"****"},{"lineNumber":600,"author":{"gitId":"-"},"content":"* The bar chart showcases:"},{"lineNumber":601,"author":{"gitId":"-"},"content":"** the count of internship application(s) under each `STATUS`"},{"lineNumber":602,"author":{"gitId":"-"},"content":"* The pie chart showcases:"},{"lineNumber":603,"author":{"gitId":"-"},"content":"** the percentage of internship application(s) under each `STATUS`"},{"lineNumber":604,"author":{"gitId":"-"},"content":"** percentages are rounded off to two decimal places"},{"lineNumber":605,"author":{"gitId":"-"},"content":"****"},{"lineNumber":606,"author":{"gitId":"-"},"content":""},{"lineNumber":607,"author":{"gitId":"-"},"content":"[TIP]"},{"lineNumber":608,"author":{"gitId":"-"},"content":"Alternatively, you may use your mouse to click on \"Statistics\" and then \"View Statistics\" to bring up the statistics window."},{"lineNumber":609,"author":{"gitId":"-"},"content":""},{"lineNumber":610,"author":{"gitId":"-"},"content":".Opening statistics window via mouse click"},{"lineNumber":611,"author":{"gitId":"-"},"content":"image::click_statistics.png[align\u003d\"center\", width\u003d\"790\"]"},{"lineNumber":612,"author":{"gitId":"-"},"content":"// end::stats[]"},{"lineNumber":613,"author":{"gitId":"-"},"content":""},{"lineNumber":614,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Exiting the program: `exit`"},{"lineNumber":615,"author":{"gitId":"-"},"content":""},{"lineNumber":616,"author":{"gitId":"-"},"content":"Exits the program. +"},{"lineNumber":617,"author":{"gitId":"-"},"content":"Format: `exit`"},{"lineNumber":618,"author":{"gitId":"-"},"content":""},{"lineNumber":619,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":620,"author":{"gitId":"-"},"content":""},{"lineNumber":621,"author":{"gitId":"-"},"content":"Internship Diary is saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":622,"author":{"gitId":"-"},"content":"There is no need to save manually."},{"lineNumber":623,"author":{"gitId":"-"},"content":""},{"lineNumber":624,"author":{"gitId":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":625,"author":{"gitId":"-"},"content":""},{"lineNumber":626,"author":{"gitId":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":627,"author":{"gitId":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Internship Diary folder."},{"lineNumber":628,"author":{"gitId":"-"},"content":""},{"lineNumber":629,"author":{"gitId":"-"},"content":"*Q*: What happens if I directly change the data stored in the hard drive? +"},{"lineNumber":630,"author":{"gitId":"-"},"content":"*A*: The application cannot guarantee the integrity of your data if you tamper with the file in the storage."},{"lineNumber":631,"author":{"gitId":"-"},"content":""},{"lineNumber":632,"author":{"gitId":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":633,"author":{"gitId":"-"},"content":""},{"lineNumber":634,"author":{"gitId":"-"},"content":"* *Help* : `help`"},{"lineNumber":635,"author":{"gitId":"-"},"content":"* *List* : `list`"},{"lineNumber":636,"author":{"gitId":"-"},"content":"* *Archival* : `archival`"},{"lineNumber":637,"author":{"gitId":"-"},"content":"* *Select* : `select INDEX`"},{"lineNumber":638,"author":{"gitId":"-"},"content":"* *Add* `add c/COMPANY r/ROLE d/DATE s/STATUS [p/PHONE] [e/EMAIL] [a/ADDRESS] [w/PRIORITY]​` +"},{"lineNumber":639,"author":{"gitId":"-"},"content":"e.g. `add c/Google r/Software engineer s/wishlist d/10 10 2010`"},{"lineNumber":640,"author":{"gitId":"-"},"content":"* *Delete* : `delete INDEX` +"},{"lineNumber":641,"author":{"gitId":"-"},"content":"e.g. `delete 1`"},{"lineNumber":642,"author":{"gitId":"-"},"content":"* *Archive* : `archive INDEX` +"},{"lineNumber":643,"author":{"gitId":"-"},"content":"e.g. `archive 1`"},{"lineNumber":644,"author":{"gitId":"-"},"content":"* *Unarchive* : `unarchive INDEX` +"},{"lineNumber":645,"author":{"gitId":"-"},"content":"e.g. `unarchive 1`"},{"lineNumber":646,"author":{"gitId":"-"},"content":"* *Edit* : `edit INDEX [c/COMPANY] [r/ROLE] [d/DATE] [s/STATUS] [p/PHONE] [e/EMAIL] [a/ADDRESS] [w/PRIORITY]` +"},{"lineNumber":647,"author":{"gitId":"-"},"content":"e.g. `edit 2 c/Google s/applied`"},{"lineNumber":648,"author":{"gitId":"-"},"content":"* *Find* : `find [KEYWORDS] [c/COMPANY] [r/ROLE] [a/ADDRESS] [p/PHONE] [e/EMAIL] [d/DATE] [w/PRIORITY] [s/STATUS]` +"},{"lineNumber":649,"author":{"gitId":"-"},"content":"e.g. `find c/google r/engineer`"},{"lineNumber":650,"author":{"gitId":"-"},"content":"* *Sort* : `sort FIELD` +"},{"lineNumber":651,"author":{"gitId":"gerhean"},"content":"e.g. `sort c/`"},{"lineNumber":652,"author":{"gitId":"-"},"content":""},{"lineNumber":653,"author":{"gitId":"-"},"content":"* *Interview* :"},{"lineNumber":654,"author":{"gitId":"-"},"content":""},{"lineNumber":655,"author":{"gitId":"-"},"content":"** Add:"},{"lineNumber":656,"author":{"gitId":"-"},"content":"`interview INTERNSHIP_INDEX add d/DATE o/IS_ONLINE [a/ADDRESS]` +"},{"lineNumber":657,"author":{"gitId":"-"},"content":"e.g. `interview 1 add d/20 12 2020 o/true`"},{"lineNumber":658,"author":{"gitId":"-"},"content":"** List:"},{"lineNumber":659,"author":{"gitId":"-"},"content":"`interview INTERNSHIP_INDEX list` +"},{"lineNumber":660,"author":{"gitId":"-"},"content":"e.g. `interview 1 list`"},{"lineNumber":661,"author":{"gitId":"-"},"content":"** Edit:"},{"lineNumber":662,"author":{"gitId":"-"},"content":"`interview INTERNSHIP_INDEX edit INTERVIEW_INDEX [a/ADDRESS] [d/DATE] [o/IS_ONLINE]` +"},{"lineNumber":663,"author":{"gitId":"-"},"content":"e.g. `interview 1 edit 1 d/10 10 2020`"},{"lineNumber":664,"author":{"gitId":"-"},"content":"** Delete:"},{"lineNumber":665,"author":{"gitId":"-"},"content":"`interview INTERNSHIP_INDEX delete INTERVIEW_INDEX` +"},{"lineNumber":666,"author":{"gitId":"-"},"content":"e.g. `interview 1 delete 1`"},{"lineNumber":667,"author":{"gitId":"-"},"content":""},{"lineNumber":668,"author":{"gitId":"-"},"content":"* *Reminder* : `reminder`"},{"lineNumber":669,"author":{"gitId":"-"},"content":"* *Clear* : `clear`"},{"lineNumber":670,"author":{"gitId":"-"},"content":"* *Statistics* : `stats`"},{"lineNumber":671,"author":{"gitId":"-"},"content":"* *Exit* : `exit`"},{"lineNumber":672,"author":{"gitId":"-"},"content":""},{"lineNumber":673,"author":{"gitId":"gerhean"},"content":"\u003d\u003d Glossary"},{"lineNumber":674,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":675,"author":{"gitId":"gerhean"},"content":"* Alphanumerical"},{"lineNumber":676,"author":{"gitId":"gerhean"},"content":"** Either a letter of the English language (a-z, A-Z) or a Roman numeral (0-9)."},{"lineNumber":677,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":678,"author":{"gitId":"gerhean"},"content":"* Chronological order"},{"lineNumber":679,"author":{"gitId":"gerhean"},"content":"** The order of events in which events which occurred earlier would be placed before"},{"lineNumber":680,"author":{"gitId":"gerhean"},"content":"events which occurred later."},{"lineNumber":681,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":682,"author":{"gitId":"gerhean"},"content":"* Dictionary order:"},{"lineNumber":683,"author":{"gitId":"gerhean"},"content":"** The order which words would be ordered in a dictionary."}],"authorContributionMap":{"gerhean":66,"-":617}},{"path":"docs/diagrams/ClearSequenceDiagram.puml","fileType":"puml","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"@startuml"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":"!include style.puml"},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"box Logic LOGIC_COLOR_T1"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"participant \":InternshipDiaryParser\" as InternshipDiaryParser LOGIC_COLOR"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"participant \"i:InitClearCommand\" as InitClearCommand LOGIC_COLOR"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"participant \"cr1:CommandResult\" as CommandResult1 LOGIC_COLOR"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"participant \"cccp:ClearCommandConfirmationParser\" as ClearCommandConfirmationParser LOGIC_COLOR"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"participant \"c:ClearCommand\" as ClearCommand LOGIC_COLOR"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"participant \"cr2:CommandResult\" as CommandResult2 LOGIC_COLOR"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"end box"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"box Model MODEL_COLOR_T1"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"participant \"diary:InternshipDiary\" as InternshipDiary MODEL_COLOR"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"participant \":Model\" as Model MODEL_COLOR"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"end box"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"[-\u003e LogicManager : execute(\"clear\")"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"activate LogicManager"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"LogicManager -\u003e InternshipDiaryParser : parseCommand(\"clear\")"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"activate InternshipDiaryParser"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"create InitClearCommand"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"InternshipDiaryParser -\u003e InitClearCommand"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"activate InitClearCommand"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"InitClearCommand --\u003e InternshipDiaryParser : i"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"deactivate InitClearCommand"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"InternshipDiaryParser --\u003e LogicManager : i"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"deactivate InternshipDiaryParser"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"LogicManager -\u003e InitClearCommand : execute()"},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"activate InitClearCommand"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"create CommandResult1"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"InitClearCommand -\u003e CommandResult1"},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"activate CommandResult1"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"CommandResult1 --\u003e InitClearCommand : cr1"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"deactivate CommandResult1"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"InitClearCommand --\u003e LogicManager : cr1"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"deactivate InitClearCommand"},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":"LogicManager -\u003e InitClearCommand : getNextInternshipDiaryParser()"},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":"activate InitClearCommand"},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":55,"author":{"gitId":"gerhean"},"content":"create ClearCommandConfirmationParser"},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":"InitClearCommand -\u003e ClearCommandConfirmationParser"},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":"activate ClearCommandConfirmationParser"},{"lineNumber":58,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":59,"author":{"gitId":"gerhean"},"content":"ClearCommandConfirmationParser --\u003e InitClearCommand : cccp"},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":"deactivate ClearCommandConfirmationParser"},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":62,"author":{"gitId":"gerhean"},"content":"InitClearCommand --\u003e LogicManager : cccp"},{"lineNumber":63,"author":{"gitId":"gerhean"},"content":"deactivate InitClearCommand"},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":"[\u003c--LogicManager"},{"lineNumber":66,"author":{"gitId":"gerhean"},"content":"deactivate LogicManager"},{"lineNumber":67,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":68,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":69,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":70,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":71,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":72,"author":{"gitId":"gerhean"},"content":"[-\u003e LogicManager : execute(\"yes\")"},{"lineNumber":73,"author":{"gitId":"gerhean"},"content":"activate LogicManager"},{"lineNumber":74,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":75,"author":{"gitId":"gerhean"},"content":"LogicManager -\u003e ClearCommandConfirmationParser : parseCommand(\"yes\")"},{"lineNumber":76,"author":{"gitId":"gerhean"},"content":"activate ClearCommandConfirmationParser"},{"lineNumber":77,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":78,"author":{"gitId":"gerhean"},"content":"create ClearCommand"},{"lineNumber":79,"author":{"gitId":"gerhean"},"content":"ClearCommandConfirmationParser -\u003e ClearCommand"},{"lineNumber":80,"author":{"gitId":"gerhean"},"content":"activate ClearCommand"},{"lineNumber":81,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":82,"author":{"gitId":"gerhean"},"content":"ClearCommand --\u003e ClearCommandConfirmationParser : c"},{"lineNumber":83,"author":{"gitId":"gerhean"},"content":"deactivate ClearCommand"},{"lineNumber":84,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":85,"author":{"gitId":"gerhean"},"content":"ClearCommandConfirmationParser --\u003e LogicManager : c"},{"lineNumber":86,"author":{"gitId":"gerhean"},"content":"deactivate ClearCommandConfirmationParser"},{"lineNumber":87,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":88,"author":{"gitId":"gerhean"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar."},{"lineNumber":89,"author":{"gitId":"gerhean"},"content":"ClearCommandConfirmationParser -[hidden]-\u003e InternshipDiaryParser"},{"lineNumber":90,"author":{"gitId":"gerhean"},"content":"destroy ClearCommandConfirmationParser"},{"lineNumber":91,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":92,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":93,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":94,"author":{"gitId":"gerhean"},"content":"LogicManager -\u003e ClearCommand : execute()"},{"lineNumber":95,"author":{"gitId":"gerhean"},"content":"activate ClearCommand"},{"lineNumber":96,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":97,"author":{"gitId":"gerhean"},"content":"create InternshipDiary"},{"lineNumber":98,"author":{"gitId":"gerhean"},"content":"ClearCommand -\u003e InternshipDiary"},{"lineNumber":99,"author":{"gitId":"gerhean"},"content":"activate InternshipDiary"},{"lineNumber":100,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":101,"author":{"gitId":"gerhean"},"content":"InternshipDiary --\u003e ClearCommand : diary"},{"lineNumber":102,"author":{"gitId":"gerhean"},"content":"deactivate InternshipDiary"},{"lineNumber":103,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":104,"author":{"gitId":"gerhean"},"content":"ClearCommand -\u003e Model : setInternshipDiary(diary)"},{"lineNumber":105,"author":{"gitId":"gerhean"},"content":"activate Model"},{"lineNumber":106,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":107,"author":{"gitId":"gerhean"},"content":"Model --\u003e ClearCommand"},{"lineNumber":108,"author":{"gitId":"gerhean"},"content":"deactivate Model"},{"lineNumber":109,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":110,"author":{"gitId":"gerhean"},"content":"create CommandResult2"},{"lineNumber":111,"author":{"gitId":"gerhean"},"content":"ClearCommand -\u003e CommandResult2"},{"lineNumber":112,"author":{"gitId":"gerhean"},"content":"activate CommandResult2"},{"lineNumber":113,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":114,"author":{"gitId":"gerhean"},"content":"CommandResult2 --\u003e ClearCommand : cr2"},{"lineNumber":115,"author":{"gitId":"gerhean"},"content":"deactivate CommandResult2"},{"lineNumber":116,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":117,"author":{"gitId":"gerhean"},"content":"ClearCommand --\u003e LogicManager : cr2"},{"lineNumber":118,"author":{"gitId":"gerhean"},"content":"deactivate ClearCommand"},{"lineNumber":119,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":120,"author":{"gitId":"gerhean"},"content":"[\u003c--LogicManager"},{"lineNumber":121,"author":{"gitId":"gerhean"},"content":"deactivate LogicManager"},{"lineNumber":122,"author":{"gitId":"gerhean"},"content":"@enduml"}],"authorContributionMap":{"gerhean":122}},{"path":"docs/diagrams/CommandHistExeCleanupActivityDiagram.puml","fileType":"puml","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"@startuml"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":"start"},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":":Queue command at front of"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"EnteredCommandHistory;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"if () then ([size of \\nEnteredCommandHistory\\nexceeds 20])"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"    :Dequeue command at back of"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"    EnteredCommandHistory;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"else ([else])"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"endif"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":":Move historyIterator"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"to the front of"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"EnteredCommandHistory;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":":Clear command in CommandBox;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"stop"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"@enduml"}],"authorContributionMap":{"gerhean":18}},{"path":"docs/diagrams/CommandHistKeypessActivityDiagram.puml","fileType":"puml","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"@startuml"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":"start"},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"        if () then ([key UP pressed])"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"            if () then ([no earlier history])"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"            else ([else])"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"                :Copy the command at"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"                historyIterator into"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"                CommandBox;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"                :Increment position of"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"                historyIterator by 1;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"            endif"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"        else"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"        if () then ([key DOWN pressed])"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"            if () then ([no later history])"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"            else ([else])"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"                :Decrement position of"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"                historyIterator by 1;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"                :Copy the command at"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"                historyIterator into"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"                CommandBox;"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"            endif"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"        else"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"        if () then ([key LEFT or RIGHT pressed])"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"        else ([other key pressed])"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"            :Move historyIterator"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"            to the front of"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"            EnteredCommandHistory;"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"            :Update CommandBox"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"            accordingly;"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"        endif"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"        endif"},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"        endif"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"stop"},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"@enduml"}],"authorContributionMap":{"gerhean":38}},{"path":"docs/diagrams/CommandHistoryActivityDiagram.puml","fileType":"puml","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"@startuml"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":"start"},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"while () is ([Application running])"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"    :Wait for keypress;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"    while () is ([other key pressed])"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"    :Handle other"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"    key pressed ⋔;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"    :Wait for keypress;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"    endwhile ([key ENTER pressed])"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"  :Execute command;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"  if () then ([execution successful])"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"      :Execution Cleanup ⋔;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"  else ([exception thrown])"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"  endif"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"endwhile ([else])"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"stop"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"@enduml"}],"authorContributionMap":{"gerhean":20}},{"path":"docs/diagrams/ComparatorClassDiagram.puml","fileType":"puml","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"@startuml"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"hide circle"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"hide empty members"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"skinparam classAttributeIconSize 0"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"Class SortCommand {"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"Class SortCommandParser {"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"Interface Comparator \u003cInternshipApplication\u003e \u003c\u003cinterface\u003e\u003e{"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"    + compare(InternshipApplication, InternshipApplication): int"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"    + toString(): String"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"    + reversed(): Comparator"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"Class XYZComparator {"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"Class ReversedComparator {"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"note as N1"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"  The Comparator interface is the default"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"  java.util.function.Comparator functional interface"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"end note"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"note as N2"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"    XYZComparator can be any of:"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"    ApplicationDateComparator, CompanyComparator, "},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"    PriorityComparator, RoleComparator,"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"    or StatusComparator."},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"end note"},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"Comparator .. N1"},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"XYZComparator .right. N2"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"SortCommandParser .left.\u003e SortCommand : creates \u003e"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"SortCommandParser .right.\u003e XYZComparator"},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"SortCommandParser ..\u003e Comparator"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"SortCommand --\u003e \"1\" Comparator"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"XYZComparator .down.|\u003e Comparator"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"XYZComparator ..\u003e ReversedComparator"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"ReversedComparator ..|\u003e Comparator"},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":"@enduml"}],"authorContributionMap":{"gerhean":52}},{"path":"docs/diagrams/SortSequenceDiagram.puml","fileType":"puml","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"@startuml"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":"!include style.puml"},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"box Logic LOGIC_COLOR_T1"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"participant \":InternshipDiaryParser\" as InternshipDiaryParser LOGIC_COLOR"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"participant \":SortCommandParser\" as SortCommandParser LOGIC_COLOR"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"participant \"c:CompanyComparator\" as CompanyComparator LOGIC_COLOR"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"participant \"s:SortCommand\" as SortCommand LOGIC_COLOR"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"end box"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"box Model MODEL_COLOR_T1"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"participant \":Model\" as Model MODEL_COLOR"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"end box"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"[-\u003e LogicManager : execute(\"sort c/\")"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"activate LogicManager"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"LogicManager -\u003e InternshipDiaryParser : parseCommand(\"sort c/\")"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"activate InternshipDiaryParser"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"create SortCommandParser"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"InternshipDiaryParser -\u003e SortCommandParser"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"activate SortCommandParser"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"SortCommandParser --\u003e InternshipDiaryParser"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"deactivate SortCommandParser"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"InternshipDiaryParser -\u003e SortCommandParser : parse(\"c/\")"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"activate SortCommandParser"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"create CompanyComparator"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"SortCommandParser -\u003e CompanyComparator"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"activate CompanyComparator"},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"CompanyComparator --\u003e SortCommandParser : c"},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"deactivate CompanyComparator"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"create SortCommand"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"SortCommandParser -\u003e SortCommand : new SortCommand(c)"},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"activate SortCommand"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"SortCommand --\u003e SortCommandParser : s"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"deactivate SortCommand"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"SortCommandParser --\u003e InternshipDiaryParser : s"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"deactivate SortCommandParser"},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar."},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"SortCommandParser -[hidden]-\u003e InternshipDiaryParser"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":"destroy SortCommandParser"},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":"InternshipDiaryParser --\u003e LogicManager : s"},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":"deactivate InternshipDiaryParser"},{"lineNumber":55,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":"LogicManager -\u003e SortCommand : execute()"},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":"activate SortCommand"},{"lineNumber":58,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":59,"author":{"gitId":"gerhean"},"content":"SortCommand -\u003e Model : updateFilteredInternshipApplicationList(c)"},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":"activate Model"},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":62,"author":{"gitId":"gerhean"},"content":"Model --\u003e SortCommand"},{"lineNumber":63,"author":{"gitId":"gerhean"},"content":"deactivate Model"},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":"create CommandResult"},{"lineNumber":66,"author":{"gitId":"gerhean"},"content":"SortCommand -\u003e CommandResult"},{"lineNumber":67,"author":{"gitId":"gerhean"},"content":"activate CommandResult"},{"lineNumber":68,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":69,"author":{"gitId":"gerhean"},"content":"CommandResult --\u003e SortCommand"},{"lineNumber":70,"author":{"gitId":"gerhean"},"content":"deactivate CommandResult"},{"lineNumber":71,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":72,"author":{"gitId":"gerhean"},"content":"SortCommand --\u003e LogicManager : result"},{"lineNumber":73,"author":{"gitId":"gerhean"},"content":"deactivate SortCommand"},{"lineNumber":74,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":75,"author":{"gitId":"gerhean"},"content":"[\u003c--LogicManager"},{"lineNumber":76,"author":{"gitId":"gerhean"},"content":"deactivate LogicManager"},{"lineNumber":77,"author":{"gitId":"gerhean"},"content":"@enduml"}],"authorContributionMap":{"gerhean":77}},{"path":"docs/diagrams/StorageClassDiagram.puml","fileType":"puml","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor STORAGE_COLOR"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor STORAGE_COLOR"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Interface Storage \u003c\u003cInterface\u003e\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Interface InternshipDiaryStorage \u003c\u003cInterface\u003e\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class StorageManager"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class JsonUserPrefsStorage"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class JsonInternshipDiaryStorage"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"StorageManager .left.|\u003e Storage"},{"lineNumber":16,"author":{"gitId":"-"},"content":"StorageManager o-right-\u003e UserPrefsStorage"},{"lineNumber":17,"author":{"gitId":"-"},"content":"StorageManager o--\u003e InternshipDiaryStorage"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"},{"lineNumber":20,"author":{"gitId":"-"},"content":"JsonInternshipDiaryStorage .left.|\u003e InternshipDiaryStorage"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"JsonInternshipDiaryStorage .down.\u003e JsonSerializableInternshipDiary"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"JsonSerializableInternshipDiary .right.\u003e JsonAdaptedInternship"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"JsonAdaptedInternship .right.\u003e JsonAdaptedInterview"},{"lineNumber":24,"author":{"gitId":"-"},"content":"@enduml"}],"authorContributionMap":{"gerhean":3,"-":21}},{"path":"docs/diagrams/UiClassDiagram.puml","fileType":"puml","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor UI_COLOR_T4"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor UI_COLOR"},{"lineNumber":6,"author":{"gitId":"-"},"content":"skinparam linetype ortho"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"package UI \u003c\u003cRectangle\u003e\u003e{"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Interface Ui \u003c\u003cInterface\u003e\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class \"{abstract}\\nUiPart\" as UiPart"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class UiManager"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class MainWindow"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class ResultDisplay"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class CommandBox"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"Class EnteredCommandsHistory"},{"lineNumber":17,"author":{"gitId":"-"},"content":"package \"Internship Application List\" \u003c\u003cRectangle\u003e\u003e {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Class InternshipApplicationListPanel"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Class InternshipApplicationCard"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}"},{"lineNumber":21,"author":{"gitId":"-"},"content":"package \"Internship Application Detail\" \u003c\u003cRectangle\u003e\u003e {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Class InternshipApplicationDetail"},{"lineNumber":23,"author":{"gitId":"-"},"content":"Class InternshipApplicationDetailSetter"},{"lineNumber":24,"author":{"gitId":"-"},"content":"Class InterviewListPanel"},{"lineNumber":25,"author":{"gitId":"-"},"content":"Class InterviewCard"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"},{"lineNumber":27,"author":{"gitId":"-"},"content":"package \"Display Footer\" \u003c\u003cRectangle\u003e\u003e {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"Class StatisticsBarFooter"},{"lineNumber":29,"author":{"gitId":"-"},"content":"Class ComparatorDisplayFooter"},{"lineNumber":30,"author":{"gitId":"-"},"content":"Class PredicateDisplayFooter"},{"lineNumber":31,"author":{"gitId":"-"},"content":"Class StatusBarFooter"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"},{"lineNumber":33,"author":{"gitId":"-"},"content":"package \"External Windows\" \u003c\u003cRectangle\u003e\u003e {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"Class HelpWindow"},{"lineNumber":35,"author":{"gitId":"-"},"content":"Class StatisticsWindow"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"package Model \u003c\u003cRectangle\u003e\u003e {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"Class HiddenModel #FFFFFF"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"package Logic \u003c\u003cRectangle\u003e\u003e {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"Class HiddenLogic #FFFFFF"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF"},{"lineNumber":48,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Ui"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"UiManager .left.|\u003e Ui"},{"lineNumber":51,"author":{"gitId":"-"},"content":"UiManager -down-\u003e MainWindow"},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":"MainWindow -down-\u003e StatisticsWindow"},{"lineNumber":53,"author":{"gitId":"-"},"content":"MainWindow *-right-\u003e ComparatorDisplayFooter"},{"lineNumber":54,"author":{"gitId":"-"},"content":"MainWindow *-right-\u003e StatisticsBarFooter"},{"lineNumber":55,"author":{"gitId":"gerhean"},"content":"MainWindow -down-\u003e HelpWindow"},{"lineNumber":56,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e CommandBox"},{"lineNumber":57,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e ResultDisplay"},{"lineNumber":58,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e InternshipApplicationListPanel"},{"lineNumber":59,"author":{"gitId":"-"},"content":"MainWindow *-right-\u003e StatusBarFooter"},{"lineNumber":60,"author":{"gitId":"-"},"content":"MainWindow *-right-\u003e PredicateDisplayFooter"},{"lineNumber":61,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e InternshipApplicationDetail"},{"lineNumber":62,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e InternshipApplicationDetailSetter"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"InternshipApplicationDetail -down-\u003e InterviewListPanel"},{"lineNumber":65,"author":{"gitId":"-"},"content":"InterviewListPanel -down-\u003e InterviewCard"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"InternshipApplicationListPanel -down-\u003e InternshipApplicationCard"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"MainWindow -down-|\u003e UiPart"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"gerhean"},"content":"CommandBox -up-\u003e EnteredCommandsHistory"},{"lineNumber":72,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"ResultDisplay --|\u003e UiPart"},{"lineNumber":74,"author":{"gitId":"-"},"content":"CommandBox --|\u003e UiPart"},{"lineNumber":75,"author":{"gitId":"-"},"content":"InternshipApplicationListPanel --|\u003e UiPart"},{"lineNumber":76,"author":{"gitId":"-"},"content":"InternshipApplicationCard --|\u003e UiPart"},{"lineNumber":77,"author":{"gitId":"-"},"content":"StatusBarFooter --|\u003e UiPart"},{"lineNumber":78,"author":{"gitId":"gerhean"},"content":"StatisticsWindow --|\u003e UiPart"},{"lineNumber":79,"author":{"gitId":"gerhean"},"content":"StatisticsBarFooter--|\u003e UiPart"},{"lineNumber":80,"author":{"gitId":"gerhean"},"content":"ComparatorDisplayFooter --|\u003e UiPart"},{"lineNumber":81,"author":{"gitId":"gerhean"},"content":"PredicateDisplayFooter --|\u003e UiPart"},{"lineNumber":82,"author":{"gitId":"gerhean"},"content":"HelpWindow --|\u003e UiPart"},{"lineNumber":83,"author":{"gitId":"-"},"content":"InternshipApplicationDetail --|\u003e UiPart"},{"lineNumber":84,"author":{"gitId":"-"},"content":"InterviewListPanel --|\u003e UiPart"},{"lineNumber":85,"author":{"gitId":"-"},"content":"InterviewCard --|\u003e UiPart"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"InternshipApplicationDetailSetter ..\u003e InternshipApplicationDetail"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"gerhean"},"content":"StatisticsBarFooter ..\u003e Model"},{"lineNumber":90,"author":{"gitId":"gerhean"},"content":"StatisticsWindow ..\u003e Model"},{"lineNumber":91,"author":{"gitId":"gerhean"},"content":"PredicateDisplayFooter ..\u003e Model"},{"lineNumber":92,"author":{"gitId":"gerhean"},"content":"ComparatorDisplayFooter ..\u003e Model"},{"lineNumber":93,"author":{"gitId":"-"},"content":"InternshipApplicationCard ..\u003e Model"},{"lineNumber":94,"author":{"gitId":"-"},"content":"InternshipApplicationDetail ..\u003e Model"},{"lineNumber":95,"author":{"gitId":"-"},"content":"InterviewCard ..\u003e Model"},{"lineNumber":96,"author":{"gitId":"-"},"content":"UiManager -right-\u003e Logic"},{"lineNumber":97,"author":{"gitId":"-"},"content":"MainWindow -left-\u003e Logic"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":100,"author":{"gitId":"gerhean"},"content":"PredicateDisplayFooter -[hidden]up- ComparatorDisplayFooter"},{"lineNumber":101,"author":{"gitId":"gerhean"},"content":"PredicateDisplayFooter -[hidden]left- StatisticsBarFooter"},{"lineNumber":102,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":103,"author":{"gitId":"gerhean"},"content":"StatisticsBarFooter -[hidden]up- StatisticsWindow"},{"lineNumber":104,"author":{"gitId":"gerhean"},"content":"StatisticsBarFooter -[hidden]left- InternshipApplicationListPanel"},{"lineNumber":105,"author":{"gitId":"gerhean"},"content":"InternshipApplicationListPanel -[hidden]left- ResultDisplay"},{"lineNumber":106,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":107,"author":{"gitId":"gerhean"},"content":"ResultDisplay -[hidden]up- HelpWindow"},{"lineNumber":108,"author":{"gitId":"-"},"content":"ResultDisplay -[hidden]left- StatusBarFooter"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"gerhean"},"content":"StatusBarFooter -[hidden]up- CommandBox"},{"lineNumber":111,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"MainWindow -[hidden]-|\u003e UiPart"},{"lineNumber":113,"author":{"gitId":"-"},"content":"@enduml"}],"authorContributionMap":{"gerhean":25,"-":88}},{"path":"docs/stylesheets/gh-pages.css","fileType":"css","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@import url(https://fonts.googleapis.com/css?family\u003dMontserrat|Open+Sans);"},{"lineNumber":2,"author":{"gitId":"-"},"content":"@import \"asciidoctor.css\"; /* Default asciidoc style framework - important */"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"/* Do not print out full links */"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"@media print {"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"  a[href]:after {"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"    content: none !important;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"  }"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/* Custom block: details */"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":".sidebarblock.details \u003e .content {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    border-left: .25rem solid rgba(0, 0, 0, 0.1);"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":".sidebarblock.details \u003e .content {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    padding-left: .5rem"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":".sidebarblock.details {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    background-color: transparent;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    border: none;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    padding-bottom: 0;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    padding-top: 0;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"/* Overrides for asciidoctor.css */"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"a {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    color: #0074c7;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"h1,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"#content h1 \u003e a.link,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"h2,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"h2 \u003e a.link,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"h3,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"h3 \u003e a.link,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"#toctitle,"},{"lineNumber":41,"author":{"gitId":"-"},"content":"#toctitle \u003e a.link,"},{"lineNumber":42,"author":{"gitId":"-"},"content":".sidebarblock \u003e .content \u003e .title,"},{"lineNumber":43,"author":{"gitId":"-"},"content":".sidebarblock \u003e .content \u003e .title \u003e a.link,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"h4,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"h4 \u003e a.link,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"h5,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"h5 \u003e a.link,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"h6,"},{"lineNumber":49,"author":{"gitId":"-"},"content":"h6 \u003e a.link {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    color: #e46c0a;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":".subheader,"},{"lineNumber":54,"author":{"gitId":"-"},"content":".admonitionblock td.content \u003e .title,"},{"lineNumber":55,"author":{"gitId":"-"},"content":".audioblock \u003e .title,"},{"lineNumber":56,"author":{"gitId":"-"},"content":".exampleblock \u003e .title,"},{"lineNumber":57,"author":{"gitId":"-"},"content":".imageblock \u003e .title,"},{"lineNumber":58,"author":{"gitId":"-"},"content":".listingblock \u003e .title,"},{"lineNumber":59,"author":{"gitId":"-"},"content":".literalblock \u003e .title,"},{"lineNumber":60,"author":{"gitId":"-"},"content":".stemblock \u003e .title,"},{"lineNumber":61,"author":{"gitId":"-"},"content":".openblock \u003e .title,"},{"lineNumber":62,"author":{"gitId":"-"},"content":".paragraph \u003e.title,"},{"lineNumber":63,"author":{"gitId":"-"},"content":".quoteblock \u003e .title,"},{"lineNumber":64,"author":{"gitId":"-"},"content":"table.tableblock \u003e .title,"},{"lineNumber":65,"author":{"gitId":"-"},"content":".verseblock \u003e .title,"},{"lineNumber":66,"author":{"gitId":"-"},"content":".videoblock \u003e .title,"},{"lineNumber":67,"author":{"gitId":"-"},"content":".dlist \u003e .title,"},{"lineNumber":68,"author":{"gitId":"-"},"content":".olist \u003e .title,"},{"lineNumber":69,"author":{"gitId":"-"},"content":".ulist \u003e .title,"},{"lineNumber":70,"author":{"gitId":"-"},"content":".qlist \u003e .title,"},{"lineNumber":71,"author":{"gitId":"-"},"content":".hdlist \u003e .title {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    color: rgb(197, 90, 17);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"@media screen {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    #footer {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        background-color: #f6f6f6;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        border-top: 1px #d2d2d2 solid;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        border-bottom: 1px #d2d2d2 solid;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        font-family: \"Open Sans\", \"DejaVu Sans\", sans-serif;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    #footer-text {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        color: #595959;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        line-height: 1;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"/* Utilities */"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":".container {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    width: 100%;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    max-width: 62.5rem;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    margin-left: auto;"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    margin-right: auto;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"/* Colors */"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":".bg-light {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    background-color: #f8f9fa;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":".bg-lighter {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    background-color: #fbfbfb;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"}"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"/* Navbar */"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":".navbar {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    display: flex;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    flex-wrap: nowrap;"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    justify-content: center;"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    font-family: \"Open Sans\", \"DejaVu Sans\", sans-serif;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    font-size: 1rem;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    padding: 0px 1rem;"},{"lineNumber":118,"author":{"gitId":"-"},"content":"}"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":".navbar-lg {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    font-size: 1.3rem;"},{"lineNumber":122,"author":{"gitId":"-"},"content":"}"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":".navbar-light {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    border-bottom: 1px #d2d2d2 solid;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"}"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":".navbar a {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    text-decoration: none;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"}"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":".navbar-light a {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    color: #595959;"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":".navbar-light a:hover,"},{"lineNumber":137,"author":{"gitId":"-"},"content":".navbar-light a:focus {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    color: #000000;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"}"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":".navbar a.active,"},{"lineNumber":142,"author":{"gitId":"-"},"content":".navbar a.active:hover,"},{"lineNumber":143,"author":{"gitId":"-"},"content":".navbar a.active:focus {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    font-weight: bold;"},{"lineNumber":145,"author":{"gitId":"-"},"content":"}"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":".navbar-light a.active,"},{"lineNumber":148,"author":{"gitId":"-"},"content":".navbar-light a.active:hover,"},{"lineNumber":149,"author":{"gitId":"-"},"content":".navbar-light a.active:focus {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    color: #000000;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"}"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":".navbar-light .nav-link {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    border-bottom: 2px transparent solid;"},{"lineNumber":155,"author":{"gitId":"-"},"content":"}"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":".navbar-light .nav-link.active {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    border-bottom: 2px #e46c0a solid;"},{"lineNumber":159,"author":{"gitId":"-"},"content":"}"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":".navbar-lg .nav-link.active {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    border-bottom: 0;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"}"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":".navbar \u003e .container {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    display: flex;"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    flex-wrap: wrap;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    justify-content: center;"},{"lineNumber":169,"author":{"gitId":"-"},"content":"}"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":".navbar-brand {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    display: inline-block;"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    margin-right: 1rem;"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    padding: 0.8125rem 0rem;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    padding-left: 0.9375rem;"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    font-size: 1.25rem;"},{"lineNumber":177,"author":{"gitId":"-"},"content":"}"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":".navbar-brand img {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    height: 1.4rem;"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    margin: 0rem 0.4rem;"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    padding: 0;"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    vertical-align: middle;"},{"lineNumber":184,"author":{"gitId":"-"},"content":"}"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":".navbar-lg .navbar-brand {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    font-size: 1.7rem;"},{"lineNumber":188,"author":{"gitId":"-"},"content":"}"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":".navbar-lg .navbar-brand img {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    height: 2.3rem;"},{"lineNumber":192,"author":{"gitId":"-"},"content":"}"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":".navbar-nav {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    display: flex;"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    flex-wrap: wrap;"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    flex-grow: 1;"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    align-items: center;"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    margin: 0px;"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    padding: 0px;"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    list-style: none;"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    line-height: inherit;"},{"lineNumber":203,"author":{"gitId":"-"},"content":"}"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":".nav-link {"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    display: block;"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    margin: 0px;"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    border: 0px;"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    padding: 1rem 1rem;"},{"lineNumber":210,"author":{"gitId":"-"},"content":"}"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"/* Do not display site header on print mediums */"},{"lineNumber":213,"author":{"gitId":"-"},"content":"@media print {"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    #seedu-header {"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        display: none;"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"    #site-header {"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        display: none;"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":7,"-":214}},{"path":"docs/team/gerhean.adoc","fileType":"adoc","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"\u003d Chan Ger Hean - Project Portfolio"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":":site-section: AboutUs"},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":":imagesDir: ../images"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":":stylesDir: ../stylesheets"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":":prURL: https://github.com/AY1920S2-CS2103T-F10-2/main/pull/"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":":ugURL: https://ay1920s2-cs2103t-f10-2.github.io/main/UserGuide.html"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":":dgURL: https://ay1920s2-cs2103t-f10-2.github.io/main/DeveloperGuide.html"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"\u003d\u003d PROJECT: Internship Diary"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"---"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"\u003d\u003d Overview"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"Internship Diary is a desktop-based internship application tracking software. The user interacts with it using a CLI, and it has a GUI created with JavaFX."},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"The fact that the graduation requirements for Computer Science is at least 6 months of internship continuously haunts"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"the minds of every Computer Science student yet to complete this requirement. In order to aid in reducing the stress"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"of such students, we came up with the idea of the Internship Diary."},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"* *Major enhancement*: Added *the ability to sort internship applications*."},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"(PR link:{prURL}71[#71], link:{prURL}113[#113], link:{prURL}199[#199])"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"** What it does: Sorts internship applications by field."},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"** Justification: This feature improves the product significantly as users can better manage their internship application list."},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"This is a basic feature which every organizer app need to have."},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"** **Highlights:** This enhancement was not very hard to implement, but a lot of effort went into thinking about how"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"to make it more extendable."},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"** **What could be improved:** CliSyntax should have been refactored into an Enum. This would have allowed for"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"a very simple switch statement implementation."},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"* *Minor enhancement*: Added CommandBox history."},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"(PR link:{prURL}101[#101])"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"** What it does: Users can navigate to previous commands using up and down keys."},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"** Justification: Allows users to access similar past commands."},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"Also speeds up testing considerably."},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"** **Highlights:** The motivation of this enhancement was originally to make manual testing much simpler. At first the command history"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"was done directly on the CommandBox class, but I ended up abstracting the code into its own class. I also spent some time"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"on deciding the data structure to store the command history, but i realised that a lot of my worries was over constant time"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"performance differences, so I simply used the data structure (Linked List) which was already implemented in Java default libraries with"},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"all the functionality I needed."},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"* *Minor enhancement*: Added display of what the current list is sorted or filtered by."},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"(PR link:{prURL}114[#114]])"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"** Justification: This feature is a nice visual indication as to what a list is sorted or filtered by."},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"** **Highlights:** Thought very long about how to best pass the description of the comparator or predicate without"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"adding too many new methods. In the end I just settled on overriding the `toString` method, directly or by using a wrapper class."},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"Although it feels very crude, but it is simple and easy to extend to future commands which may involve changing the"},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"Comparator or Predicate."},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":"* *Minor enhancement*: Added DateTimeUtil to better parse dates."},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":"(PR link:{prURL}104[#104])"},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":"** What it does: Allows application to parse date inputs formatted in different formats."},{"lineNumber":55,"author":{"gitId":"gerhean"},"content":"** Justification: Gives users more freedom as to how they want to enter dates."},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":"* *Code contributed*:"},{"lineNumber":58,"author":{"gitId":"gerhean"},"content":"https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#\u003dundefined\u0026search\u003dgerhean[tP Code Dashboard]"},{"lineNumber":59,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":"* *Other contributions*:"},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":62,"author":{"gitId":"gerhean"},"content":"** Project management:"},{"lineNumber":63,"author":{"gitId":"gerhean"},"content":"*** Standardised the Intellij IDEA code formatter, in order to make the code base more uniform and to meet the checkstyle requirements (PR link:{prURL}221[#221])."},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":"** Review/mentoring contributions:"},{"lineNumber":66,"author":{"gitId":"gerhean"},"content":"*** Was the main technical adviser, and suggested implementation methods for several features."},{"lineNumber":67,"author":{"gitId":"gerhean"},"content":"(PR link:{prURL}82[#82], link:{prURL}118[#118], link:{prURL}216[#216])"},{"lineNumber":68,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":69,"author":{"gitId":"gerhean"},"content":"** Enhancements to existing features:"},{"lineNumber":70,"author":{"gitId":"gerhean"},"content":"*** Prettified the help window."},{"lineNumber":71,"author":{"gitId":"gerhean"},"content":"(PR link:{prURL}73[#73])"},{"lineNumber":72,"author":{"gitId":"gerhean"},"content":"*** Allowed certain prefixes to be optional."},{"lineNumber":73,"author":{"gitId":"gerhean"},"content":"(PR link:{prURL}84[#84])"},{"lineNumber":74,"author":{"gitId":"gerhean"},"content":"*** Added confirmation prompt for clear command."},{"lineNumber":75,"author":{"gitId":"gerhean"},"content":"(PR link:{prURL}98[#98])"},{"lineNumber":76,"author":{"gitId":"gerhean"},"content":"*** Implemented Enums for Listener System."},{"lineNumber":77,"author":{"gitId":"gerhean"},"content":"(PR link:{prURL}125[#125])"},{"lineNumber":78,"author":{"gitId":"gerhean"},"content":"*** Change Implementation of DisplayInternshipDetails to Listener System."},{"lineNumber":79,"author":{"gitId":"gerhean"},"content":"(PR link:{prURL}198[#198])"},{"lineNumber":80,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":81,"author":{"gitId":"gerhean"},"content":"** Helped with refactoring of Internship Diary from Address Book by updating the storage classes"},{"lineNumber":82,"author":{"gitId":"gerhean"},"content":"(PR link:{prURL}33[#33], link:{prURL}50[#50])"},{"lineNumber":83,"author":{"gitId":"gerhean"},"content":"and updating DG diagrams and text."},{"lineNumber":84,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":85,"author":{"gitId":"gerhean"},"content":"** Community:"},{"lineNumber":86,"author":{"gitId":"gerhean"},"content":"*** Contributed to forum discussions (examples:"},{"lineNumber":87,"author":{"gitId":"gerhean"},"content":"https://github.com/nus-cs2103-AY1920S2/forum/issues/74[1]"},{"lineNumber":88,"author":{"gitId":"gerhean"},"content":")"},{"lineNumber":89,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":90,"author":{"gitId":"gerhean"},"content":"** Contributions to team-based tasks :"},{"lineNumber":91,"author":{"gitId":"gerhean"},"content":"*** Renamed project folder from `address` to `diary`."},{"lineNumber":92,"author":{"gitId":"gerhean"},"content":"*** Set up GitHub, Travis CI, Coveralls and Codacy"},{"lineNumber":93,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":94,"author":{"gitId":"gerhean"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":95,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":96,"author":{"gitId":"gerhean"},"content":"|\u003d\u003d\u003d"},{"lineNumber":97,"author":{"gitId":"gerhean"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":98,"author":{"gitId":"gerhean"},"content":"|\u003d\u003d\u003d"},{"lineNumber":99,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":100,"author":{"gitId":"gerhean"},"content":"link:{ugURL}#sorting-internship-companies-by-field-code-sort-code[4.11. Sorting internship companies by field: sort]"},{"lineNumber":101,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":102,"author":{"gitId":"gerhean"},"content":"link:{ugURL}#fields[3.2. Structure of internship application]"},{"lineNumber":103,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":104,"author":{"gitId":"gerhean"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":105,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":106,"author":{"gitId":"gerhean"},"content":"|\u003d\u003d\u003d"},{"lineNumber":107,"author":{"gitId":"gerhean"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":108,"author":{"gitId":"gerhean"},"content":"|\u003d\u003d\u003d"},{"lineNumber":109,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":110,"author":{"gitId":"gerhean"},"content":"link:{dgURL}#sort-command[4.1. Sort command]"},{"lineNumber":111,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":112,"author":{"gitId":"gerhean"},"content":"link:{dgURL}#clear-command[4.2. Clear command]"},{"lineNumber":113,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":114,"author":{"gitId":"gerhean"},"content":"link:{dgURL}#command-history[4.3. Command History]"},{"lineNumber":115,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":116,"author":{"gitId":"gerhean"},"content":"link:{dgURL}#use-cases[Use case: UC11 - Sort Internship Application]"},{"lineNumber":117,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":118,"author":{"gitId":"gerhean"},"content":"link:{dgURL}#use-cases[Use case: UC17 - Clear Command]"},{"lineNumber":119,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":120,"author":{"gitId":"gerhean"},"content":"link:{dgURL}#sorting-the-list-of-internship-applications[G.13. Sorting the list of internship applications]"}],"authorContributionMap":{"gerhean":120}},{"path":"docs/tutorials/AddRemark.adoc","fileType":"adoc","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003d Tutorial - Adding a new Command"},{"lineNumber":2,"author":{"gitId":"-"},"content":":toc: macro"},{"lineNumber":3,"author":{"gitId":"-"},"content":":site-section: DeveloperGuide"},{"lineNumber":4,"author":{"gitId":"-"},"content":":imagesDir: ../images/add-remark"},{"lineNumber":5,"author":{"gitId":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":6,"author":{"gitId":"-"},"content":":xrefstyle: full"},{"lineNumber":7,"author":{"gitId":"-"},"content":"ifdef::env-github[]"},{"lineNumber":8,"author":{"gitId":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":9,"author":{"gitId":"-"},"content":":note-caption: :information_source:"},{"lineNumber":10,"author":{"gitId":"-"},"content":":warning-caption: :warning:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"endif::[]"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"toc::[]"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required."},{"lineNumber":20,"author":{"gitId":"-"},"content":"The command should have the format of `remark INDEX r/REMARK`."},{"lineNumber":21,"author":{"gitId":"-"},"content":"An example of the command is `remark 2 r/Likes baseball`."},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"\u003d\u003d Create a new `remark` command"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class."},{"lineNumber":28,"author":{"gitId":"-"},"content":"All the commands inherit from the abstract class `Command` which means that they must override `execute()`."},{"lineNumber":29,"author":{"gitId":"-"},"content":"Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."},{"lineNumber":34,"author":{"gitId":"-"},"content":"We accomplish that by returning a `CommandResult` with an accompanying message."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":".RemarkCommand.java"},{"lineNumber":37,"author":{"gitId":"-"},"content":"[source,java]"},{"lineNumber":38,"author":{"gitId":"-"},"content":"----"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":44,"author":{"gitId":"-"},"content":" * Changes the remark of an existing person in the address book."},{"lineNumber":45,"author":{"gitId":"-"},"content":" */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"},{"lineNumber":55,"author":{"gitId":"-"},"content":"----"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Hook `RemarkCommand` into the application"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword."},{"lineNumber":60,"author":{"gitId":"-"},"content":"Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Run the application"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`."},{"lineNumber":67,"author":{"gitId":"-"},"content":"If everything went well, you should see something like this:"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":".Output displayed"},{"lineNumber":70,"author":{"gitId":"-"},"content":"image::RemarkHello.png[]"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"\u003d\u003d Change `RemarkCommand` to throw an exception"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."},{"lineNumber":75,"author":{"gitId":"-"},"content":"Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":".The relationship between RemarkCommand and Command"},{"lineNumber":78,"author":{"gitId":"-"},"content":"image::CommandInterface.png[]"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them."},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":".RemarkCommand.java"},{"lineNumber":83,"author":{"gitId":"-"},"content":"[source, java]"},{"lineNumber":84,"author":{"gitId":"-"},"content":"----"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""},{"lineNumber":86,"author":{"gitId":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":87,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\""},{"lineNumber":88,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":89,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\""},{"lineNumber":90,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":91,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":"----"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"\u003d\u003d Enhancing `RemarkCommand`"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"Let\u0027s change `RemarkCommand` to  parse input from the user."},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Make the command accept parameters"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."},{"lineNumber":108,"author":{"gitId":"-"},"content":"While we are at it, let\u0027s change the error message to echo the values."},{"lineNumber":109,"author":{"gitId":"-"},"content":"While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"[source,java]"},{"lineNumber":112,"author":{"gitId":"-"},"content":"----"},{"lineNumber":113,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":114,"author":{"gitId":"-"},"content":"//..."},{"lineNumber":115,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    //..."},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    private final String remark;"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit the remark"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * @param remark of the person to be updated to"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":152,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}"},{"lineNumber":155,"author":{"gitId":"-"},"content":"----"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Parse user input"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package."},{"lineNumber":164,"author":{"gitId":"-"},"content":"The class must extend the `Parser` interface."},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":".The relationship between Parser and RemarkCommandParser"},{"lineNumber":167,"author":{"gitId":"-"},"content":"image::ParserInterface.png[]"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."},{"lineNumber":170,"author":{"gitId":"-"},"content":"Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"[source, java]"},{"lineNumber":173,"author":{"gitId":"-"},"content":".ArgumentTokenizer.java"},{"lineNumber":174,"author":{"gitId":"-"},"content":"----"},{"lineNumber":175,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":176,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"},{"lineNumber":177,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the"},{"lineNumber":178,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string."},{"lineNumber":179,"author":{"gitId":"-"},"content":" *"},{"lineNumber":180,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:"},{"lineNumber":181,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":182,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with"},{"lineNumber":183,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their"},{"lineNumber":184,"author":{"gitId":"-"},"content":" * arguments"},{"lineNumber":185,"author":{"gitId":"-"},"content":" */"},{"lineNumber":186,"author":{"gitId":"-"},"content":"----"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."},{"lineNumber":189,"author":{"gitId":"-"},"content":"Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."},{"lineNumber":190,"author":{"gitId":"-"},"content":"Let\u0027s look through `ArgumentMultimap` :"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"[source, java]"},{"lineNumber":193,"author":{"gitId":"-"},"content":".ArgumentMultimap.java"},{"lineNumber":194,"author":{"gitId":"-"},"content":"----"},{"lineNumber":195,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":196,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}."},{"lineNumber":197,"author":{"gitId":"-"},"content":" */"},{"lineNumber":198,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));"},{"lineNumber":202,"author":{"gitId":"-"},"content":"}"},{"lineNumber":203,"author":{"gitId":"-"},"content":"----"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark."},{"lineNumber":206,"author":{"gitId":"-"},"content":"But what about the Index? Taking a quick peek at existing an `Command`..."},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"[source, java]"},{"lineNumber":209,"author":{"gitId":"-"},"content":".DeleteCommandParser.java"},{"lineNumber":210,"author":{"gitId":"-"},"content":"----"},{"lineNumber":211,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":212,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);"},{"lineNumber":213,"author":{"gitId":"-"},"content":"----"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user."},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"[source, java]"},{"lineNumber":220,"author":{"gitId":"-"},"content":".RemarkCommandParser.java"},{"lineNumber":221,"author":{"gitId":"-"},"content":"----"},{"lineNumber":222,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    requireNonNull(args);"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"    Index index;"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    try {"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":232,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}"},{"lineNumber":239,"author":{"gitId":"-"},"content":"----"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"},{"lineNumber":242,"author":{"gitId":"-"},"content":""},{"lineNumber":243,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"\u003d\u003d Add `Remark` to the model"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":"Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."},{"lineNumber":248,"author":{"gitId":"-"},"content":"We achieve that by working with the `Person` model."},{"lineNumber":249,"author":{"gitId":"-"},"content":"Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person\u0027s name)."},{"lineNumber":250,"author":{"gitId":"-"},"content":"That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Add a new `Remark` class"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."},{"lineNumber":257,"author":{"gitId":"-"},"content":"Note how `Remark` has no constrains and thus does not require input validation."},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Make use of `Remark`"},{"lineNumber":260,"author":{"gitId":"-"},"content":""},{"lineNumber":261,"author":{"gitId":"-"},"content":"Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."},{"lineNumber":262,"author":{"gitId":"-"},"content":"These should be relatively simple changes."},{"lineNumber":263,"author":{"gitId":"-"},"content":""},{"lineNumber":264,"author":{"gitId":"-"},"content":"\u003d\u003d Add a placeholder element for remark to the UI"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each person."},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"Simply add"},{"lineNumber":269,"author":{"gitId":"-"},"content":"[source, java]"},{"lineNumber":270,"author":{"gitId":"-"},"content":".PersonCard.java"},{"lineNumber":271,"author":{"gitId":"-"},"content":"```"},{"lineNumber":272,"author":{"gitId":"-"},"content":"@FXML"},{"lineNumber":273,"author":{"gitId":"-"},"content":"private Label remark;"},{"lineNumber":274,"author":{"gitId":"-"},"content":"```"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"gerhean"},"content":"to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`seedu.diary.ui.PersonCard`]."},{"lineNumber":277,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."},{"lineNumber":278,"author":{"gitId":"-"},"content":"It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."},{"lineNumber":279,"author":{"gitId":"-"},"content":""},{"lineNumber":280,"author":{"gitId":"-"},"content":"Then insert"},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"-"},"content":"```"},{"lineNumber":283,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"},{"lineNumber":284,"author":{"gitId":"-"},"content":"```"},{"lineNumber":285,"author":{"gitId":"-"},"content":"into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/PersonListCard.fxml`]."},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":"That\u0027s it! Fire up the application again and you should see something like this:"},{"lineNumber":288,"author":{"gitId":"-"},"content":""},{"lineNumber":289,"author":{"gitId":"-"},"content":".$remark shows up in each entry"},{"lineNumber":290,"author":{"gitId":"-"},"content":"image::$Remark.png[]"},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"-"},"content":"\u003d\u003d Modify `Person` to support a `Remark` field"},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"},{"lineNumber":295,"author":{"gitId":"-"},"content":""},{"lineNumber":296,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Modify `Person`"},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`."},{"lineNumber":299,"author":{"gitId":"-"},"content":"We will also need to define new fields and accessors accordingly to store our new addition."},{"lineNumber":300,"author":{"gitId":"-"},"content":""},{"lineNumber":301,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Update other usages of `Person`"},{"lineNumber":302,"author":{"gitId":"-"},"content":""},{"lineNumber":303,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"},{"lineNumber":304,"author":{"gitId":"-"},"content":""},{"lineNumber":305,"author":{"gitId":"-"},"content":"TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."},{"lineNumber":306,"author":{"gitId":"-"},"content":""},{"lineNumber":307,"author":{"gitId":"-"},"content":"Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"},{"lineNumber":308,"author":{"gitId":"-"},"content":""},{"lineNumber":309,"author":{"gitId":"-"},"content":"\u003d\u003d Updating Storage"},{"lineNumber":310,"author":{"gitId":"-"},"content":""},{"lineNumber":311,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library -- Jackson."},{"lineNumber":312,"author":{"gitId":"-"},"content":"Let\u0027s update `JsonAdaptedPerson` to work with our new `Person`!"},{"lineNumber":313,"author":{"gitId":"-"},"content":""},{"lineNumber":314,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well."},{"lineNumber":315,"author":{"gitId":"-"},"content":""},{"lineNumber":316,"author":{"gitId":"-"},"content":"WARNING: You must delete AddressBook\u0027s storage file located at `/data/addressbook.json` before running it!"},{"lineNumber":317,"author":{"gitId":"-"},"content":"Not doing so will cause AddressBook to default to an empty address book!"},{"lineNumber":318,"author":{"gitId":"-"},"content":""},{"lineNumber":319,"author":{"gitId":"-"},"content":"Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."},{"lineNumber":320,"author":{"gitId":"-"},"content":""},{"lineNumber":321,"author":{"gitId":"-"},"content":"\u003d\u003d Finalizing the UI"},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."},{"lineNumber":324,"author":{"gitId":"-"},"content":""},{"lineNumber":325,"author":{"gitId":"-"},"content":"Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"},{"lineNumber":326,"author":{"gitId":"-"},"content":"[source, java]"},{"lineNumber":327,"author":{"gitId":"-"},"content":".PersonCard.java"},{"lineNumber":328,"author":{"gitId":"-"},"content":"----"},{"lineNumber":329,"author":{"gitId":"-"},"content":"public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":330,"author":{"gitId":"-"},"content":"    //..."},{"lineNumber":331,"author":{"gitId":"-"},"content":"    remark.setText(person.getRemark().value);"},{"lineNumber":332,"author":{"gitId":"-"},"content":"}"},{"lineNumber":333,"author":{"gitId":"-"},"content":"----"},{"lineNumber":334,"author":{"gitId":"-"},"content":""},{"lineNumber":335,"author":{"gitId":"-"},"content":".The remark label is bound properly!"},{"lineNumber":336,"author":{"gitId":"-"},"content":"image::RemarkBound.png[]"},{"lineNumber":337,"author":{"gitId":"-"},"content":""},{"lineNumber":338,"author":{"gitId":"-"},"content":"\u003d\u003d Putting everything together"},{"lineNumber":339,"author":{"gitId":"-"},"content":""},{"lineNumber":340,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."},{"lineNumber":341,"author":{"gitId":"-"},"content":"However, this is expected behavior as we have never changed `RemarkCommand` at all!"},{"lineNumber":342,"author":{"gitId":"-"},"content":""},{"lineNumber":343,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"},{"lineNumber":344,"author":{"gitId":"-"},"content":""},{"lineNumber":345,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`."},{"lineNumber":346,"author":{"gitId":"-"},"content":"Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and save it with `Model#setPerson()`."},{"lineNumber":347,"author":{"gitId":"-"},"content":""},{"lineNumber":348,"author":{"gitId":"-"},"content":"[source, java]"},{"lineNumber":349,"author":{"gitId":"-"},"content":".RemarkCommand.java"},{"lineNumber":350,"author":{"gitId":"-"},"content":"----"},{"lineNumber":351,"author":{"gitId":"-"},"content":"//..."},{"lineNumber":352,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"},{"lineNumber":354,"author":{"gitId":"-"},"content":"//..."},{"lineNumber":355,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":356,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":357,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":358,"author":{"gitId":"-"},"content":""},{"lineNumber":359,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":360,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":361,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":362,"author":{"gitId":"-"},"content":""},{"lineNumber":363,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"},{"lineNumber":365,"author":{"gitId":"-"},"content":"                personToEdit.getAddress(), remark, personToEdit.getTags());"},{"lineNumber":366,"author":{"gitId":"-"},"content":""},{"lineNumber":367,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);"},{"lineNumber":368,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":369,"author":{"gitId":"-"},"content":""},{"lineNumber":370,"author":{"gitId":"-"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));"},{"lineNumber":371,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":372,"author":{"gitId":"-"},"content":""},{"lineNumber":373,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":374,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether the remark is added to or removed from"},{"lineNumber":375,"author":{"gitId":"-"},"content":"     * {@code personToEdit}."},{"lineNumber":376,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":377,"author":{"gitId":"-"},"content":"    private String generateSuccessMessage(Person personToEdit) {"},{"lineNumber":378,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"},{"lineNumber":379,"author":{"gitId":"-"},"content":"        return String.format(message, personToEdit);"},{"lineNumber":380,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":381,"author":{"gitId":"-"},"content":"----"},{"lineNumber":382,"author":{"gitId":"-"},"content":""},{"lineNumber":383,"author":{"gitId":"-"},"content":"Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."},{"lineNumber":384,"author":{"gitId":"-"},"content":""},{"lineNumber":385,"author":{"gitId":"-"},"content":".Congratulations!"},{"lineNumber":386,"author":{"gitId":"-"},"content":"image::RemarkComplete.png[]"},{"lineNumber":387,"author":{"gitId":"-"},"content":""},{"lineNumber":388,"author":{"gitId":"-"},"content":"\u003d\u003d Writing tests"},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"},{"lineNumber":391,"author":{"gitId":"-"},"content":"code bases where a change might lead to unintended behavior."},{"lineNumber":392,"author":{"gitId":"-"},"content":""},{"lineNumber":393,"author":{"gitId":"-"},"content":"Let\u0027s verify the correctness of our code by writing some tests!"},{"lineNumber":394,"author":{"gitId":"-"},"content":""},{"lineNumber":395,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Automagically generating tests"},{"lineNumber":396,"author":{"gitId":"-"},"content":""},{"lineNumber":397,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."},{"lineNumber":398,"author":{"gitId":"-"},"content":""},{"lineNumber":399,"author":{"gitId":"-"},"content":"The convention for test names is _``methodName_testScenario_expectedResult``_."},{"lineNumber":400,"author":{"gitId":"-"},"content":"An example would be `execute_filteredList_success`."},{"lineNumber":401,"author":{"gitId":"-"},"content":""},{"lineNumber":402,"author":{"gitId":"-"},"content":"Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."},{"lineNumber":403,"author":{"gitId":"-"},"content":"On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."},{"lineNumber":404,"author":{"gitId":"-"},"content":""},{"lineNumber":405,"author":{"gitId":"-"},"content":".Using the context menu to jump to tests"},{"lineNumber":406,"author":{"gitId":"-"},"content":"image::ContextMenu.png[, 1223px, 267px]"},{"lineNumber":407,"author":{"gitId":"-"},"content":""},{"lineNumber":408,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method."},{"lineNumber":409,"author":{"gitId":"-"},"content":""},{"lineNumber":410,"author":{"gitId":"-"},"content":".Creating a test for `execute`."},{"lineNumber":411,"author":{"gitId":"-"},"content":"image::CreateTest.png[, 664px,751px]"},{"lineNumber":412,"author":{"gitId":"-"},"content":""},{"lineNumber":413,"author":{"gitId":"-"},"content":"Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."},{"lineNumber":414,"author":{"gitId":"-"},"content":""},{"lineNumber":415,"author":{"gitId":"-"},"content":"Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."},{"lineNumber":416,"author":{"gitId":"-"},"content":"In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."},{"lineNumber":417,"author":{"gitId":"-"},"content":""},{"lineNumber":418,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like"},{"lineNumber":419,"author":{"gitId":"-"},"content":"link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."},{"lineNumber":420,"author":{"gitId":"-"},"content":""},{"lineNumber":421,"author":{"gitId":"-"},"content":"\u003d\u003d Conclusion"},{"lineNumber":422,"author":{"gitId":"-"},"content":""},{"lineNumber":423,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook."},{"lineNumber":424,"author":{"gitId":"-"},"content":""},{"lineNumber":425,"author":{"gitId":"-"},"content":"//Link to more discussions"}],"authorContributionMap":{"gerhean":4,"-":421}},{"path":"docs/tutorials/RemovingFields.adoc","fileType":"adoc","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003d Tutorial - Removing a field from an entity"},{"lineNumber":2,"author":{"gitId":"-"},"content":":site-section: DeveloperGuide"},{"lineNumber":3,"author":{"gitId":"-"},"content":":imagesDir: ../images/remove"},{"lineNumber":4,"author":{"gitId":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":5,"author":{"gitId":"-"},"content":":xrefstyle: full"},{"lineNumber":6,"author":{"gitId":"-"},"content":"ifdef::env-github[]"},{"lineNumber":7,"author":{"gitId":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":8,"author":{"gitId":"-"},"content":":note-caption: :information_source:"},{"lineNumber":9,"author":{"gitId":"-"},"content":":warning-caption: :warning:"},{"lineNumber":10,"author":{"gitId":"-"},"content":"endif::[]"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"[quote, Antoine de Saint-Exupery]"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":16,"author":{"gitId":"-"},"content":"When working on Address Book, you will most likely find that some features and fields that are no longer necessary."},{"lineNumber":17,"author":{"gitId":"-"},"content":"In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"In this tutorial, we\u0027ll do exactly just that and remove the `diary` field from `Person`."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"\u003d\u003d Safely deleting `Address`"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."},{"lineNumber":24,"author":{"gitId":"-"},"content":"Let\u0027s try to use it as much as we can."},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Assisted refactoring"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"The `diary` field in `Person` is actually an instance of the `seedu.address.model.person.Address` class."},{"lineNumber":28,"author":{"gitId":"-"},"content":"Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."},{"lineNumber":29,"author":{"gitId":"-"},"content":"This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."},{"lineNumber":30,"author":{"gitId":"-"},"content":"Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":".Usages detected"},{"lineNumber":33,"author":{"gitId":"-"},"content":"image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."},{"lineNumber":36,"author":{"gitId":"-"},"content":"These conflicts describe locations in which the `Address` class is used."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":".List of conflicts"},{"lineNumber":39,"author":{"gitId":"-"},"content":"image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"Remove usages of `Address` by performing ``Safe Delete``s on each entry."},{"lineNumber":42,"author":{"gitId":"-"},"content":"You will need to exercise discretion when removing usages of `Address`."},{"lineNumber":43,"author":{"gitId":"-"},"content":"Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."},{"lineNumber":44,"author":{"gitId":"-"},"content":"Other usages like in `EditPersonDescriptor` may require more careful inspection."},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":". Safe delete the field `diary` in `EditPersonDescriptor`"},{"lineNumber":49,"author":{"gitId":"-"},"content":". Select `Yes` when prompted to remove getters and setters"},{"lineNumber":50,"author":{"gitId":"-"},"content":". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":". Remove the usages of `diary` and select `Do refactor` when you are done."},{"lineNumber":52,"author":{"gitId":"-"},"content":"+"},{"lineNumber":53,"author":{"gitId":"-"},"content":"TIP: Removing usages may result in errors."},{"lineNumber":54,"author":{"gitId":"-"},"content":"Exercise discretion and fix them."},{"lineNumber":55,"author":{"gitId":"gerhean"},"content":"For example, removing the `diary` field from the `Person` class will require you to modify its constructor."},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":". Repeat the steps for the remaining usages of `Address`"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"After you are done, verify that the application still works by compiling and running it again."},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Manual refactoring"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":"You can find them by searching for instances of the word `diary` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"Places of interest to look out for would be resources used by the application."},{"lineNumber":67,"author":{"gitId":"-"},"content":"`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."},{"lineNumber":68,"author":{"gitId":"-"},"content":"For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"image::$address.png[width\u003d1090px, height\u003d890px]"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":".PersonCard.java"},{"lineNumber":75,"author":{"gitId":"-"},"content":"[source, java]"},{"lineNumber":76,"author":{"gitId":"-"},"content":"----"},{"lineNumber":77,"author":{"gitId":"-"},"content":"..."},{"lineNumber":78,"author":{"gitId":"-"},"content":"@FXML"},{"lineNumber":79,"author":{"gitId":"-"},"content":"private Label address;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"..."},{"lineNumber":81,"author":{"gitId":"-"},"content":"----"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":".PersonCard.fxml"},{"lineNumber":84,"author":{"gitId":"-"},"content":"[source, xml]"},{"lineNumber":85,"author":{"gitId":"-"},"content":"----"},{"lineNumber":86,"author":{"gitId":"-"},"content":"..."},{"lineNumber":87,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"},{"lineNumber":88,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"},{"lineNumber":89,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"},{"lineNumber":90,"author":{"gitId":"-"},"content":"..."},{"lineNumber":91,"author":{"gitId":"-"},"content":"----"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"After removing the `Label`, we can proceed to formally test our code."},{"lineNumber":94,"author":{"gitId":"-"},"content":"If everything went well, you should have most of your tests pass."},{"lineNumber":95,"author":{"gitId":"-"},"content":"Fix any remaining errors until the tests all pass."},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"\u003d\u003d Tidying up"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"At this point, your application is working as intended and all your tests are passing."},{"lineNumber":100,"author":{"gitId":"-"},"content":"What\u0027s left to do is to clean up references to `Address` in test data and documentation."},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"In `src/test/data/`, data meant for testing purposes are stored."},{"lineNumber":103,"author":{"gitId":"gerhean"},"content":"While keeping the `diary` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":".invalidPersonAddressBook.json"},{"lineNumber":106,"author":{"gitId":"-"},"content":"[source, json]"},{"lineNumber":107,"author":{"gitId":"-"},"content":"```"},{"lineNumber":108,"author":{"gitId":"-"},"content":"{"},{"lineNumber":109,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","},{"lineNumber":111,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":112,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":113,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":114,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":115,"author":{"gitId":"-"},"content":"}"},{"lineNumber":116,"author":{"gitId":"-"},"content":"```"},{"lineNumber":117,"author":{"gitId":"gerhean"},"content":"You can go through each individual `json` file and manually remove the `diary` field."}],"authorContributionMap":{"gerhean":8,"-":109}},{"path":"src/main/java/seedu/diary/AppParameters.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Represents the parsed command-line parameters given to the application."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AppParameters {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Path configPath;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Path getConfigPath() {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        return configPath;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setConfigPath(Path configPath) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.configPath \u003d configPath;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Parses the application command-line parameters."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static AppParameters parse(Application.Parameters parameters) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d new AppParameters();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        String configPathParameter \u003d namedParameters.get(\"config\");"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            configPathParameter \u003d null;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return appParameters;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (!(other instanceof AppParameters)) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        AppParameters otherAppParameters \u003d (AppParameters) other;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return configPath.hashCode();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":4,"-":61}},{"path":"src/main/java/seedu/diary/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * The main entry point to the application."},{"lineNumber":7,"author":{"gitId":"-"},"content":" *"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * This is a workaround for the following error when MainApp is made the"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * entry point of the application:"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Error: JavaFX runtime components are missing, and are required to run this application"},{"lineNumber":12,"author":{"gitId":"-"},"content":" *"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The reason is that MainApp extends Application. In that case, the"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * LauncherHelper will check for the javafx.graphics module to be present"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * find the javafx.graphics module, and so the launch is aborted."},{"lineNumber":17,"author":{"gitId":"-"},"content":" *"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * By having a separate main class (Main) that doesn\u0027t extend Application"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * to be the entry point of the application, we avoid this issue."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class Main {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Application.launch(MainApp.class, args);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":1,"-":24}},{"path":"src/main/java/seedu/diary/MainApp.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.Config;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.Version;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.exceptions.DataConversionException;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.util.ConfigUtil;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.util.StringUtil;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.Logic;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.LogicManager;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.InternshipDiary;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ModelManager;"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ReadOnlyInternshipDiary;"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ReadOnlyUserPrefs;"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.UserPrefs;"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.util.SampleDataUtil;"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"import seedu.diary.storage.InternshipDiaryStorage;"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"import seedu.diary.storage.JsonInternshipDiaryStorage;"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"import seedu.diary.storage.JsonUserPrefsStorage;"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"import seedu.diary.storage.Storage;"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"import seedu.diary.storage.StorageManager;"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"import seedu.diary.storage.UserPrefsStorage;"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"import seedu.diary.ui.Ui;"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"import seedu.diary.ui.UiManager;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitId":"-"},"content":" * Runs the application."},{"lineNumber":37,"author":{"gitId":"-"},"content":" */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(1, 4, 0, true);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Ui ui;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Logic logic;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Storage storage;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Model model;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    protected Config config;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing InternshipDiary ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        super.init();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":"        InternshipDiaryStorage internshipDiaryStorage \u003d"},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":"            new JsonInternshipDiaryStorage(userPrefs.getInternshipDiaryFilePath());"},{"lineNumber":62,"author":{"gitId":"gerhean"},"content":"        storage \u003d new StorageManager(internshipDiaryStorage, userPrefsStorage);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        initLogging(config);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s internship diary and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * The data from the sample internship diary will be used instead if {@code storage}\u0027s internship diary is not"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * found, or an empty internship diary will be used instead if errors occur when reading {@code storage}\u0027s"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * internship diary."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":80,"author":{"gitId":"gerhean"},"content":"        Optional\u003cReadOnlyInternshipDiary\u003e internshipDiaryOptional;"},{"lineNumber":81,"author":{"gitId":"gerhean"},"content":"        ReadOnlyInternshipDiary initialData;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":83,"author":{"gitId":"gerhean"},"content":"            internshipDiaryOptional \u003d storage.readInternshipDiary();"},{"lineNumber":84,"author":{"gitId":"gerhean"},"content":"            if (!internshipDiaryOptional.isPresent()) {"},{"lineNumber":85,"author":{"gitId":"gerhean"},"content":"                logger.info(\"Data file not found. Will be starting with a sample InternshipDiary\");"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":87,"author":{"gitId":"gerhean"},"content":"            initialData \u003d internshipDiaryOptional.orElseGet(SampleDataUtil::getSampleInternshipDiary);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":89,"author":{"gitId":"gerhean"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty InternshipDiary\");"},{"lineNumber":90,"author":{"gitId":"gerhean"},"content":"            initialData \u003d new InternshipDiary();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":92,"author":{"gitId":"gerhean"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty InternshipDiary\");"},{"lineNumber":93,"author":{"gitId":"gerhean"},"content":"            initialData \u003d new InternshipDiary();"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Config initializedConfig;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":126,"author":{"gitId":"-"},"content":"                + \"Using default config properties\");"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        return initializedConfig;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * reading from the file."},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":154,"author":{"gitId":"-"},"content":"                + \"Using default user prefs\");"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty InternshipDiary\");"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"        return initializedPrefs;"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        logger.info(\"Starting InternshipDiary \" + MainApp.VERSION);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    public void stop() {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping InternshipDiary ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":39,"-":148}},{"path":"src/main/java/seedu/diary/commons/core/Config.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Config values used by the app"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Config {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return logLevel;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void setUserPrefsFilePath(Path userPrefsFilePath) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Objects.equals(logLevel, o.logLevel)"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return Objects.hash(logLevel, userPrefsFilePath);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        sb.append(\"Current log level : \" + logLevel);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":1,"-":62}},{"path":"src/main/java/seedu/diary/commons/core/GuiSettings.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.awt.Point;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.Serializable;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * A Serializable class that contains the GUI settings."},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class GuiSettings implements Serializable {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_WIDTH \u003d 740;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final double windowWidth;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final double windowHeight;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Point windowCoordinates;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public GuiSettings() {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        windowWidth \u003d DEFAULT_WIDTH;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        windowHeight \u003d DEFAULT_HEIGHT;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d null; // null represent no coordinates"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.windowWidth \u003d windowWidth;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.windowHeight \u003d windowHeight;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d new Point(xPosition, yPosition);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public double getWindowWidth() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return windowWidth;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public double getWindowHeight() {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return windowHeight;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Point getWindowCoordinates() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (!(other instanceof GuiSettings)) { //this handles null as well."},{"lineNumber":50,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        GuiSettings o \u003d (GuiSettings) other;"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return windowWidth \u003d\u003d o.windowWidth"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        sb.append(\"Width : \" + windowWidth + \"\\n\");"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        sb.append(\"Height : \" + windowHeight + \"\\n\");"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        sb.append(\"Position : \" + windowCoordinates);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":1,"-":72}},{"path":"src/main/java/seedu/diary/commons/core/LogsCenter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Configures and manages loggers and handlers, including their logging level"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class LogsCenter {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"    private static final String LOG_FILE \u003d \"internshipdiary.log\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static FileHandler fileHandler;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static ConsoleHandler consoleHandler;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * is requested again from the LogsCenter."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static void init(Config config) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a logger with the given name."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(false);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        removeHandlers(logger);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        addConsoleHandler(logger);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        addFileHandler(logger);"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Logger.getLogger(name);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (clazz \u003d\u003d null) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return Logger.getLogger(\"\");"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Creates the {@code consoleHandler} if it is null."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void addConsoleHandler(Logger logger) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (consoleHandler \u003d\u003d null) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            consoleHandler \u003d createConsoleHandler();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.addHandler(consoleHandler);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Remove all the handlers from {@code logger}."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            .forEach(logger::removeHandler);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Creates {@code fileHandler} if it is null."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static void addFileHandler(Logger logger) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            if (fileHandler \u003d\u003d null) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                fileHandler \u003d createFileHandler();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.addHandler(fileHandler);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Creates a {@code FileHandler} for the log file."},{"lineNumber":98,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * @throws IOException if there are problems opening the file."},{"lineNumber":100,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        fileHandler.setLevel(currentLogLevel);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return fileHandler;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return consoleHandler;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":3,"-":110}},{"path":"src/main/java/seedu/diary/commons/core/Messages.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX \u003d"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        \"The internship application index provided is invalid\";"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INTERNSHIP_LISTED_OVERVIEW \u003d \"%1$d internship application listed!\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INTERVIEW_DISPLAYED_INDEX \u003d"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        \"The interview index provided is invalid\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String IS_ARCHIVED \u003d \"isArchived\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":1,"-":16}},{"path":"src/main/java/seedu/diary/commons/core/Version.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents a version with major, minor and patch number"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Version implements Comparable\u003cVersion\u003e {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final int major;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final int minor;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final int patch;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final boolean isEarlyAccess;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.major \u003d major;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.minor \u003d minor;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.patch \u003d patch;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.isEarlyAccess \u003d isEarlyAccess;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public int getMajor() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return major;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public int getMinor() {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return minor;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public int getPatch() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return patch;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public boolean isEarlyAccess() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return isEarlyAccess;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Parses a version number string in the format V1.2.3."},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * @param versionString version number string"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * @return a Version object"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static Version fromString(String versionString) throws IllegalArgumentException {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        if (!versionMatcher.find()) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return new Version(Integer.parseInt(versionMatcher.group(1)),"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            Integer.parseInt(versionMatcher.group(2)),"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            Integer.parseInt(versionMatcher.group(3)),"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            versionMatcher.group(4) \u003d\u003d null ? false : true);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @JsonValue"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public int compareTo(Version other) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (major !\u003d other.major) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return major - other.major;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (minor !\u003d other.minor) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            return minor - other.minor;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (patch !\u003d other.patch) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            return patch - other.patch;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            return 0;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        if (isEarlyAccess) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            return -1;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return 1;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d null) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Version)) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        final Version other \u003d (Version) obj;"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return compareTo(other) \u003d\u003d 0;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        if (!isEarlyAccess) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            hash \u003d \"1\" + hash;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return Integer.parseInt(hash);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":2,"-":112}},{"path":"src/main/java/seedu/diary/commons/core/archival/InternshipApplicationViewType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.commons.core.archival;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an enumeration of interview application view type."},{"lineNumber":5,"author":{"gitId":"-"},"content":" * Each internship application can either be \"archived\" or \"unarchived\"."},{"lineNumber":6,"author":{"gitId":"-"},"content":" */"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public enum InternshipApplicationViewType {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    ARCHIVED, UNARCHIVED;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":1,"-":8}},{"path":"src/main/java/seedu/diary/commons/core/index/Index.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.commons.core.index;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents a zero-based or one-based index."},{"lineNumber":5,"author":{"gitId":"-"},"content":" *"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * base the other component is using for its index. However, after receiving the {@code Index}, that component can"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * convert it back to an int if the index will not be passed to a different component again."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Index {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private int zeroBasedIndex;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Index#fromOneBased(int)}."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Index(int zeroBasedIndex) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        if (zeroBasedIndex \u003c 0) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            throw new IndexOutOfBoundsException();"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.zeroBasedIndex \u003d zeroBasedIndex;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public int getZeroBased() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return zeroBasedIndex;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public int getOneBased() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return zeroBasedIndex + 1;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a zero-based index."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static Index fromZeroBased(int zeroBasedIndex) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return new Index(zeroBasedIndex);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a one-based index."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static Index fromOneBased(int oneBasedIndex) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Index(oneBasedIndex - 1);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public Index getDecrementIndex() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if ((zeroBasedIndex - 1) \u003c 0) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new IndexOutOfBoundsException();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return fromZeroBased(zeroBasedIndex - 1);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            || (other instanceof Index // instanceof handles nulls"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":1,"-":60}},{"path":"src/main/java/seedu/diary/commons/core/interviewcode/InterviewCode.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.commons.core.interviewcode;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an enumeration of interview command code. This code should be either \"add\", \"edit\", or \"delete\","},{"lineNumber":5,"author":{"gitId":"-"},"content":" * which will be used in interview command to manipulate interviews in an {@code Internship Application}."},{"lineNumber":6,"author":{"gitId":"-"},"content":" *"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * InterviewCode should come right after {@code Index} when inputting interview command."},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public enum InterviewCode {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    LIST, ADD, EDIT, DELETE;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Interview should have an add, edit or delete after index.\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Returns true is the given {@code code} is a valid {@code InterviewCode}."},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static boolean isValidCode(String code) {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String upperCaseCode \u003d code.toUpperCase();"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"        return \"ADD\".equals(upperCaseCode) || \"EDIT\".equals(upperCaseCode)"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"            || \"DELETE\".equals(upperCaseCode) || \"LIST\".equals(upperCaseCode);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":3,"-":19}},{"path":"src/main/java/seedu/diary/commons/exceptions/DataConversionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.commons.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error during conversion of data from one format to another"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class DataConversionException extends Exception {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public DataConversionException(Exception cause) {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(cause);"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":1,"-":10}},{"path":"src/main/java/seedu/diary/commons/exceptions/IllegalValueException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.commons.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that some given data does not fulfill some constraints."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class IllegalValueException extends Exception {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)"},{"lineNumber":9,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message) {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @param cause of the main exception"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message, Throwable cause) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        super(message, cause);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":1,"-":20}},{"path":"src/main/java/seedu/diary/commons/util/AppUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import seedu.diary.MainApp;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A container for App specific utility functions"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class AppUtil {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static Image getImage(String imagePath) {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        requireNonNull(imagePath);"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if {@code condition} is false."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        if (!condition) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition, String errorMessage) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        if (!condition) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(errorMessage);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":3,"-":37}},{"path":"src/main/java/seedu/diary/commons/util/BooleanUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Helper functions for handling boolean(s)."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class BooleanUtil {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String INVALID_BOOLEAN \u003d \"Please use a valid boolean!\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"-"},"content":"     * Returns true if the {@code str} is a valid boolean."},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * @param str"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static boolean isValidBoolean(String str) {"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"        return \"true\".equalsIgnoreCase(str) || \"false\".equalsIgnoreCase(str);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":3,"-":16}},{"path":"src/main/java/seedu/diary/commons/util/CollectionUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Utility methods related to Collections"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class CollectionUtil {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"     * @see #requireAllNonNull(Collection)"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Object... items) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(items);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        Stream.of(items).forEach(Objects::requireNonNull);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Throws NullPointerException if {@code items} or any element of {@code items} is null."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Collection\u003c?\u003e items) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(items);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        items.forEach(Objects::requireNonNull);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns true if {@code items} contain any elements that are non-null."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static boolean isAnyNonNull(Object... items) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":4,"-":33}},{"path":"src/main/java/seedu/diary/commons/util/ConfigUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.Config;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A class for accessing the Config File."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ConfigUtil {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(configFilePath, Config.class);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void saveConfig(Config config, Path configFilePath) throws IOException {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(config, configFilePath);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":3,"-":20}},{"path":"src/main/java/seedu/diary/commons/util/DateTimeUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.commons.util;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import java.time.format.DateTimeFormatterBuilder;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import java.time.format.ResolverStyle;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import java.time.temporal.ChronoField;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import java.util.Locale;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":" * Class containing DateTime parser."},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":" */"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"public class DateTimeUtil {"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"    private static DateTimeFormatter getDateTimeFormatter(int index, int defaultYear) {"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"        switch (index) {"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"        case 0:"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"            return new DateTimeFormatterBuilder()"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"                .appendPattern(\"uuuu M d\")"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"                .toFormatter()"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"                .withResolverStyle(ResolverStyle.STRICT);"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"        case 1:"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"            return new DateTimeFormatterBuilder()"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"                .appendPattern(\"d M uuuu\")"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"                .toFormatter()"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"                .withResolverStyle(ResolverStyle.STRICT);"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"        case 2:"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"            return new DateTimeFormatterBuilder()"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"                .parseDefaulting(ChronoField.YEAR, defaultYear)"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"                .appendPattern(\"d M\")"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"                .toFormatter()"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"                .withResolverStyle(ResolverStyle.STRICT);"},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"        case 3:"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"            return new DateTimeFormatterBuilder()"},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"                .appendPattern(\"d MMM uuuu\")"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"                .toFormatter()"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"                .withLocale(Locale.ENGLISH)"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"                .withResolverStyle(ResolverStyle.STRICT);"},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"        default:"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"            // default should never be triggered but just in case."},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"            throw new IllegalStateException(\"DateTimeUtil illegal case.\");"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"     * Parse the input string as a LocalDateTime if possible."},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":"     * @param dateString String to be parsed."},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":"     * @return The parsed string as a LocalDateTime."},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":"     * @throws DateTimeParseException if string unable to be parsed."},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"gerhean"},"content":"    public static LocalDate parseDate(String dateString) throws DateTimeParseException {"},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":"        requireNonNull(dateString);"},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":"        int currentYear \u003d LocalDate.now().getYear();"},{"lineNumber":58,"author":{"gitId":"gerhean"},"content":"        String formattedDateString \u003d dateString.replaceAll(\"[\\\\\\\\/\\\\- ]+\", \" \");"},{"lineNumber":59,"author":{"gitId":"gerhean"},"content":"        for (int i \u003d 0; i \u003c 4; i++) {"},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":"            try {"},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":"                return LocalDate.parse(formattedDateString, getDateTimeFormatter(i, currentYear));"},{"lineNumber":62,"author":{"gitId":"gerhean"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":63,"author":{"gitId":"gerhean"},"content":"                // It\u0027s fine if DateTimeParseException is thrown now, it\u0027s only used to check format of date."},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":"                // DateTimeParseException will be thrown if all cases fail."},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"gerhean"},"content":"        // This throws a DateTimeParseException"},{"lineNumber":68,"author":{"gitId":"gerhean"},"content":"        return LocalDate.parse(formattedDateString, getDateTimeFormatter(1, currentYear));"},{"lineNumber":69,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":70}},{"path":"src/main/java/seedu/diary/commons/util/FileUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.InvalidPathException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Writes and reads files"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class FileUtil {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static boolean isFileExists(Path file) {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * otherwise returns false."},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param path A string representing the file path. Cannot be null."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static boolean isValidPath(String path) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Paths.get(path);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (InvalidPathException ipe) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories."},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @throws IOException if the file or directory cannot be created."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static void createIfMissing(Path file) throws IOException {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if (!isFileExists(file)) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            createFile(file);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static void createFile(Path file) throws IOException {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (Files.exists(file)) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        createParentDirsOfFile(file);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Files.createFile(file);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Creates parent directories of file if it has a parent directory"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static void createParentDirsOfFile(Path file) throws IOException {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        Path parentDir \u003d file.getParent();"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (parentDir !\u003d null) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            Files.createDirectories(parentDir);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Assumes file exists"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static String readFromFile(Path file) throws IOException {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return new String(Files.readAllBytes(file), CHARSET);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Writes given string to a file."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Will create the file if it does not exist yet."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public static void writeToFile(Path file, String content) throws IOException {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Files.write(file, content.getBytes(CHARSET));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":3,"-":82}},{"path":"src/main/java/seedu/diary/commons/util/JsonUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.LogsCenter;"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.exceptions.DataConversionException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Converts a Java object instance to JSON and vice versa"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class JsonUtil {"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        .registerModule(new SimpleModule(\"SimpleModule\")"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .addSerializer(Level.class, new ToStringSerializer())"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"    protected static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"    protected static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        throws IOException {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (!Files.exists(filePath)) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            logger.info(\"Json file \" + filePath + \" not found\");"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        T jsonFile;"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return Optional.of(jsonFile);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Saves the Json object to the specified file."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."},{"lineNumber":83,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param jsonFile cannot be null"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * @throws IOException if there was an error during writing to the file"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        requireNonNull(jsonFile);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        serializeObjectToJsonFile(filePath, jsonFile);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class"},{"lineNumber":98,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * @return The instance of T with the specified values in the JSON string"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return objectMapper.readValue(json, instanceClass);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation"},{"lineNumber":108,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * @param instance The T object to be converted into the JSON string"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * @return JSON data representation of the given class instance, in string"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Contains methods that retrieve logging level from serialized string."},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            super(vc);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            return getLoggingLevel(value);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":132,"author":{"gitId":"-"},"content":"         * Gets the logging level that matches loggingLevelString"},{"lineNumber":133,"author":{"gitId":"-"},"content":"         * \u003cp\u003e"},{"lineNumber":134,"author":{"gitId":"-"},"content":"         * Returns null if there are no matches"},{"lineNumber":135,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            return Level.parse(loggingLevelString);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        public Class\u003cLevel\u003e handledType() {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            return Level.class;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":9,"-":137}},{"path":"src/main/java/seedu/diary/commons/util/StringUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Helper functions for handling strings."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StringUtil {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Ignores case, but a full word match is required."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * \u003cbr\u003eexamples:\u003cpre\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *       \u003c/pre\u003e"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(word);"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .anyMatch(preppedWord::equalsIgnoreCase);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(t);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(s);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":4,"-":66}},{"path":"src/main/java/seedu/diary/logic/Logic.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.beans.PropertyChangeListener;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.GuiSettings;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ListenerPropertyType;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ReadOnlyInternshipDiary;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.statistics.Statistics;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * API of the Logic component"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public interface Logic {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns the InternshipDiary."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"     * @see seedu.diary.model.Model#getInternshipDiary()"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    ReadOnlyInternshipDiary getInternshipDiary();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"     * Returns an unmodifiable view of the filtered list of internship applications"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    ObservableList\u003cInternshipApplication\u003e getFilteredInternshipApplicationList();"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"     * Adds a property listener for any changes in {@code propertyType} used."},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"    void addPropertyChangeListener(ListenerPropertyType propertyType, PropertyChangeListener l);"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 internship diary file path."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    Path getInternshipDiaryFilePath();"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Returns a statistics object that can compute relevant internship application statistics."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    Statistics getStatistics();"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":20,"-":48}},{"path":"src/main/java/seedu/diary/logic/LogicManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.beans.PropertyChangeListener;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.GuiSettings;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.Command;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.CommandResult;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.InternshipDiaryParser;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ListenerPropertyType;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ReadOnlyInternshipDiary;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.statistics.Statistics;"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"import seedu.diary.storage.Storage;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final Model model;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final Storage storage;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final InternshipDiaryParser internshipDiaryParser;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"    private InternshipDiaryParser nextParser;"},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        internshipDiaryParser \u003d new InternshipDiaryParser();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"        InternshipDiaryParser nextParser \u003d this.nextParser;"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"        this.nextParser \u003d null;"},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"        Command command;"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":"        if (nextParser \u003d\u003d null) {"},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":"            command \u003d internshipDiaryParser.parseCommand(commandText);"},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":"        } else {"},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":"            command \u003d nextParser.parseCommand(commandText);"},{"lineNumber":55,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":"        CommandResult commandResult \u003d command.execute(model);"},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":"        this.nextParser \u003d command.getNextInternshipDiaryParser();"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":"            storage.saveInternshipDiary(model.getInternshipDiary());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public ReadOnlyInternshipDiary getInternshipDiary() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return model.getInternshipDiary();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public ObservableList\u003cInternshipApplication\u003e getFilteredInternshipApplicationList() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return model.getFilteredInternshipApplicationList();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":79,"author":{"gitId":"gerhean"},"content":"    public void addPropertyChangeListener(ListenerPropertyType propertyType, PropertyChangeListener l) {"},{"lineNumber":80,"author":{"gitId":"gerhean"},"content":"        model.addPropertyChangeListener(propertyType, l);"},{"lineNumber":81,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public Path getInternshipDiaryFilePath() {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return model.getInternshipDiaryFilePath();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public Statistics getStatistics() {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return model.getStatistics();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":34,"-":69}},{"path":"src/main/java/seedu/diary/logic/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_COMPANY;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Adds an internship application to the internship diary."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"        + \": Adds an internship application to the internship diary.\\n\""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        + \"Parameters: \""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        + PREFIX_COMPANY + \"COMPANY \""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        + PREFIX_ROLE + \"ROLE \""},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"        + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"        + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"        + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        + PREFIX_DATE + \"APPLICATION DATE \""},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"        + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        + PREFIX_STATUS + \"STATUS \""},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"        + \"\\nExample: \" + COMMAND_WORD + \" \""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        + PREFIX_COMPANY + \"Google \""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        + PREFIX_ROLE + \"Software Engineer \""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        + PREFIX_ADDRESS + \"123 Kent Ridge Road \""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        + PREFIX_PHONE + \"67654321 \""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        + PREFIX_EMAIL + \"example@google.com \""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        + PREFIX_DATE + \"10 01 2020 \""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        + PREFIX_PRIORITY + \"5 \""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        + PREFIX_STATUS + \"APPLIED\";"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New internship application added: %1$s\";"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_INTERNSHIP \u003d"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        \"This internship application already exists in the internship diary\";"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private final InternshipApplication toAdd;"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code internshipApplication}"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public AddCommand(InternshipApplication internshipApplication) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(internshipApplication);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        toAdd \u003d internshipApplication;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (model.hasInternshipApplication(toAdd)) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_INTERNSHIP);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        model.addInternshipApplication(toAdd);"},{"lineNumber":68,"author":{"gitId":"gerhean"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":19,"-":58}},{"path":"src/main/java/seedu/diary/logic/commands/ArchivalCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Lists all archived internship application(s) from the internship diary to the user."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ArchivalCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"archival\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all archived internship application(s)\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        model.viewArchivedInternshipApplicationList();"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":2,"-":21}},{"path":"src/main/java/seedu/diary/logic/commands/ArchiveCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Archives an internship application identified using its displayed index from the internship diary."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArchiveCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"archive\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        + \": Archives the internship application \""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        + \"identified by the index number used in the displayed internship list.\\n\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":24,"author":{"gitId":"-"},"content":"        + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARCHIVE_INTERNSHIP_SUCCESS \u003d \"Archived Internship Application: %1$s\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ALREADY_ARCHIVED \u003d \"Internship Application already archived!\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public ArchiveCommand(Index targetIndex) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        List\u003cInternshipApplication\u003e lastShownList \u003d model.getFilteredInternshipApplicationList();"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        InternshipApplication internshipToArchive \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (internshipToArchive.isArchived()) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_ALREADY_ARCHIVED);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        model.archiveInternshipApplication(internshipToArchive);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        String feedback \u003d internshipToArchive.toString();"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return new CommandResult(feedback);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            || (other instanceof ArchiveCommand // instanceof handles nulls"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            \u0026\u0026 targetIndex.equals(((ArchiveCommand) other).targetIndex)); // state check"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":6,"-":57}},{"path":"src/main/java/seedu/diary/logic/commands/ClearCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.InternshipDiary;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Clears the internship diary."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Internship diary has been cleared!\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        model.setInternshipDiary(new InternshipDiary());"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":3,"-":19}},{"path":"src/main/java/seedu/diary/logic/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.exceptions.CommandException;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.InternshipDiaryParser;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public abstract class Command {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":14,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @param model {@code Model} which the command should operate on."},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public abstract CommandResult execute(Model model) throws CommandException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"     * Gets the next parser to use, if any."},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"     * @return a InternshipDiaryParser, or {@code null} if there is none."},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"    public InternshipDiaryParser getNextInternshipDiaryParser() {"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"        return null;"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":13,"-":17}},{"path":"src/main/java/seedu/diary/logic/commands/CommandResult.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents the result of a command execution."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResult {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"     * Help information should be shown to the user."},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final boolean showHelp;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"     * Statistics should be shown to the user."},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final boolean showStatistics;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"     * The application should exit."},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final boolean exit;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean showStatistics, boolean exit) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.showStatistics \u003d showStatistics;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * and other fields set to their default value."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(feedbackToUser, false, false, false);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return feedbackToUser;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return showHelp;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public boolean isShowStatistics() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return showStatistics;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public boolean isExit() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return exit;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            \u0026\u0026 showStatistics \u003d\u003d otherCommandResult.showStatistics"},{"lineNumber":79,"author":{"gitId":"gerhean"},"content":"            \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return Objects.hash(feedbackToUser, showHelp, showStatistics, exit);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":11,"-":76}},{"path":"src/main/java/seedu/diary/logic/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Deletes an internship application identified using its displayed index from the internship diary."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        List\u003cInternshipApplication\u003e lastShownList \u003d model.getFilteredInternshipApplicationList();"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        InternshipApplication internshipToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        model.deleteInternshipApplication(internshipToDelete);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        String feedback \u003d internshipToDelete.toString();"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return new CommandResult(feedback);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":6,"-":46}},{"path":"src/main/java/seedu/diary/logic/commands/EditCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_COMPANY;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.Messages;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.util.CollectionUtil;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Address;"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.ApplicationDate;"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Company;"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Email;"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Phone;"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Priority;"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Role;"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.interview.Interview;"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.status.Status;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitId":"-"},"content":" * Edits the details of an existing internship application in the internship diary."},{"lineNumber":34,"author":{"gitId":"-"},"content":" */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        + \": Edits the details of the internship application identified \""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        + \"by the index number used in the displayed internship application list. \""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        + \"[\" + PREFIX_COMPANY + \"COMPANY] \""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        + \"[\" + PREFIX_ROLE + \"ROLE] \""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        + \"[\" + PREFIX_DATE + \"APPLICATION DATE] \""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        + \"[\" + PREFIX_STATUS + \"STATUS] \""},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":"        + \"\\nExample: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        + PREFIX_PHONE + \"91234567 \""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_INTERNSHIP_SUCCESS \u003d \"Edited Internship Application: %1$s\";"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_INTERNSHIP \u003d"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        \"This internship application already exists in the internship diary.\";"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private final EditInternshipDescriptor editInternshipDescriptor;"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * @param index of the internship application in the filtered internship application list to edit"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * @param editInternshipDescriptor details to edit the internship application with"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditInternshipDescriptor editInternshipDescriptor) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireNonNull(editInternshipDescriptor);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        this.editInternshipDescriptor \u003d new EditInternshipDescriptor(editInternshipDescriptor);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        List\u003cInternshipApplication\u003e lastShownList \u003d model.getFilteredInternshipApplicationList();"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        InternshipApplication internshipToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        InternshipApplication editedInternship \u003d createEditedInternship(internshipToEdit, editInternshipDescriptor);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        if (editedInternship.getIsGhostedOrRejected() \u0026\u0026 (internshipToEdit.getStatus() !\u003d Status.GHOSTED)"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            \u0026\u0026 (internshipToEdit.getStatus() !\u003d Status.REJECTED)) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            editedInternship.setLastStage(internshipToEdit.getStatus());"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        if (!internshipToEdit.isSameInternshipApplication(editedInternship)"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            \u0026\u0026 model.hasInternshipApplication(editedInternship)) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_INTERNSHIP);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        model.setInternshipApplication(internshipToEdit, editedInternship);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        model.displayInternshipDetail(editedInternship);"},{"lineNumber":98,"author":{"gitId":"gerhean"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_INTERNSHIP_SUCCESS, editedInternship));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code InternshipApplication} with the details of {@code internshipToEdit}"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * edited with {@code editInternshipDescriptor}."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private static InternshipApplication createEditedInternship(InternshipApplication internshipToEdit,"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        EditInternshipDescriptor editInternshipDescriptor) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assert internshipToEdit !\u003d null;"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Company updatedCompany \u003d editInternshipDescriptor.getCompany().orElse(internshipToEdit.getCompany());"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Role updatedRole \u003d editInternshipDescriptor.getRole().orElse(internshipToEdit.getRole());"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editInternshipDescriptor.getAddress().orElse(internshipToEdit.getAddress());"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editInternshipDescriptor.getPhone().orElse(internshipToEdit.getPhone());"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editInternshipDescriptor.getEmail().orElse(internshipToEdit.getEmail());"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        ApplicationDate updatedDate \u003d editInternshipDescriptor.getDate().orElse(internshipToEdit.getApplicationDate());"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        Priority updatedPriority \u003d editInternshipDescriptor.getPriority().orElse(internshipToEdit.getPriority());"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        Optional\u003cStatus\u003e toBeUpdatedStatus \u003d editInternshipDescriptor.getStatus();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        Status updatedStatus \u003d toBeUpdatedStatus.orElse(internshipToEdit.getStatus());"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        Boolean isArchived \u003d internshipToEdit.isArchived();"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        List\u003cInterview\u003e interviews \u003d internshipToEdit.getInterviews();"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        InternshipApplication updatedInternshipApplication \u003d new InternshipApplication(updatedCompany, updatedRole,"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            updatedAddress, updatedPhone, updatedEmail, updatedDate, updatedPriority,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            updatedStatus, isArchived, interviews);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (toBeUpdatedStatus.isPresent()) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            if (toBeUpdatedStatus.get() \u003d\u003d Status.GHOSTED || toBeUpdatedStatus.get() \u003d\u003d Status.REJECTED) {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                updatedInternshipApplication.setIsGhostedOrRejected(true);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                updatedInternshipApplication.setIsGhostedOrRejected(false);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        if (internshipToEdit.getStatus() \u003d\u003d Status.GHOSTED || internshipToEdit.getStatus() \u003d\u003d Status.REJECTED) {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            updatedInternshipApplication \u003d updatedInternshipApplication.setLastStage(internshipToEdit.getLastStage());"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            updatedInternshipApplication \u003d updatedInternshipApplication.setLastStage(internshipToEdit.getStatus());"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        return updatedInternshipApplication;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            \u0026\u0026 editInternshipDescriptor.equals(e.editInternshipDescriptor);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     * Stores the details to edit the internship application with. Each non-empty field value will replace the"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * corresponding field value of the internship application."},{"lineNumber":160,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    public static class EditInternshipDescriptor {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        private Company company;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        private Role role;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        private Address address;"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        private Phone phone;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        private Email email;"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        private ApplicationDate date;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        private Priority priority;"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        private Status status;"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        private Boolean isGhostedOrRejected;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        private Status lastStage;"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"gerhean"},"content":"        public EditInternshipDescriptor() {"},{"lineNumber":174,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":177,"author":{"gitId":"-"},"content":"         * Copy constructor."},{"lineNumber":178,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":179,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        public EditInternshipDescriptor(EditInternshipDescriptor toCopy) {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            setCompany(toCopy.company);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            setRole(toCopy.role);"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            setDate(toCopy.date);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            setPriority(toCopy.priority);"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            setStatus(toCopy.status);"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            setIsGhostedOrRejected(toCopy.isGhostedOrRejected);"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            setLastStage(toCopy.lastStage);"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":194,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":195,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            return CollectionUtil.isAnyNonNull("},{"lineNumber":198,"author":{"gitId":"-"},"content":"                company, role, address, phone, email, date, priority, status"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            );"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"        public void setCompany(Company company) {"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            this.company \u003d company;"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"        public Optional\u003cCompany\u003e getCompany() {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(company);"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"        public void setRole(Role role) {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            this.role \u003d role;"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"        public Optional\u003cRole\u003e getRole() {"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(role);"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            this.address \u003d address;"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            this.email \u003d email;"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":239,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"        public void setDate(ApplicationDate date) {"},{"lineNumber":243,"author":{"gitId":"-"},"content":"            this.date \u003d date;"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"        public Optional\u003cApplicationDate\u003e getDate() {"},{"lineNumber":247,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(date);"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"        public void setPriority(Priority priority) {"},{"lineNumber":251,"author":{"gitId":"-"},"content":"            this.priority \u003d priority;"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"        public Optional\u003cPriority\u003e getPriority() {"},{"lineNumber":255,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(priority);"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"        public void setStatus(Status status) {"},{"lineNumber":259,"author":{"gitId":"-"},"content":"            this.status \u003d status;"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"        public Optional\u003cStatus\u003e getStatus() {"},{"lineNumber":263,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(status);"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"        public void setLastStage(Status lastStage) {"},{"lineNumber":267,"author":{"gitId":"-"},"content":"            this.lastStage \u003d lastStage;"},{"lineNumber":268,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":"        public Optional\u003cStatus\u003e getLastStage() {"},{"lineNumber":271,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(lastStage);"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"-"},"content":"        public void setIsGhostedOrRejected(Boolean bool) {"},{"lineNumber":275,"author":{"gitId":"-"},"content":"            this.isGhostedOrRejected \u003d bool;"},{"lineNumber":276,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":280,"author":{"gitId":"-"},"content":"            // short circuit if same object"},{"lineNumber":281,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":282,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":283,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":284,"author":{"gitId":"-"},"content":""},{"lineNumber":285,"author":{"gitId":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":286,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditInternshipDescriptor)) {"},{"lineNumber":287,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":288,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":289,"author":{"gitId":"-"},"content":""},{"lineNumber":290,"author":{"gitId":"-"},"content":"            // state check"},{"lineNumber":291,"author":{"gitId":"-"},"content":"            EditInternshipDescriptor e \u003d (EditInternshipDescriptor) other;"},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":"            return getCompany().equals(e.getCompany())"},{"lineNumber":294,"author":{"gitId":"-"},"content":"                \u0026\u0026 getRole().equals(e.getRole())"},{"lineNumber":295,"author":{"gitId":"-"},"content":"                \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":296,"author":{"gitId":"-"},"content":"                \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":297,"author":{"gitId":"-"},"content":"                \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":298,"author":{"gitId":"-"},"content":"                \u0026\u0026 getDate().equals(e.getDate())"},{"lineNumber":299,"author":{"gitId":"-"},"content":"                \u0026\u0026 getPriority().equals(e.getPriority())"},{"lineNumber":300,"author":{"gitId":"-"},"content":"                \u0026\u0026 getStatus().equals(e.getStatus());"},{"lineNumber":301,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":302,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":303,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":28,"-":275}},{"path":"src/main/java/seedu/diary/logic/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Internship Diary as requested ...\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, true);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":2,"-":17}},{"path":"src/main/java/seedu/diary/logic/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_COMPANY;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import java.util.stream.Collectors;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.Messages;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.CustomToStringPredicate;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Finds and lists all internship applications in internship diary"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * whose fields contains any of the field\u0027s argument keywords."},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive."},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Email and Phone matching is based on whether there is a substring that matches."},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        + \": Finds all internship applications whose fields contain all of \""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        + \"the specified field keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        + \"At least one of the following optional parameters must be given:\\n\""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        + \"Parameters: \""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        + \"[KEYWORDS] \""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        + \"[\" + PREFIX_COMPANY + \"COMPANY] \""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        + \"[\" + PREFIX_ROLE + \"ROLE] \""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        + \"[\" + PREFIX_DATE + \"DATE] \""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        + \"[\" + PREFIX_STATUS + \"STATUS]\\n\""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        + \"Example: \" + COMMAND_WORD + \" c/Google r/Engineer\";"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private final List\u003cPredicate\u003cInternshipApplication\u003e\u003e predicates;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private final boolean isPreamble;"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public FindCommand(List\u003cPredicate\u003cInternshipApplication\u003e\u003e predicates, boolean isPreamble) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.predicates \u003d predicates;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.isPreamble \u003d isPreamble;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Predicate\u003cInternshipApplication\u003e predicate;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (isPreamble) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            predicate \u003d predicates.stream().reduce(x -\u003e false, Predicate::or);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            predicate \u003d predicates.stream().reduce(x -\u003e true, Predicate::and);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":"        predicate \u003d new CustomToStringPredicate\u003c\u003e(predicate, this.toString());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        model.updateFilteredInternshipApplicationList(predicate);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return new CommandResult("},{"lineNumber":68,"author":{"gitId":"-"},"content":"            String.format(Messages.MESSAGE_INTERNSHIP_LISTED_OVERVIEW,"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                model.getFilteredInternshipApplicationList().size()));"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":74,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            \u0026\u0026 predicates.equals(((FindCommand) other).predicates)"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            \u0026\u0026 isPreamble \u003d\u003d ((FindCommand) other).isPreamble); // state check"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":81,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":82,"author":{"gitId":"gerhean"},"content":"    public String toString() {"},{"lineNumber":83,"author":{"gitId":"gerhean"},"content":"        String delimiter \u003d isPreamble ? \" OR \" : \" AND \";"},{"lineNumber":84,"author":{"gitId":"gerhean"},"content":"        return predicates.stream().map(Object::toString).collect(Collectors.joining(delimiter));"},{"lineNumber":85,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":22,"-":64}},{"path":"src/main/java/seedu/diary/logic/commands/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"        + \"Example: \" + COMMAND_WORD;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":2,"-":19}},{"path":"src/main/java/seedu/diary/logic/commands/InitClearCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.ClearCommandConfirmationParser;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.InternshipDiaryParser;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":" * Asks for confirmation to clear the internship diary."},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":" */"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"public class InitClearCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Do you really want to clear all data in Internship Diary?\\n\""},{"lineNumber":14,"author":{"gitId":"-"},"content":"        + \"Type \u0027yes\u0027 to confirm.\\n\""},{"lineNumber":15,"author":{"gitId":"-"},"content":"        + \"Type anything else to cancel the command.\";"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"    public InternshipDiaryParser getNextInternshipDiaryParser() {"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"        return new ClearCommandConfirmationParser();"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":23,"-":3}},{"path":"src/main/java/seedu/diary/logic/commands/InterviewCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.Messages;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.diary.model.internship.interview.Interview;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Represents an abstract interview command that modifies interviews in an Internship Application."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public abstract class InterviewCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"interview\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        + \": Modifies Interviews in an Internship Application by using an index to specify application followed\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"        + \"by a command word to specify action to be taken.\\n\""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        + \"COMMAND_CODE (must be either add, edit, delete, or list) \""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        + \"other parameters as defined by the command code. \""},{"lineNumber":24,"author":{"gitId":"-"},"content":"        + \"type help or interview INDEX COMMAND_CODE to find out the respective required parameters.\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INTERVIEW_DATE_ERROR \u003d \"Interview Date should not \""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        + \"be before Internship Application Date.\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    protected InternshipApplication getInternshipApplication(Model model, Index index) throws CommandException {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        List\u003cInternshipApplication\u003e lastShownList \u003d model.getFilteredInternshipApplicationList();"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return lastShownList.get(index.getZeroBased());"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"     * Checks if interviewDate is before applicationDate"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    protected boolean isInterviewBeforeApplication(InternshipApplication internshipApplication, Interview interview) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return interview.getInterviewDate()"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            .compareTo(internshipApplication.getApplicationDate().fullApplicationDate) \u003c 0;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":9,"-":36}},{"path":"src/main/java/seedu/diary/logic/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Lists all unarchived internship application(s) from the internship diary to the user."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all unarchived internship application(s)\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        model.viewUnarchivedInternshipApplicationList();"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":2,"-":20}},{"path":"src/main/java/seedu/diary/logic/commands/ReminderCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.comparator.ApplicationDateAndInterviewDateComparator;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.ApplicationDateDuePredicate;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.CustomToStringPredicate;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.InterviewDateDuePredicate;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.IsNotArchivedPredicate;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.StatusIsInterviewPredicate;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.StatusIsWishlistPredicate;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Lists all internship applications in the internship diary that are due or have interview dates in 7 days."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ReminderCommand extends Command {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"reminder\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows applications that have are due or have interview\""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        + \"dates in 7 days.\\n\" + \"Example: \" + COMMAND_WORD;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed applications that are due or have interviews in 7 days.\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        ApplicationDateDuePredicate appDateWithin7DaysPredicate \u003d new ApplicationDateDuePredicate();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        StatusIsWishlistPredicate statusIsWishlistPredicate \u003d new StatusIsWishlistPredicate();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Predicate\u003cInternshipApplication\u003e wishlistPredicate \u003d appDateWithin7DaysPredicate.and(statusIsWishlistPredicate);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        InterviewDateDuePredicate interviewDateWithin7DaysPredicate \u003d new InterviewDateDuePredicate();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        StatusIsInterviewPredicate statusIsInterviewPredicate \u003d new StatusIsInterviewPredicate();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Predicate\u003cInternshipApplication\u003e interviewPredicate \u003d interviewDateWithin7DaysPredicate"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .and(statusIsInterviewPredicate);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Predicate\u003cInternshipApplication\u003e datePredicate \u003d wishlistPredicate.or(interviewPredicate);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        IsNotArchivedPredicate isNotArchivedPredicate \u003d new IsNotArchivedPredicate();"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Predicate\u003cInternshipApplication\u003e predicate \u003d isNotArchivedPredicate.and(datePredicate);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Predicate\u003cInternshipApplication\u003e customPredicate \u003d new CustomToStringPredicate\u003c\u003e(predicate,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            \"Reminder\");"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        model.updateFilteredInternshipApplicationList(customPredicate);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        model.updateFilteredInternshipApplicationList(new ApplicationDateAndInterviewDateComparator());"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            || (other instanceof ReminderCommand); // instanceof handles nulls"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":10,"-":50}},{"path":"src/main/java/seedu/diary/logic/commands/RemovalBasedCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.function.Function;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.Messages;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.commandexecutiontype.RemovalBasedCommandExecutionType;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Represents a command that can execute based on the different command execution type available."},{"lineNumber":22,"author":{"gitId":"-"},"content":" * It acts as the connector between a removal-based command and the ability to execute on multiple items"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * or by a specific field."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class RemovalBasedCommand extends Command {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final Function\u003cString, String\u003e MESSAGE_USAGE_BY_INDEX \u003d (commandWord) -\u003e commandWord.toUpperCase()"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        + \"S the internship application.\\n\""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        + \"Identified by the index number used in the displayed internship list.\\n\""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        + \"Example: \" + commandWord + \" 1\\n\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final Function\u003cString, String\u003e MESSAGE_USAGE_BY_INDICES \u003d (commandWord) -\u003e commandWord.toUpperCase()"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        + \"S the internship application.\\n\""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        + \"Identified by the index number used in the displayed internship list.\\n\""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        + \"Parameters: INDEX, [INDEX], [INDEX], ... (all index must be positive integer with comma as separator)\\n\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        + \"Note that INDEX enclosed in bracket is optional.\\n\""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        + \"Example: \" + commandWord + \" 3, 1, 5\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final Function\u003cString, String\u003e MESSAGE_USAGE_BY_FIELD \u003d (commandWord) -\u003e commandWord.toUpperCase()"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        + \"S all internship applications with the specified status.\\n\""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        + \"Note that you can only execute based on Status field!\\n\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        + \"You may archive based on any number of valid status field (but there must be at least one valid status)\\n\""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        + \"As long as there is one valid status, the command will execute.\\n\""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        + \"Parameters: \""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        + PREFIX_STATUS + \"STATUS\" + \"\\n\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        + \"Example: \" + commandWord + \" s/rejected\\n\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        + \"Example: \" + commandWord + \" s/sss rejected\";"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final Function\u003cString, String\u003e MESSAGE_COMMAND_INTERNSHIP_SUCCESS \u003d (commandWord) -\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        commandWord.toUpperCase() + \"D internship application(s) — \\n\\n%1$s\";"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_COMMAND_UNEXPECTED_FAILURE \u003d \"Something went wrong!\";"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private final Optional\u003cIndex\u003e targetIndex;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private final Optional\u003cList\u003cIndex\u003e\u003e targetIndices;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private final Optional\u003cPredicate\u003cInternshipApplication\u003e\u003e targetPredicate;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private final RemovalBasedCommandExecutionType executionType;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private final String commandWord;"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public RemovalBasedCommand(Index targetIndex, RemovalBasedCommandExecutionType executionType, String commandWord) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d Optional.of(targetIndex);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        this.targetIndices \u003d Optional.empty();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.targetPredicate \u003d Optional.empty();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.executionType \u003d executionType;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.commandWord \u003d commandWord;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public RemovalBasedCommand(List\u003cIndex\u003e indices, RemovalBasedCommandExecutionType executionType,"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        String commandWord) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d Optional.empty();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this.targetIndices \u003d Optional.of(indices);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        this.targetPredicate \u003d Optional.empty();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        this.executionType \u003d executionType;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        this.commandWord \u003d commandWord;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public RemovalBasedCommand(Predicate\u003cInternshipApplication\u003e predicate,"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        RemovalBasedCommandExecutionType executionType,"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        String commandWord) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d Optional.empty();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        this.targetIndices \u003d Optional.empty();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        this.targetPredicate \u003d Optional.of(predicate);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        this.executionType \u003d executionType;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        this.commandWord \u003d commandWord;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        Function\u003cIndex, Command\u003e lazyCommand \u003d generateLazyCommand();"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        switch (executionType) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        case BY_INDEX:"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            return executeByIndex(model, lazyCommand);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        case BY_INDICES:"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            return executeByIndices(model, lazyCommand);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        case BY_FIELD:"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            return executeByField(model, lazyCommand);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            // this should never happen"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            assert false;"},{"lineNumber":103,"author":{"gitId":"gerhean"},"content":"            throw new IllegalStateException(\"unreachable\");"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Executes the command by a single index."},{"lineNumber":110,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * @param model model for execution of command."},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * @param lazyCommand a function that creates the command."},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * @throws CommandException if the index is out of range."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    private CommandResult executeByIndex(Model model, Function\u003cIndex, Command\u003e lazyCommand) throws CommandException {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        Index index \u003d targetIndex.get();"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        String commandFeedback \u003d executeLazyCommandByIndex(model, lazyCommand, index) + \"\\n\";"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String resultFeedback \u003d"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_COMMAND_INTERNSHIP_SUCCESS.apply(commandWord), commandFeedback);"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return new CommandResult(resultFeedback);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Executes the command by multiple indexes."},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * It runs through the list of indices to execute on the internship application"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * retrieved from the underlying internship applications list in the internship diary."},{"lineNumber":131,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * @param model model for execution of command."},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * @param lazyCommand a function that creates the command."},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * @throws CommandException if the indices are out of range."},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    private CommandResult executeByIndices(Model model, Function\u003cIndex, Command\u003e lazyCommand) throws CommandException {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        List\u003cIndex\u003e indices \u003d targetIndices.get();"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        checkValidIndices(model, indices);"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        String commandFeedback \u003d executeLazyCommandByIndices(model, lazyCommand, indices);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        String resultFeedback \u003d String.format(MESSAGE_COMMAND_INTERNSHIP_SUCCESS.apply(commandWord), commandFeedback);"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        return new CommandResult(resultFeedback);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * Executes the command by the field specified and its relevant input."},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * Converts the list of predicate-filtered internship applications into the corresponding indices"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * and runs through that list of indices to execute on the internship applications retrieved"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * from the underlying internship applications list in the internship diary."},{"lineNumber":154,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * @param model model for execution of command."},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * @param lazyCommand a function that creates the command."},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * @throws CommandException if the indices are out of range."},{"lineNumber":158,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    private CommandResult executeByField(Model model, Function\u003cIndex, Command\u003e lazyCommand) throws CommandException {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"        List\u003cInternshipApplication\u003e internshipApplicationsToExecuteOn \u003d"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            getPredicateFilteredInternshipApplications(model);"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        List\u003cIndex\u003e indices \u003d convertInternshipApplicationsToIndices(model, internshipApplicationsToExecuteOn);"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"        checkValidIndices(model, indices);"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        String commandFeedback \u003d executeLazyCommandByIndices(model, lazyCommand, indices);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        String resultFeedback \u003d String.format(MESSAGE_COMMAND_INTERNSHIP_SUCCESS.apply(commandWord), commandFeedback);"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"        return new CommandResult(resultFeedback);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":176,"author":{"gitId":"-"},"content":"     * Generates the appropriate lazy function to create the command based on the command word given by input."},{"lineNumber":177,"author":{"gitId":"-"},"content":"     * The lazy command will be created and executed when this RemovalBasedCommand is executed."},{"lineNumber":178,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":179,"author":{"gitId":"-"},"content":"     * @return a function that takes in an index and creates a command."},{"lineNumber":180,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    private Function\u003cIndex, Command\u003e generateLazyCommand() {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            return (Index index) -\u003e new DeleteCommand(index);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        case ArchiveCommand.COMMAND_WORD:"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            return (Index index) -\u003e new ArchiveCommand(index);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        case UnarchiveCommand.COMMAND_WORD:"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            return (Index index) -\u003e new UnarchiveCommand(index);"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            // this should never happen"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            assert false;"},{"lineNumber":192,"author":{"gitId":"gerhean"},"content":"            throw new IllegalStateException(\"unreachable\");"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitId":"-"},"content":"     * Executes the lazy command by index."},{"lineNumber":198,"author":{"gitId":"-"},"content":"     * Retrieves the feedback from the command for output to user."},{"lineNumber":199,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":200,"author":{"gitId":"-"},"content":"     * @param model model for execution of command."},{"lineNumber":201,"author":{"gitId":"-"},"content":"     * @param lazyCommand a function that creates the command."},{"lineNumber":202,"author":{"gitId":"-"},"content":"     * @param index to execute upon."},{"lineNumber":203,"author":{"gitId":"-"},"content":"     * @return the command feedback for user."},{"lineNumber":204,"author":{"gitId":"-"},"content":"     * @throws CommandException if the indices are out of range."},{"lineNumber":205,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    private String executeLazyCommandByIndex(Model model, Function\u003cIndex, Command\u003e lazyCommand,"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        Index index) throws CommandException {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        Command actualCommand \u003d lazyCommand.apply(index);"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        String commandFeedback \u003d actualCommand.execute(model).getFeedbackToUser();"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        return commandFeedback;"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":214,"author":{"gitId":"-"},"content":"     * Executes the lazy command by indices iteratively."},{"lineNumber":215,"author":{"gitId":"-"},"content":"     * The function will also decrement the indices after the current index upon each execution of"},{"lineNumber":216,"author":{"gitId":"-"},"content":"     * a removal-based command because each execution will shift the remaining indices forward (decrement"},{"lineNumber":217,"author":{"gitId":"-"},"content":"     * index by 1)."},{"lineNumber":218,"author":{"gitId":"-"},"content":"     * Retrieves the feedback from the command for output to user."},{"lineNumber":219,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":220,"author":{"gitId":"-"},"content":"     * @param model model for execution of command."},{"lineNumber":221,"author":{"gitId":"-"},"content":"     * @param lazyCommand a function that creates the command."},{"lineNumber":222,"author":{"gitId":"-"},"content":"     * @param indices to execute upon."},{"lineNumber":223,"author":{"gitId":"-"},"content":"     * @return the command feedback for user."},{"lineNumber":224,"author":{"gitId":"-"},"content":"     * @throws CommandException if the indices are out of range."},{"lineNumber":225,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    private String executeLazyCommandByIndices(Model model, Function\u003cIndex, Command\u003e lazyCommand,"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        List\u003cIndex\u003e indices) throws CommandException {"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        String commandFeedback \u003d \"\";"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c indices.size(); i++) {"},{"lineNumber":230,"author":{"gitId":"-"},"content":"            for (int j \u003d i + 1; j \u003c indices.size(); j++) {"},{"lineNumber":231,"author":{"gitId":"-"},"content":"                // decrements the following indices because of the removal of the head index in the list"},{"lineNumber":232,"author":{"gitId":"-"},"content":"                Index newIndex \u003d indices.get(j).getDecrementIndex();"},{"lineNumber":233,"author":{"gitId":"-"},"content":"                indices.set(j, newIndex);"},{"lineNumber":234,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            commandFeedback +\u003d executeLazyCommandByIndex(model, lazyCommand, indices.get(i)) + \"\\n\\n\";"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        return commandFeedback;"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":241,"author":{"gitId":"-"},"content":"     * Retrieves the predicate-filtered internship applications."},{"lineNumber":242,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":243,"author":{"gitId":"-"},"content":"     * @param model model for execution of command."},{"lineNumber":244,"author":{"gitId":"-"},"content":"     * @return the internship applications that was filtered by the predicate."},{"lineNumber":245,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    private List\u003cInternshipApplication\u003e getPredicateFilteredInternshipApplications(Model model) {"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        // filter appropriate internship applications into a new list"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        List\u003cInternshipApplication\u003e copy \u003d new ArrayList\u003c\u003e();"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        for (InternshipApplication internshipApplication : model.getFilteredInternshipApplicationList()) {"},{"lineNumber":250,"author":{"gitId":"-"},"content":"            copy.add(internshipApplication);"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        List\u003cInternshipApplication\u003e internshipsToExecuteOn \u003d copy.stream()"},{"lineNumber":253,"author":{"gitId":"-"},"content":"            .filter(targetPredicate.get()).collect(Collectors.toList());"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        return internshipsToExecuteOn;"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":258,"author":{"gitId":"-"},"content":"     * Converts the given internship applications to their corresponding indices in the"},{"lineNumber":259,"author":{"gitId":"-"},"content":"     * underlying internship applications list in the internship diary."},{"lineNumber":260,"author":{"gitId":"-"},"content":"     * It will also sort the indices by order as users may not enter the indices sequentially."},{"lineNumber":261,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":262,"author":{"gitId":"-"},"content":"     * @param model model for execution of command."},{"lineNumber":263,"author":{"gitId":"-"},"content":"     * @param predicateFilteredInternshipApplications internship applications to be converted to indices."},{"lineNumber":264,"author":{"gitId":"-"},"content":"     * @return the appropriate indices."},{"lineNumber":265,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    private List\u003cIndex\u003e convertInternshipApplicationsToIndices(Model model,"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        List\u003cInternshipApplication\u003e predicateFilteredInternshipApplications) {"},{"lineNumber":268,"author":{"gitId":"-"},"content":"        List\u003cInteger\u003e integerIndices \u003d new ArrayList\u003c\u003e();"},{"lineNumber":269,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c model.getFilteredInternshipApplicationList().size(); i++) {"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            InternshipApplication internshipApplication \u003d model.getFilteredInternshipApplicationList().get(i);"},{"lineNumber":271,"author":{"gitId":"-"},"content":"            if (predicateFilteredInternshipApplications.contains(internshipApplication)) {"},{"lineNumber":272,"author":{"gitId":"-"},"content":"                integerIndices.add(i);"},{"lineNumber":273,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":275,"author":{"gitId":"-"},"content":"        List\u003cIndex\u003e indices \u003d integerIndices.stream()"},{"lineNumber":276,"author":{"gitId":"-"},"content":"            .sorted()"},{"lineNumber":277,"author":{"gitId":"-"},"content":"            .map(number -\u003e Index.fromZeroBased(number))"},{"lineNumber":278,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        return indices;"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":283,"author":{"gitId":"-"},"content":"     * Verifies that all the given indices by user are valid and not out of bounds according to the"},{"lineNumber":284,"author":{"gitId":"-"},"content":"     * underlying internship applications list in the internship diary."},{"lineNumber":285,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":286,"author":{"gitId":"-"},"content":"     * @param model model for execution of command."},{"lineNumber":287,"author":{"gitId":"-"},"content":"     * @param indices to check for validity."},{"lineNumber":288,"author":{"gitId":"-"},"content":"     * @throws CommandException if the indices are out of range, with the specified indices that are out of range."},{"lineNumber":289,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    private void checkValidIndices(Model model, List\u003cIndex\u003e indices) throws CommandException {"},{"lineNumber":291,"author":{"gitId":"-"},"content":"        List\u003cInternshipApplication\u003e lastShownList \u003d model.getFilteredInternshipApplicationList();"},{"lineNumber":292,"author":{"gitId":"-"},"content":"        List\u003cInteger\u003e invalidIndices \u003d indices.stream()"},{"lineNumber":293,"author":{"gitId":"-"},"content":"            .filter(index -\u003e index.getZeroBased() \u003e\u003d lastShownList.size())"},{"lineNumber":294,"author":{"gitId":"-"},"content":"            .map(index -\u003e index.getOneBased())"},{"lineNumber":295,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":296,"author":{"gitId":"-"},"content":"        boolean hasInvalidIndices \u003d !invalidIndices.isEmpty();"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        if (hasInvalidIndices) {"},{"lineNumber":298,"author":{"gitId":"-"},"content":"            String exceptionMessage \u003d Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX + \": \" + invalidIndices;"},{"lineNumber":299,"author":{"gitId":"-"},"content":"            throw new CommandException(exceptionMessage);"},{"lineNumber":300,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":302,"author":{"gitId":"-"},"content":""},{"lineNumber":303,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":305,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":306,"author":{"gitId":"-"},"content":"            || (other instanceof RemovalBasedCommand // instanceof handles nulls"},{"lineNumber":307,"author":{"gitId":"-"},"content":"            \u0026\u0026 targetIndex.equals(((RemovalBasedCommand) other).targetIndex) // state check"},{"lineNumber":308,"author":{"gitId":"-"},"content":"            \u0026\u0026 targetIndices.equals(((RemovalBasedCommand) other).targetIndices) // state check"},{"lineNumber":309,"author":{"gitId":"-"},"content":"            \u0026\u0026 targetPredicate.equals(((RemovalBasedCommand) other).targetPredicate) // state check"},{"lineNumber":310,"author":{"gitId":"-"},"content":"            \u0026\u0026 executionType.equals(((RemovalBasedCommand) other).executionType) // state check"},{"lineNumber":311,"author":{"gitId":"-"},"content":"            \u0026\u0026 commandWord.equals(((RemovalBasedCommand) other).commandWord)); // state check"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":313,"author":{"gitId":"-"},"content":""},{"lineNumber":314,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":10,"-":304}},{"path":"src/main/java/seedu/diary/logic/commands/SelectCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Selects an internship application to display in the GUI."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        + \": displays the details of the internship application selected based on \""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        + \"the index number in the displayed internship application list.\\n\""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        + \"\\nExample: \" + COMMAND_WORD + \" 1 \";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SELECT_SUCCESS \u003d \"Internship Application Displayed!\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Index index;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public SelectCommand(Index index) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        List\u003cInternshipApplication\u003e currentList \u003d model.getFilteredInternshipApplicationList();"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d currentList.size()) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"        InternshipApplication internshipApplication \u003d currentList.get(index.getZeroBased());"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"        model.displayInternshipDetail(internshipApplication);"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"        return new CommandResult(MESSAGE_SELECT_SUCCESS);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            \u0026\u0026 index.equals(((SelectCommand) other).index)); // state check"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":10,"-":46}},{"path":"src/main/java/seedu/diary/logic/commands/SortCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_COMPANY;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import java.util.Comparator;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.Messages;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":" * Finds and lists all internship applications in internship diary"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":" * whose company name contains any of the argument keywords."},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":" * Keyword matching is case insensitive."},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":" */"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"public class SortCommand extends Command {"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"    public static final String REVERSE_KEYWORD \u003d \"reverse\";"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"        + \": Sorts current list by given parameter.\\n\""},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"        + \"Parameters: [\" + REVERSE_KEYWORD + \"] KEYWORD\\n\""},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"        + \"Available sorts:\""},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"        + \"Company: \" + PREFIX_COMPANY + \", \""},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"        + \"Role: \" + PREFIX_ROLE + \", \""},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"        + \"Date: \" + PREFIX_DATE + \", \""},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"        + \"Priority: \" + PREFIX_PRIORITY + \", \""},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"        + \"Status: \" + PREFIX_STATUS + \".\\n\""},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"        + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_COMPANY + \"\\n\""},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"        + \"Remarks: sort order is detailed in the User Guide.\";"},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"    private final Comparator\u003cInternshipApplication\u003e comparator;"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"    public SortCommand(Comparator\u003cInternshipApplication\u003e comparator) {"},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"        this.comparator \u003d comparator;"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"        requireNonNull(model);"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"        model.updateFilteredInternshipApplicationList(comparator);"},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"        return new CommandResult("},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"            String.format(Messages.MESSAGE_INTERNSHIP_LISTED_OVERVIEW,"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":"                model.getFilteredInternshipApplicationList().size()));"},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"gerhean"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":"            || (other instanceof SortCommand // instanceof handles nulls"},{"lineNumber":58,"author":{"gitId":"gerhean"},"content":"            \u0026\u0026 comparator.equals(((SortCommand) other).comparator)); // state check"},{"lineNumber":59,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":60}},{"path":"src/main/java/seedu/diary/logic/commands/StatisticsCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Displays statistics window UI to users."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class StatisticsCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"stats\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows internship application statistics.\\n\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"        + \"Example: \" + COMMAND_WORD;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String SHOWING_STATISTICS_MESSAGE \u003d \"Opened statistics window.\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return new CommandResult(SHOWING_STATISTICS_MESSAGE, false, true, false);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":2,"-":19}},{"path":"src/main/java/seedu/diary/logic/commands/UnarchiveCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Unarchives an internship application identified using its displayed index from the internship diary."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class UnarchiveCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"unarchive\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        + \": Unarchives the internship application \""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        + \"identified by the index number used in the displayed internship list.\\n\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":24,"author":{"gitId":"-"},"content":"        + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNARCHIVE_INTERNSHIP_SUCCESS \u003d \"Unarchived Internship Application: %1$s\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ALREADY_UNARCHIVED \u003d \"Internship Application already unarchived!\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UnarchiveCommand(Index targetIndex) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        List\u003cInternshipApplication\u003e lastShownList \u003d model.getFilteredInternshipApplicationList();"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        InternshipApplication internshipToUnarchive \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (!internshipToUnarchive.isArchived()) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_ALREADY_UNARCHIVED);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        model.unarchiveInternshipApplication(internshipToUnarchive);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        String feedback \u003d internshipToUnarchive.toString();"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return new CommandResult(feedback);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            || (other instanceof UnarchiveCommand // instanceof handles nulls"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            \u0026\u0026 targetIndex.equals(((UnarchiveCommand) other).targetIndex)); // state check"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":6,"-":57}},{"path":"src/main/java/seedu/diary/logic/commands/exceptions/CommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error which occurs during execution of a {@link Command}."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CommandException extends Exception {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public CommandException(String message) {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public CommandException(String message, Throwable cause) {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":1,"-":16}},{"path":"src/main/java/seedu/diary/logic/commands/exceptions/InterviewCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.diary.logic.commands.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":" * Represents an exception caused by an execution of an interview sub-command."},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class InterviewCommandException extends CommandException {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"-"},"content":"     * Constructs a new {@code InterviewCommandException} with the specified detail {@code message} and {@code cause}."},{"lineNumber":9,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public InterviewCommandException(String message) {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":3,"-":10}},{"path":"src/main/java/seedu/diary/logic/commands/interviewsubcommands/InterviewAddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands.interviewsubcommands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_IS_ONLINE;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.InterviewCommand;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.diary.logic.commands.exceptions.InterviewCommandException;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.interview.Interview;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Adds an interview into an Internship Application."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class InterviewAddCommand extends InterviewCommand {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New Interview added: %1$s\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_INTERVIEW \u003d"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \"This interview already exists in the internship application: %1$s\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d \"Adds an interview into an Internship Application.\\n\""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        + \"Parameters: INDEX (must be a positive integer) add \""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        + \"[\" + PREFIX_IS_ONLINE + \"is it an online interview (true/false)] \""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        + \"[\" + PREFIX_DATE + \"DATE] \""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        + \"[\" + PREFIX_ADDRESS + \"ADDRESS (optional if online interview, compulsory if offline interview)] \\n\""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        + \"Example: \" + COMMAND_WORD + \" 1 add \""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        + PREFIX_IS_ONLINE + \"false \""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        + PREFIX_ADDRESS + \"123 road \""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        + PREFIX_DATE + \"01 02 2020 \";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_OFFLINE_INTERVIEW_ADDRESS \u003d \"Offline interviews require address tag [\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        + PREFIX_ADDRESS + \"ADDRESS] non-empty\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private final Interview interviewToAdd;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public InterviewAddCommand(Index index, Interview interview) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        requireNonNull(interview);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        interviewToAdd \u003d interview;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        InternshipApplication internshipToModify \u003d super.getInternshipApplication(model, index);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (internshipToModify.hasInterview(interviewToAdd)) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            throw new CommandException(String.format(MESSAGE_DUPLICATE_INTERVIEW, internshipToModify));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (super.isInterviewBeforeApplication(internshipToModify, interviewToAdd)) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            throw new InterviewCommandException(MESSAGE_INTERVIEW_DATE_ERROR);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        internshipToModify.addInterview(interviewToAdd);"},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":"        model.displayInternshipDetail(internshipToModify);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, interviewToAdd));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            || (other instanceof InterviewAddCommand"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            \u0026\u0026 interviewToAdd.equals(((InterviewAddCommand) other).interviewToAdd)"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            \u0026\u0026 index.equals(((InterviewAddCommand) other).index));"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":12,"-":59}},{"path":"src/main/java/seedu/diary/logic/commands/interviewsubcommands/InterviewDeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands.interviewsubcommands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.InterviewCommand;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.interview.Interview;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Deletes an interview from an Internship Application."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class InterviewDeleteCommand extends InterviewCommand {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Deleted Interview: %1$s\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d \"Deletes an Interview from an Internship Application \""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        + \"by using an index of the internship application, followed by an index of interview to be deleted.\\n\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        + \"Parameters: INDEX(index of internship application) delete INDEX (index of interview to be deleted). \""},{"lineNumber":24,"author":{"gitId":"-"},"content":"        + \"Example: \" + COMMAND_WORD + \" 1 delete 1\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Index internshipIndex;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Index interviewIndex;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public InterviewDeleteCommand(Index internshipIndex, Index interviewIndex) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(internshipIndex);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireNonNull(interviewIndex);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.internshipIndex \u003d internshipIndex;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.interviewIndex \u003d interviewIndex;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        InternshipApplication internshipToModify \u003d super.getInternshipApplication(model, internshipIndex);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        List\u003cInterview\u003e interviews \u003d internshipToModify.getInterviews();"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if (interviewIndex.getZeroBased() \u003e\u003d interviews.size()) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_INTERVIEW_DISPLAYED_INDEX);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Interview interviewToDelete \u003d interviews.get(interviewIndex.getZeroBased());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        internshipToModify.deleteInterview(interviewToDelete);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        model.displayInternshipDetail(internshipToModify);"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, interviewToDelete));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            || (other instanceof InterviewDeleteCommand"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            \u0026\u0026 interviewIndex.equals(((InterviewDeleteCommand) other).interviewIndex)"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            \u0026\u0026 internshipIndex.equals(((InterviewDeleteCommand) other).internshipIndex));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":10,"-":48}},{"path":"src/main/java/seedu/diary/logic/commands/interviewsubcommands/InterviewEditCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands.interviewsubcommands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_IS_ONLINE;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.Messages;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.CommandResult;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.InterviewCommand;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.diary.logic.commands.exceptions.InterviewCommandException;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Address;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.ApplicationDate;"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.interview.Interview;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Edits the details of an existing interview in an Internship Application."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class InterviewEditCommand extends InterviewCommand {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d \"Edits an Interview from an Internship Application \""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        + \"by using an index of the internship application, followed by an index of interview to be edited.\\n\""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        + \"Parameters: INDEX(index of internship application) edit INDEX (index of interview to be edited) \""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        + \"[\" + PREFIX_IS_ONLINE + \"is it an online interview (true/false)] \""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        + \"[\" + PREFIX_DATE + \"DATE] \""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        + \"[\" + PREFIX_ADDRESS + \"ADDRESS (optional if online interview] \""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        + \"Example: \" + COMMAND_WORD + \" 1 edit \""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        + PREFIX_IS_ONLINE + \"false \""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        + PREFIX_ADDRESS + \"123 road \""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        + PREFIX_DATE + \"01 02 2020 \";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_INTERVIEW_SUCCESS \u003d \"Edited Interview: %1$s\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_INTERVIEW \u003d"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        \"This interview already exists in the following internship application: %1$s.\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_REQUIRE_ADDRESS \u003d \"You are changing an Online Interview \""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        + \"into an Offline Interview, Address field is required.\";"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private final Index internshipIndex;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private final Index interviewIndex;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private final EditInterviewDescriptor editInterviewDescriptor;"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * @param internshipIndex index of the internship application to modify the interviews in."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * @param interviewIndex index of the interview under the internship application above."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * @param editInterviewDescriptor details to edit the interview with."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public InterviewEditCommand(Index internshipIndex,"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Index interviewIndex, EditInterviewDescriptor editInterviewDescriptor) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        requireNonNull(internshipIndex);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        requireNonNull(interviewIndex);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        requireNonNull(editInterviewDescriptor);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        this.internshipIndex \u003d internshipIndex;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.interviewIndex \u003d interviewIndex;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        this.editInterviewDescriptor \u003d editInterviewDescriptor;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        InternshipApplication internshipToModify \u003d super.getInternshipApplication(model, internshipIndex);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        List\u003cInterview\u003e lastShownList \u003d internshipToModify.getInterviews();"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        if (interviewIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_INTERVIEW_DISPLAYED_INDEX);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        Interview interviewToEdit \u003d lastShownList.get(interviewIndex.getZeroBased());"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Interview editedInterview \u003d createEditedInterview(interviewToEdit, editInterviewDescriptor);"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        if (internshipToModify.hasInterview(editedInterview)) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            throw new CommandException(String.format(MESSAGE_DUPLICATE_INTERVIEW, internshipToModify));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (super.isInterviewBeforeApplication(internshipToModify, editedInterview)) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new InterviewCommandException(MESSAGE_INTERVIEW_DATE_ERROR);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        internshipToModify.setInterview(interviewIndex, editedInterview);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        model.displayInternshipDetail(internshipToModify);"},{"lineNumber":89,"author":{"gitId":"gerhean"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_INTERVIEW_SUCCESS, editedInterview));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code InternshipApplication} with the details of {@code internshipToEdit}"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * edited with {@code editInternshipDescriptor}."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private static Interview createEditedInterview(Interview interviewToEdit,"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        EditInterviewDescriptor editInterviewDescriptor) throws InterviewCommandException {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assert interviewToEdit !\u003d null;"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        boolean updatedIsOnline \u003d editInterviewDescriptor.getIsOnline().orElse(interviewToEdit.getIsOnline());"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        if (interviewToEdit.getIsOnline() \u0026\u0026 !updatedIsOnline \u0026\u0026 editInterviewDescriptor.getAddress().isEmpty()) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new InterviewCommandException(MESSAGE_REQUIRE_ADDRESS);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editInterviewDescriptor.getAddress().orElse(interviewToEdit.getInterviewAddress());"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        ApplicationDate updatedDate \u003d editInterviewDescriptor.getInterviewDate()"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            .orElse(interviewToEdit.getDate());"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return Interview.createInterview(updatedIsOnline, updatedDate, updatedAddress);"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (!(other instanceof InterviewEditCommand)) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        InterviewEditCommand e \u003d (InterviewEditCommand) other;"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return interviewIndex.equals(e.interviewIndex)"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            \u0026\u0026 internshipIndex.equals(e.internshipIndex)"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            \u0026\u0026 editInterviewDescriptor.equals(e.editInterviewDescriptor);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * Stores the details to edit the interview with. Each non-empty field value will replace the"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * corresponding field value of the interview."},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public static class EditInterviewDescriptor {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        private Boolean isOnline;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        private Address address;"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        private ApplicationDate date;"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"gerhean"},"content":"        public EditInterviewDescriptor() {"},{"lineNumber":143,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":146,"author":{"gitId":"-"},"content":"         * Copy constructor."},{"lineNumber":147,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        public EditInterviewDescriptor(EditInterviewDescriptor toCopy) {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            setOnline(toCopy.isOnline);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            setDate(toCopy.date);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":155,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":156,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            return CollectionUtil.isAnyNonNull(address, date, isOnline);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            this.address \u003d address;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        public void setDate(ApplicationDate date) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            this.date \u003d date;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        public Optional\u003cApplicationDate\u003e getInterviewDate() {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(date);"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"        public void setOnline(boolean isOnline) {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            this.isOnline \u003d isOnline;"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"        public Optional\u003cBoolean\u003e getIsOnline() {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(isOnline);"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            // short circuit if same object"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditInterviewDescriptor)) {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"            // state check"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            EditInterviewDescriptor e \u003d (EditInterviewDescriptor) other;"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"            return getAddress().equals(e.getAddress())"},{"lineNumber":201,"author":{"gitId":"-"},"content":"                \u0026\u0026 getInterviewDate().equals(e.getInterviewDate())"},{"lineNumber":202,"author":{"gitId":"-"},"content":"                \u0026\u0026 getIsOnline().equals(e.getIsOnline());"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":19,"-":186}},{"path":"src/main/java/seedu/diary/logic/commands/interviewsubcommands/InterviewListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands.interviewsubcommands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.CommandResult;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.InterviewCommand;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Lists all interviews inside an Internship Application."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class InterviewListCommand extends InterviewCommand {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"listed all interviews in %1$s\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Index index;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public InterviewListCommand(Index index) {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        InternshipApplication internshipToList \u003d super.getInternshipApplication(model, index);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        model.displayInternshipDetail(internshipToList);"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, internshipToList));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            || (other instanceof InterviewListCommand"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            \u0026\u0026 index.equals(((InterviewListCommand) other).index));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":8,"-":31}},{"path":"src/main/java/seedu/diary/logic/comparator/ApplicationDateAndInterviewDateComparator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.comparator;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Comparator for sorting InternshipApplication by application date and interview date."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ApplicationDateAndInterviewDateComparator implements Comparator\u003cInternshipApplication\u003e {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public int compare(InternshipApplication internship1, InternshipApplication internship2) {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        LocalDate dateOfInternship1 \u003d internship1.getEarliestApplicationOrInterviewDate().fullApplicationDate;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        LocalDate dateOfInternship2 \u003d internship2.getEarliestApplicationOrInterviewDate().fullApplicationDate;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"        return dateOfInternship1.compareTo(dateOfInternship2);"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        return \"Earliest application/ interview date\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return other instanceof ApplicationDateAndInterviewDateComparator;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":2,"-":28}},{"path":"src/main/java/seedu/diary/logic/comparator/ApplicationDateComparator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.comparator;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import java.util.Comparator;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":" * Comparator for sorting InternshipApplication by date."},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":" */"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"public class ApplicationDateComparator implements Comparator\u003cInternshipApplication\u003e {"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"    public int compare(InternshipApplication internship1, InternshipApplication internship2) {"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"        return internship1.getApplicationDate().compareTo(internship2.getApplicationDate());"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"    public Comparator\u003cInternshipApplication\u003e reversed() {"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"        return new ReversedComparator(this);"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"        // equal only if todayDate is same"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"        return other instanceof ApplicationDateComparator;"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"    public String toString() {"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"        return PREFIX_DATE.getPrefix();"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":34}},{"path":"src/main/java/seedu/diary/logic/comparator/CompanyComparator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.comparator;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_COMPANY;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import java.util.Comparator;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":" * Comparator for sorting InternshipApplication by companies in lexicographical order."},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":" */"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"public class CompanyComparator implements Comparator\u003cInternshipApplication\u003e {"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"    public int compare(InternshipApplication internship1, InternshipApplication internship2) {"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"        return internship1.getCompany().compareTo(internship2.getCompany());"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"    public Comparator\u003cInternshipApplication\u003e reversed() {"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"        return new ReversedComparator(this);"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"        return other instanceof CompanyComparator; // All CompanyComparator are the same."},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"        return PREFIX_COMPANY.getPrefix();"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":33}},{"path":"src/main/java/seedu/diary/logic/comparator/PriorityComparator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.comparator;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import java.util.Comparator;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":" * Comparator for sorting InternshipApplication by Priority."},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":" */"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"public class PriorityComparator implements Comparator\u003cInternshipApplication\u003e {"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"    public int compare(InternshipApplication internship1, InternshipApplication internship2) {"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"        return internship1.getPriority().compareTo(internship2.getPriority());"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"    public Comparator\u003cInternshipApplication\u003e reversed() {"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"        return new ReversedComparator(this);"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"        return other instanceof PriorityComparator; // All PriorityComparator are the same."},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"        return PREFIX_PRIORITY.getPrefix();"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":33}},{"path":"src/main/java/seedu/diary/logic/comparator/ReversedComparator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.comparator;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.SortCommand;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":" * Identical to Comparator.reversed(). However, the string is overwritten."},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":" */"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"class ReversedComparator implements Comparator\u003cInternshipApplication\u003e {"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"    private Comparator\u003cInternshipApplication\u003e internalComparator;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"    protected ReversedComparator(Comparator\u003cInternshipApplication\u003e comparator) {"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"        this.internalComparator \u003d comparator;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"    public int compare(InternshipApplication internship1, InternshipApplication internship2) {"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"        return -internalComparator.compare(internship1, internship2);"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"        return SortCommand.REVERSE_KEYWORD + \" \" + internalComparator.toString();"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"    public boolean equals(Object other) {"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"        return other instanceof ReversedComparator"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"            \u0026\u0026 internalComparator.equals(((ReversedComparator) other).internalComparator);"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":33}},{"path":"src/main/java/seedu/diary/logic/comparator/RoleComparator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.comparator;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import java.util.Comparator;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":" * Comparator for sorting InternshipApplication by Role."},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":" */"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"public class RoleComparator implements Comparator\u003cInternshipApplication\u003e {"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"    public int compare(InternshipApplication internship1, InternshipApplication internship2) {"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"        return internship1.getRole().compareTo(internship2.getRole());"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"    public Comparator\u003cInternshipApplication\u003e reversed() {"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"        return new ReversedComparator(this);"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"        return other instanceof RoleComparator; // All RoleComparator are the same."},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"        return PREFIX_ROLE.getPrefix();"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":33}},{"path":"src/main/java/seedu/diary/logic/comparator/StatusComparator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.comparator;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import java.util.Comparator;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":" * Comparator for sorting InternshipApplication by Status."},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":" */"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"public class StatusComparator implements Comparator\u003cInternshipApplication\u003e {"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"    public int compare(InternshipApplication internship1, InternshipApplication internship2) {"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"        return internship1.getStatus().compareTo(internship2.getStatus());"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"    public Comparator\u003cInternshipApplication\u003e reversed() {"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"        return new ReversedComparator(this);"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"        return other instanceof StatusComparator; // All StatusComparator are the same."},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"        return PREFIX_STATUS.getPrefix();"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":33}},{"path":"src/main/java/seedu/diary/logic/parser/AddCommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_COMPANY;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.util.PrefixUtil.arePrefixesPresent;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.AddCommand;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Address;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.ApplicationDate;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Company;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Email;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Phone;"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Priority;"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Role;"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.status.Status;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object."},{"lineNumber":28,"author":{"gitId":"-"},"content":" */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            ArgumentTokenizer.tokenize(args, PREFIX_COMPANY, PREFIX_ROLE, PREFIX_ADDRESS,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                PREFIX_PHONE, PREFIX_EMAIL, PREFIX_DATE, PREFIX_PRIORITY, PREFIX_STATUS);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_COMPANY, PREFIX_ROLE, PREFIX_DATE, PREFIX_STATUS)"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Company company \u003d ParserUtil.parseCompany(argMultimap.getValue(PREFIX_COMPANY).get());"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Role role \u003d ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE).get());"},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).orElse(\"\"));"},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).orElse(\"\"));"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).orElse(\"\"));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        ApplicationDate date \u003d ParserUtil.parseApplicationDate(argMultimap.getValue(PREFIX_DATE).get());"},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":"        Priority priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).orElse(\"5\"));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Status status \u003d ParserUtil.parseStatus(argMultimap.getValue(PREFIX_STATUS).get());"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        InternshipApplication internshipApplication \u003d"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            new InternshipApplication(company, role, address, phone, email, date, priority, status);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return new AddCommand(internshipApplication);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":28,"-":34}},{"path":"src/main/java/seedu/diary/logic/parser/ArchiveCommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.ArchiveCommand;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new ArchiveCommand object."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ArchiveCommandParser implements Parser\u003cArchiveCommand\u003e {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the ArchiveCommand"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * and returns a ArchiveCommand object for execution."},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public ArchiveCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            return new ArchiveCommand(index);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ArchiveCommand.MESSAGE_USAGE), pe);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":6,"-":24}},{"path":"src/main/java/seedu/diary/logic/parser/ArgumentMultimap.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments."},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values."},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained."},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Prefixes mapped to their respective arguments"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     **/"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @param prefix Prefix key with which the specified argument value is to be associated"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        argValues.add(argValue);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public String getPreamble() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Returns the number of prefixes contained in argument multimap."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public Integer getSize() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return argMultimap.size();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Checks if the multimap contains a particular prefix."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * @param prefix prefix to check for."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public boolean contains(Prefix prefix) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return argMultimap.containsKey(prefix);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":1,"-":78}},{"path":"src/main/java/seedu/diary/logic/parser/ArgumentTokenizer.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * in the above example.\u003cbr\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentTokenizer {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param prefixes Prefixes to tokenize the arguments string with"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @return ArgumentMultimap object that maps prefixes to their arguments"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return extractArguments(argsString, positions);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefixes Prefixes to find in the arguments string"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return List of zero-based prefix positions in the given arguments string"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Arrays.stream(prefixes)"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@see findAllPrefixPositions}"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        while (prefixPosition !\u003d -1) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            positions.add(extendedPrefix);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return positions;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * {@code argsString} starting from index {@code fromIndex}. An occurrence"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * such occurrence can be found."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * occurrences of \"p/\" with whitespace before it. However, if"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns 5."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return prefixIndex \u003d\u003d -1 ? -1"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            : prefixIndex + 1; // +1 as offset for whitespace"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * {@code argsString}."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @return ArgumentMultimap object that maps prefixes to their arguments"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // Sort by start position"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Insert a PrefixPosition to represent the preamble"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        prefixPositions.add(0, preambleMarker);"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        prefixPositions.add(endPositionMarker);"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // Map prefixes to their argument values (if any)"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            // Extract and store prefixes and their arguments"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            argMultimap.put(argPrefix, argValue);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return argMultimap;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static String extractArgumentValue(String argsString,"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        PrefixPosition currentPrefixPosition,"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        PrefixPosition nextPrefixPosition) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return value.trim();"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string."},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private static class PrefixPosition {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private int startPosition;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private final Prefix prefix;"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"gerhean"},"content":"        protected PrefixPosition(Prefix prefix, int startPosition) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            this.prefix \u003d prefix;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            this.startPosition \u003d startPosition;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"gerhean"},"content":"        protected int getStartPosition() {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            return startPosition;"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"gerhean"},"content":"        protected Prefix getPrefix() {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            return prefix;"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":4,"-":144}},{"path":"src/main/java/seedu/diary/logic/parser/ClearCommandConfirmationParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.parser;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.ClearCommand;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.Command;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.exceptions.ClearCommandConfirmationParseException;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":" * Parses user input to confirm clear command."},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":" */"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"public class ClearCommandConfirmationParser extends InternshipDiaryParser {"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"    public static final String CONFIRMATION_COMMAND_WORD \u003d \"yes\";"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"    public static final String CANCEL_CLEAR_COMMAND \u003d \"Internship diary is not cleared. No data will be lost.\";"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"        if (userInput.trim().equalsIgnoreCase(CONFIRMATION_COMMAND_WORD)) {"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"            return new ClearCommand();"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"        } else {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            throw new ClearCommandConfirmationParseException(CANCEL_CLEAR_COMMAND);"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":22,"-":1}},{"path":"src/main/java/seedu/diary/logic/parser/CliSyntax.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_COMPANY \u003d new Prefix(\"c/\");"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ROLE \u003d new Prefix(\"r/\");"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"w/\");"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_STATUS \u003d new Prefix(\"s/\");"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_IS_ONLINE \u003d new Prefix(\"o/\");"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final Prefix[] ALL_PREFIXES \u003d {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        PREFIX_COMPANY, PREFIX_ROLE, PREFIX_STATUS, PREFIX_ADDRESS, PREFIX_DATE, PREFIX_EMAIL,"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        PREFIX_PHONE, PREFIX_PRIORITY, PREFIX_IS_ONLINE"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":1,"-":23}},{"path":"src/main/java/seedu/diary/logic/parser/EditCommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_COMPANY;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.EditCommand;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(args);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            ArgumentTokenizer.tokenize(args, PREFIX_COMPANY, PREFIX_ROLE, PREFIX_ADDRESS,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                PREFIX_PHONE, PREFIX_EMAIL, PREFIX_DATE, PREFIX_PRIORITY, PREFIX_STATUS);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        Index index;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        EditCommand.EditInternshipDescriptor editInternshipDescriptor \u003d new EditCommand.EditInternshipDescriptor();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_COMPANY).isPresent()) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            editInternshipDescriptor.setCompany(ParserUtil.parseCompany(argMultimap.getValue(PREFIX_COMPANY).get()));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ROLE).isPresent()) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            editInternshipDescriptor.setRole(ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE).get()));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            editInternshipDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            editInternshipDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            editInternshipDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            editInternshipDescriptor.setDate(ParserUtil.parseApplicationDate(argMultimap.getValue(PREFIX_DATE).get()));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            editInternshipDescriptor.setPriority(ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get()));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_STATUS).isPresent()) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            editInternshipDescriptor.setStatus(ParserUtil.parseStatus(argMultimap.getValue(PREFIX_STATUS).get()));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        if (!editInternshipDescriptor.isAnyFieldEdited()) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editInternshipDescriptor);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":14,"-":62}},{"path":"src/main/java/seedu/diary/logic/parser/FindCommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_COMPANY;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.FindCommand;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.exceptions.ParseException;"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.AddressContainsKeywordsPredicate;"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.ApplicationDateIsDatePredicate;"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.CompanyContainsKeywordsPredicate;"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.EmailContainsKeywordsPredicate;"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.PhoneContainsNumbersPredicate;"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.PriorityContainsNumbersPredicate;"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.RoleContainsKeywordsPredicate;"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.StatusContainsKeywordsPredicate;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":33,"author":{"gitId":"-"},"content":" */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final Prefix[] ACCEPTED_PREFIXES \u003d new Prefix[]{PREFIX_COMPANY, PREFIX_ROLE, PREFIX_ADDRESS,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        PREFIX_PHONE, PREFIX_EMAIL, PREFIX_DATE, PREFIX_PRIORITY, PREFIX_STATUS};"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution."},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            ArgumentTokenizer.tokenize(args, ACCEPTED_PREFIXES);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!areAnyPrefixesPresent(argMultimap, ACCEPTED_PREFIXES)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            \u0026\u0026 argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (!argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            List\u003cPredicate\u003cInternshipApplication\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            String[] preamble \u003d argMultimap.getPreamble().split(\"\\\\s+\");"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            predicates.add(new CompanyContainsKeywordsPredicate(Arrays.asList(preamble)));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            predicates.add(new RoleContainsKeywordsPredicate(Arrays.asList(preamble)));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            predicates.add(new AddressContainsKeywordsPredicate(Arrays.asList(preamble)));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            predicates.add(new PhoneContainsNumbersPredicate(Arrays.asList(preamble)));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            predicates.add(new EmailContainsKeywordsPredicate(Arrays.asList(preamble)));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            predicates.add(new PriorityContainsNumbersPredicate(Arrays.asList(preamble)));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            predicates.add(new StatusContainsKeywordsPredicate(Arrays.asList(preamble)));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return new FindCommand(predicates, true);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return new FindCommand(getRequiredPredicates(argMultimap, ACCEPTED_PREFIXES), false);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Returns true if not all of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private static boolean areAnyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Returns a list of predicate that is required based on the prefixes."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * @param argumentMultimap the multimap of all the argument and prefixes"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * @param prefixes the valid prefixes to check"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * @return the list of predicates based on the prefixes"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static List\u003cPredicate\u003cInternshipApplication\u003e\u003e getRequiredPredicates(ArgumentMultimap argumentMultimap,"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Prefix... prefixes) throws ParseException {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        List\u003cPredicate\u003cInternshipApplication\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        for (Prefix p : prefixes) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            if (!argumentMultimap.getValue(p).isPresent()) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            String[] arguments \u003d argumentMultimap.getValue(p).get().split(\"\\\\s+\");"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            Predicate\u003cInternshipApplication\u003e predicate \u003d getPredicate(p, arguments);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            assert (predicate !\u003d null);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            predicates.add(predicate);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return predicates;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Gets the correct predicate for a given prefix."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @param prefix the prefix that you need the predicate for"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @param arguments the arguments of the command for the prefix"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @return the predicate corresponding to the prefix"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    private static Predicate\u003cInternshipApplication\u003e getPredicate(Prefix prefix,"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        String[] arguments) throws ParseException {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        if (prefix.equals(PREFIX_COMPANY)) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            return new CompanyContainsKeywordsPredicate(Arrays.asList(arguments));"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        } else if (prefix.equals(PREFIX_ROLE)) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            return new RoleContainsKeywordsPredicate(Arrays.asList(arguments));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        } else if (prefix.equals(PREFIX_ADDRESS)) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            return new AddressContainsKeywordsPredicate(Arrays.asList(arguments));"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        } else if (prefix.equals(PREFIX_PHONE)) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            return new PhoneContainsNumbersPredicate(Arrays.asList(arguments));"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        } else if (prefix.equals(PREFIX_EMAIL)) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            return new EmailContainsKeywordsPredicate(Arrays.asList(arguments));"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        } else if (prefix.equals(PREFIX_DATE)) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            return new ApplicationDateIsDatePredicate(Arrays.asList(arguments));"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        } else if (prefix.equals(PREFIX_PRIORITY)) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            return new PriorityContainsNumbersPredicate(Arrays.asList(arguments));"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        } else if (prefix.equals(PREFIX_STATUS)) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            return new StatusContainsKeywordsPredicate(Arrays.asList(arguments));"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            //should not happen."},{"lineNumber":128,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":23,"-":108}},{"path":"src/main/java/seedu/diary/logic/parser/InternshipDiaryParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.ArchivalCommand;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.ArchiveCommand;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.Command;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.DeleteCommand;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.EditCommand;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.ExitCommand;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.FindCommand;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.HelpCommand;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.InitClearCommand;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.InterviewCommand;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.ListCommand;"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.ReminderCommand;"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.SelectCommand;"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.SortCommand;"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.StatisticsCommand;"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.UnarchiveCommand;"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.exceptions.ParseException;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":30,"author":{"gitId":"-"},"content":" */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class InternshipDiaryParser {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\").toLowerCase();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return new RemovalBasedCommandExecutionTypeParser(DeleteCommand.COMMAND_WORD).parse(arguments);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"gerhean"},"content":"        case InitClearCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":"            return new InitClearCommand();"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"gerhean"},"content":"        case SortCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitId":"gerhean"},"content":"            return new SortCommandParser().parse(arguments);"},{"lineNumber":71,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        case InterviewCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            return new InterviewCommandParser().parse(arguments);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return new ListCommand();"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        case StatisticsCommand.COMMAND_WORD:"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            return new StatisticsCommand();"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        case ArchiveCommand.COMMAND_WORD:"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            return new RemovalBasedCommandExecutionTypeParser(ArchiveCommand.COMMAND_WORD).parse(arguments);"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        case UnarchiveCommand.COMMAND_WORD:"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            return new RemovalBasedCommandExecutionTypeParser(UnarchiveCommand.COMMAND_WORD).parse(arguments);"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        case ArchivalCommand.COMMAND_WORD:"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            return new ArchivalCommand();"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        case ReminderCommand.COMMAND_WORD:"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            return new ReminderCommand();"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":26,"-":80}},{"path":"src/main/java/seedu/diary/logic/parser/InterviewCommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_IS_ONLINE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.interviewcode.InterviewCode;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.util.BooleanUtil;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.InterviewCommand;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.interviewsubcommands.InterviewAddCommand;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.interviewsubcommands.InterviewDeleteCommand;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.interviewsubcommands.InterviewEditCommand;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.interviewsubcommands.InterviewListCommand;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Address;"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.ApplicationDate;"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.interview.Interview;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new Interview Command object."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class InterviewCommandParser implements Parser\u003cInterviewCommand\u003e {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public InterviewCommand parse(String args) throws ParseException {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(args);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        ArgumentMultimap argumentMultimap \u003d"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_ADDRESS, PREFIX_IS_ONLINE);"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Index index;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        InterviewCode interviewCode;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String[] indexAndCode;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            indexAndCode \u003d ParserUtil.parseInterviewPreamble(argumentMultimap.getPreamble());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(indexAndCode[0]);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            interviewCode \u003d ParserUtil.parseInterviewCode(indexAndCode[1]);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException("},{"lineNumber":43,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewCommand.MESSAGE_USAGE), pe);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        switch (interviewCode) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        case ADD:"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            return parseAdd(index, argumentMultimap);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        case DELETE:"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            if (indexAndCode.length !\u003d 3) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                throw new ParseException("},{"lineNumber":52,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewDeleteCommand.MESSAGE_USAGE));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            return parseDelete(index, indexAndCode[2]);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        case EDIT:"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            if (indexAndCode.length !\u003d 3) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                throw new ParseException("},{"lineNumber":58,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewEditCommand.MESSAGE_USAGE));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return parseEdit(index, indexAndCode[2], argumentMultimap);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        case LIST:"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return new InterviewListCommand(index);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            throw new ParseException(\"invalid\");"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Parses the add version of interview command. Returns an InterviewAddCommand object."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private InterviewCommand parseAdd(Index index, ArgumentMultimap argMultimap) throws ParseException {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_IS_ONLINE, PREFIX_DATE)) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewAddCommand.MESSAGE_USAGE));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        boolean isOnline \u003d Boolean.parseBoolean(argMultimap.getValue(PREFIX_IS_ONLINE).get());"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // check if parseBoolean mistakenly parsed an invalid value as false"},{"lineNumber":78,"author":{"gitId":"gerhean"},"content":"        if (!isOnline \u0026\u0026 !argMultimap.getValue(PREFIX_IS_ONLINE).get().equalsIgnoreCase(\"FALSE\")) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new ParseException(BooleanUtil.INVALID_BOOLEAN);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        ApplicationDate date \u003d ParserUtil.parseApplicationDate(argMultimap.getValue(PREFIX_DATE).get());"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Interview interview \u003d Interview.createOnlineInterview(date);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // if not an online interview but address prefix is missing."},{"lineNumber":85,"author":{"gitId":"-"},"content":"        if (!isOnline \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_ADDRESS)) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                InterviewAddCommand.MESSAGE_OFFLINE_INTERVIEW_ADDRESS));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (!isOnline) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            interview \u003d Interview.createInterview(false, date, address);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return new InterviewAddCommand(index, interview);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Parses the delete version of interview command. Returns an InterviewDeleteCommand object."},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private InterviewCommand parseDelete(Index internshipIndex, String interviewIndex) throws ParseException {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Index index;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(interviewIndex);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            return new InterviewDeleteCommand(internshipIndex, index);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new ParseException("},{"lineNumber":107,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewDeleteCommand.MESSAGE_USAGE), pe);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Parses the edit version of interview command. Returns an InterviewEditCommand object."},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    private InterviewCommand parseEdit(Index internshipIndex,"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        String interviewIndex, ArgumentMultimap argMultimap) throws ParseException {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        Index index;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(interviewIndex);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            throw new ParseException("},{"lineNumber":121,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewEditCommand.MESSAGE_USAGE), pe);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        InterviewEditCommand.EditInterviewDescriptor editInterviewDescriptor \u003d"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            new InterviewEditCommand.EditInterviewDescriptor();"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            editInterviewDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            editInterviewDescriptor.setDate(ParserUtil.parseApplicationDate(argMultimap.getValue(PREFIX_DATE).get()));"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_IS_ONLINE).isPresent()) {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            if (!BooleanUtil.isValidBoolean(argMultimap.getValue(PREFIX_IS_ONLINE).get())) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                throw new ParseException(BooleanUtil.INVALID_BOOLEAN);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            editInterviewDescriptor.setOnline(Boolean.parseBoolean(argMultimap.getValue(PREFIX_IS_ONLINE).get()));"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        if (!editInterviewDescriptor.isAnyFieldEdited()) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            throw new ParseException(InterviewEditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        return new InterviewEditCommand(internshipIndex, index, editInterviewDescriptor);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":148,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":18,"-":135}},{"path":"src/main/java/seedu/diary/logic/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.exceptions.ParseException;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public interface Parser\u003cT extends Command\u003e {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a command and returns it."},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    T parse(String userInput) throws ParseException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":4,"-":13}},{"path":"src/main/java/seedu/diary/logic/parser/ParserUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.interviewcode.InterviewCode;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.util.StringUtil;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Address;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.ApplicationDate;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Company;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Email;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Phone;"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Priority;"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Role;"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.status.Status;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PREAMBLE \u003d"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        \"Index followed by Command Code of add, edit, or delete is expected\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Parses {@code args} into a list of {@code Index} and returns it."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces for each index will be trimmed."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * The list of index will also be sorted and not contain duplicates."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static List\u003cIndex\u003e parseIndices(String args, String delimiter) throws ParseException {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        String[] indices \u003d args.split(delimiter);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        List\u003cInteger\u003e integers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        for (String oneBasedIndex : indices) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            oneBasedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            if (!StringUtil.isNonZeroUnsignedInteger(oneBasedIndex)) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            integers.add(Integer.parseInt(oneBasedIndex));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        List\u003cIndex\u003e indicesList \u003d integers.stream()"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            .distinct()"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            .sorted()"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            .map(oneBasedIndex -\u003e Index.fromOneBased(oneBasedIndex))"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return indicesList;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"gerhean"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"gerhean"},"content":"     * @throws ParseException if the given {@code address} is invalid."},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":106,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid."},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Parses a {@code String company} into an {@code Company}."},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":121,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code company} is invalid."},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public static Company parseCompany(String company) throws ParseException {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        requireNonNull(company);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        String trimmedCompany \u003d company.trim();"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        if (!Company.isValidCompany(trimmedCompany)) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            throw new ParseException(Company.MESSAGE_CONSTRAINTS);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return new Company(trimmedCompany);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * Parses a {@code String role} into an {@code Role}."},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":136,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code role} is invalid."},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public static Role parseRole(String role) throws ParseException {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        requireNonNull(role);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        String trimmedRole \u003d role.trim();"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        if (!Role.isValidRole(trimmedRole)) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            throw new ParseException(Role.MESSAGE_CONSTRAINTS);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        return new Role(trimmedRole);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * Parses a {@code String date} into an {@code LocalDate}."},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":151,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code date} is invalid."},{"lineNumber":153,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitId":"gerhean"},"content":"    public static LocalDate parseDate(String date) throws ParseException {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        requireNonNull(date);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        String trimmedDate \u003d date.trim();"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":158,"author":{"gitId":"gerhean"},"content":"            return LocalDate.parse(trimmedDate, DateTimeFormatter.ofPattern(\"dd MM yyyy\"));"},{"lineNumber":159,"author":{"gitId":"gerhean"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            throw new ParseException(\"Date should be in the form: DD MM YYYY\");"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     * Parses a {@code String applicationDate} into an {@code ApplicationDate}."},{"lineNumber":166,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":167,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":168,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code date} is invalid."},{"lineNumber":169,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    public static ApplicationDate parseApplicationDate(String applicationDate) throws ParseException {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        requireNonNull(applicationDate);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        String trimmedDate \u003d applicationDate.trim();"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        if (!ApplicationDate.isValidApplicationDate(trimmedDate)) {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            throw new ParseException(ApplicationDate.MESSAGE_CONSTRAINTS);"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"        return new ApplicationDate(trimmedDate);"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitId":"-"},"content":"     * Parses a {@code String priority} into an {@code Priority}."},{"lineNumber":182,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":183,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":184,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code priority} is invalid."},{"lineNumber":185,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    public static Priority parsePriority(String priority) throws ParseException {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        requireNonNull(priority);"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        String trimmedPriority \u003d priority.trim();"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        if (!Priority.isValidPriority(trimmedPriority)) {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            throw new ParseException(Priority.MESSAGE_CONSTRAINTS);"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        return new Priority(trimmedPriority);"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":196,"author":{"gitId":"-"},"content":"     * Parses a {@code String status} into an {@code Status}."},{"lineNumber":197,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":198,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":199,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code status} is invalid."},{"lineNumber":200,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    public static Status parseStatus(String status) throws ParseException {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        requireNonNull(status);"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        String trimmedStatus \u003d status.trim();"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        trimmedStatus \u003d trimmedStatus.replaceAll(\"\\\\s\", \"_\");"},{"lineNumber":205,"author":{"gitId":"gerhean"},"content":"        List\u003cStatus\u003e possibleStatus \u003d Status.possibleStatus(trimmedStatus);"},{"lineNumber":206,"author":{"gitId":"gerhean"},"content":"        if (possibleStatus.size() !\u003d 1) {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            throw new ParseException(Status.MESSAGE_CONSTRAINTS);"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitId":"gerhean"},"content":"        return possibleStatus.get(0);"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":213,"author":{"gitId":"-"},"content":"     * Parses the preamble of an interview command."},{"lineNumber":214,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":215,"author":{"gitId":"-"},"content":"     * The preamble should consist of either 2 or 3 strings separated by a single whitespace."},{"lineNumber":216,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":217,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code preamble}"},{"lineNumber":218,"author":{"gitId":"-"},"content":"     * has more than or less than 2/3 strings separated by a single whitespace."},{"lineNumber":219,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    public static String[] parseInterviewPreamble(String preamble) throws ParseException {"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        requireNonNull(preamble);"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        String[] indexAndCode \u003d preamble.trim().split(\" \");"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        if (indexAndCode.length !\u003d 2 \u0026\u0026 indexAndCode.length !\u003d 3) {"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_PREAMBLE);"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        return indexAndCode;"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * Parses a {@code code} into an {@code InterviewCode}."},{"lineNumber":231,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":232,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":233,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code code} is invalid."},{"lineNumber":234,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    public static InterviewCode parseInterviewCode(String code) throws ParseException {"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        requireNonNull(code);"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        String trimmedCode \u003d code.trim();"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        if (!InterviewCode.isValidCode(trimmedCode)) {"},{"lineNumber":239,"author":{"gitId":"-"},"content":"            throw new ParseException(InterviewCode.MESSAGE_CONSTRAINTS);"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        return InterviewCode.valueOf(trimmedCode.toUpperCase());"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":24,"-":219}},{"path":"src/main/java/seedu/diary/logic/parser/Prefix.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * A prefix that marks the beginning of an argument in an arguments string."},{"lineNumber":5,"author":{"gitId":"-"},"content":" * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."},{"lineNumber":6,"author":{"gitId":"-"},"content":" */"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Prefix {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    private final String prefix;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public Prefix(String prefix) {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        this.prefix \u003d prefix;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public String getPrefix() {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return prefix;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return getPrefix();"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Prefix)) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Prefix otherPrefix \u003d (Prefix) obj;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return otherPrefix.getPrefix().equals(getPrefix());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":1,"-":38}},{"path":"src/main/java/seedu/diary/logic/parser/RemovalBasedCommandExecutionTypeParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.ALL_PREFIXES;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.util.PrefixPredicateUtil.getFieldPredicate;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.util.PrefixUtil.areAnyPrefixesPresent;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.commandexecutiontype.RemovalBasedCommandExecutionType;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.RemovalBasedCommand;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new RemovalBasedCommand based on the command execution type."},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Mainly checks whether the input is of a valid format and whether it conforms to any of the"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * command execution type formats."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class RemovalBasedCommandExecutionTypeParser implements Parser\u003cRemovalBasedCommand\u003e {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"     * Prefixes that are accepted for execution by field in RemovalBasedCommand."},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final Prefix[] acceptedPrefixes \u003d {PREFIX_STATUS};"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"     * Holds the specific command string that will be used to create the command."},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final String commandWord;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public RemovalBasedCommandExecutionTypeParser(String commandWord) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.commandWord \u003d commandWord;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Tokenizes the given {@code String} of arguments in the context of the RemovalBasedCommand"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * and retrieves the appropriate execution type based on the content of the string."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @return the appropriate RemovalBasedCommand based the the execution type."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public RemovalBasedCommand parse(String args) throws ParseException {"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, ALL_PREFIXES);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        RemovalBasedCommandExecutionType executionType \u003d"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            RemovalBasedCommandExecutionType.getExecutionType(args, argMultimap);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        switch (executionType) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        case BY_INDEX:"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            return commandByIndex(args);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        case BY_INDICES:"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return commandByIndices(args);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        case BY_FIELD:"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return commandByField(args);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            // this should never happen"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            assert false;"},{"lineNumber":62,"author":{"gitId":"gerhean"},"content":"            throw new IllegalStateException(\"unreachable\");"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of a RemovalBasedCommand"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * that is to be executed by index and returns a RemovalBasedCommand for execution."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * @param args the argument to be parsed into an Index object."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    private RemovalBasedCommand commandByIndex(String args) throws ParseException {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            return new RemovalBasedCommand(index, RemovalBasedCommandExecutionType.BY_INDEX, commandWord);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            String exceptionMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                RemovalBasedCommand.MESSAGE_USAGE_BY_INDEX.apply(commandWord));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            throw new ParseException(exceptionMessage, pe);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the RemovalBasedCommand"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * that is to be executed by multiple indexes and returns a RemovalBasedCommand for execution."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * @param args the argument to be parsed into an a set of Index object."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform to the expected format."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    private RemovalBasedCommand commandByIndices(String args) throws ParseException {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            List\u003cIndex\u003e indicesList \u003d ParserUtil.parseIndices(args, RemovalBasedCommandExecutionType.INDICES_DELIMITER);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            return new RemovalBasedCommand(indicesList, RemovalBasedCommandExecutionType.BY_INDICES, commandWord);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            String exceptionMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                RemovalBasedCommand.MESSAGE_USAGE_BY_INDICES.apply(commandWord));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new ParseException(exceptionMessage, pe);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the RemovalBasedCommand"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * that is to be executed by accepted fields/prefixes and returns a RemovalBasedCommand for execution."},{"lineNumber":106,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @param args the argument to be parsed into a predicate."},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform to the expected format."},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    private RemovalBasedCommand commandByField(String args) throws ParseException {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        Predicate\u003cInternshipApplication\u003e predicate \u003d generatePredicate(args);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return new RemovalBasedCommand(predicate, RemovalBasedCommandExecutionType.BY_FIELD, commandWord);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Creates the appropriate predicate according to the argument."},{"lineNumber":117,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * @param args the argument to be parsed into a predicate."},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform to the expected format."},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    private Predicate\u003cInternshipApplication\u003e generatePredicate(String args) throws ParseException {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, acceptedPrefixes);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        boolean isValidField \u003d checkValidField(argMultimap);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (!isValidField) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            String exceptionMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                RemovalBasedCommand.MESSAGE_USAGE_BY_FIELD.apply(commandWord));"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            throw new ParseException(exceptionMessage);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        return getFieldPredicate(argMultimap, acceptedPrefixes);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    private boolean checkValidField(ArgumentMultimap argMultimap) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        boolean hasOnlyOneField \u003d (argMultimap.getSize() - 1) \u003d\u003d 1;"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        boolean hasAcceptedPrefixesPresent \u003d areAnyPrefixesPresent(argMultimap, acceptedPrefixes);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return hasOnlyOneField \u0026 hasAcceptedPrefixesPresent;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":18,"-":120}},{"path":"src/main/java/seedu/diary/logic/parser/SelectCommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.SelectCommand;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new SelectCommand object"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the SelectCommand"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * and returns a SelectCommand object for execution."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public SelectCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            return new SelectCommand(index);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE), pe);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":5,"-":24}},{"path":"src/main/java/seedu/diary/logic/parser/SortCommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.parser;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_COMPANY;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import java.util.Comparator;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import java.util.Map;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import java.util.stream.Collectors;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.SortCommand;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.comparator.ApplicationDateComparator;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.comparator.CompanyComparator;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.comparator.PriorityComparator;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.comparator.RoleComparator;"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.comparator.StatusComparator;"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.exceptions.ParseException;"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new SortCommand object"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":" */"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"public class SortCommandParser implements Parser\u003cSortCommand\u003e {"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"    private static final Map\u003cPrefix, Comparator\u003cInternshipApplication\u003e\u003e comparatorMap;"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"    private static final Prefix[] acceptedPrefixes;"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"    static {"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"        comparatorMap \u003d Map.of("},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"            PREFIX_COMPANY, new CompanyComparator(),"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"            PREFIX_ROLE, new RoleComparator(),"},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"            PREFIX_DATE, new ApplicationDateComparator(),"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"            PREFIX_PRIORITY, new PriorityComparator(),"},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"            PREFIX_STATUS, new StatusComparator()"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"        );"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"        acceptedPrefixes \u003d comparatorMap.keySet().toArray(new Prefix[0]);"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"     * and returns a FindCommand object for execution."},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"    public SortCommand parse(String args) throws ParseException {"},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, acceptedPrefixes);"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":"        Comparator\u003cInternshipApplication\u003e comparator \u003d argMultimapToComparator(argMultimap);"},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":"        if (argMultimap.getPreamble().equals(SortCommand.REVERSE_KEYWORD)) {"},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":"            comparator \u003d comparator.reversed();"},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":"        } else if (!argMultimap.getPreamble().equals(\"\")) {"},{"lineNumber":55,"author":{"gitId":"gerhean"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":"        return new SortCommand(comparator);"},{"lineNumber":58,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":"     * Returns the comparator corresponding to the argMultimap given."},{"lineNumber":62,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"gerhean"},"content":"     * @throws ParseException if the argMultimap does not contain exactly one accepted prefix."},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":"    private Comparator\u003cInternshipApplication\u003e argMultimapToComparator(ArgumentMultimap argMultimap)"},{"lineNumber":66,"author":{"gitId":"gerhean"},"content":"        throws ParseException {"},{"lineNumber":67,"author":{"gitId":"gerhean"},"content":"        List\u003cPrefix\u003e prefixFound \u003d Arrays.stream(acceptedPrefixes)"},{"lineNumber":68,"author":{"gitId":"gerhean"},"content":"            .filter(p -\u003e argMultimap.getValue(p).isPresent())"},{"lineNumber":69,"author":{"gitId":"gerhean"},"content":"            .collect(Collectors.toList());"},{"lineNumber":70,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":71,"author":{"gitId":"gerhean"},"content":"        if (prefixFound.size() !\u003d 1) {"},{"lineNumber":72,"author":{"gitId":"gerhean"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":73,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"gerhean"},"content":"        Prefix prefix \u003d prefixFound.get(0);"},{"lineNumber":75,"author":{"gitId":"gerhean"},"content":"        if (argMultimap.getAllValues(prefix).size() !\u003d 1) {"},{"lineNumber":76,"author":{"gitId":"gerhean"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":77,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"gerhean"},"content":"        // isPresent check already done above."},{"lineNumber":79,"author":{"gitId":"gerhean"},"content":"        if (!argMultimap.getValue(prefix).get().equals(\"\")) {"},{"lineNumber":80,"author":{"gitId":"gerhean"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":81,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"gerhean"},"content":"        return comparatorMap.get(prefix);"},{"lineNumber":83,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":85,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":84,"-":1}},{"path":"src/main/java/seedu/diary/logic/parser/UnarchiveCommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.UnarchiveCommand;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new UnarchiveCommand object."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class UnarchiveCommandParser implements Parser\u003cUnarchiveCommand\u003e {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the UnarchiveCommand"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * and returns a UnarchiveCommand object for execution."},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public UnarchiveCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            return new UnarchiveCommand(index);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnarchiveCommand.MESSAGE_USAGE), pe);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":6,"-":24}},{"path":"src/main/java/seedu/diary/logic/parser/exceptions/ClearCommandConfirmationParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.parser.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents a ClearCommandConfirmationParser parsing error encountered by a parser."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class ClearCommandConfirmationParseException extends ParseException {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public ClearCommandConfirmationParseException(String message) {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        super(message);"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":1,"-":11}},{"path":"src/main/java/seedu/diary/logic/parser/exceptions/ParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.parser.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a parse error encountered by a parser."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ParseException extends IllegalValueException {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public ParseException(String message) {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public ParseException(String message, Throwable cause) {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":2,"-":15}},{"path":"src/main/java/seedu/diary/logic/util/PrefixPredicateUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_COMPANY;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.ArgumentMultimap;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.Prefix;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.exceptions.ParseException;"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.AddressContainsKeywordsPredicate;"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.CompanyContainsKeywordsPredicate;"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.EmailContainsKeywordsPredicate;"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.PhoneContainsNumbersPredicate;"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.PriorityContainsNumbersPredicate;"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.RoleContainsKeywordsPredicate;"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.StatusContainsKeywordsPredicate;"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.status.Status;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Contains utility methods used for prefixes in the various *Parser classes."},{"lineNumber":33,"author":{"gitId":"-"},"content":" */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class PrefixPredicateUtil {"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"     * Prefixes and their mapping to its appropriate predicates."},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final Map\u003cPrefix, PredicateFunction\u003e PREDICATE_MAP \u003d Map.of("},{"lineNumber":40,"author":{"gitId":"-"},"content":"        PREFIX_COMPANY, CompanyContainsKeywordsPredicate::new,"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        PREFIX_ROLE, RoleContainsKeywordsPredicate::new,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        PREFIX_STATUS, StatusContainsKeywordsPredicate::new,"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        PREFIX_PRIORITY, PriorityContainsNumbersPredicate::new,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        PREFIX_ADDRESS, AddressContainsKeywordsPredicate::new,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        PREFIX_EMAIL, EmailContainsKeywordsPredicate::new,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        PREFIX_PHONE, PhoneContainsNumbersPredicate::new"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * To execute a predicate lazily."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @FunctionalInterface"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public interface PredicateFunction {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Predicate\u003cInternshipApplication\u003e apply(List\u003cString\u003e t) throws ParseException;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Retrieves the value of the prefix from argument multimap"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * and packages it into a predicate for internship application."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Checks if the user input is a valid status."},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * @param argMultimap argument multimap to extract the prefix for predicate creation."},{"lineNumber":63,"author":{"gitId":"gerhean"},"content":"     * @return predicate to filter internship application list."},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static Predicate\u003cInternshipApplication\u003e getFieldPredicate(ArgumentMultimap argMultimap,"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        Prefix[] acceptedPrefixes) throws ParseException {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d null;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        Prefix selectedPrefix \u003d null;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        for (Prefix prefix : acceptedPrefixes) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            if (argMultimap.getValue(prefix).isPresent()) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                String input \u003d argMultimap.getValue(prefix).get();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                selectedPrefix \u003d prefix;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                keywords \u003d Arrays.asList(input.split(\"\\\\s+\"));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                break;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        requireNonNull(keywords);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        keywords \u003d filterValidStatuses(keywords);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Predicate\u003cInternshipApplication\u003e predicate \u003d PREDICATE_MAP.get(selectedPrefix).apply(keywords);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return predicate;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Checks if any of the user keywords contain valid statuses."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * @param keywords to check for valid statuses."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    private static List\u003cString\u003e filterValidStatuses(List\u003cString\u003e keywords) throws ParseException {"},{"lineNumber":91,"author":{"gitId":"gerhean"},"content":"        List\u003cString\u003e validKeywords \u003d keywords.stream()"},{"lineNumber":92,"author":{"gitId":"gerhean"},"content":"            .filter(Status::isValidStatus)"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":94,"author":{"gitId":"gerhean"},"content":"        if (validKeywords.isEmpty()) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new ParseException(Status.MESSAGE_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return validKeywords;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":28,"-":72}},{"path":"src/main/java/seedu/diary/logic/util/PrefixUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.ArgumentMultimap;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.Prefix;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Contains utility methods used for prefixes in the various *Parser classes."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class PrefixUtil {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns true if not all of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static boolean areAnyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":3,"-":26}},{"path":"src/main/java/seedu/diary/model/InternshipDiary.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.model.ListenerPropertyType.DISPLAYED_INTERNSHIPS;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.beans.PropertyChangeListener;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.beans.PropertyChangeSupport;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.archival.InternshipApplicationViewType;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.UniqueInternshipApplicationList;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Wraps all data at the internship-diary level"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSameInternshipApplication comparison)"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":" */"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"public class InternshipDiary implements ReadOnlyInternshipDiary {"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"    private UniqueInternshipApplicationList unarchivedInternships \u003d new UniqueInternshipApplicationList();"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"    private UniqueInternshipApplicationList archivedInternships \u003d new UniqueInternshipApplicationList();"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"     * The internship list that is shown to the user on the interface currently."},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"    private UniqueInternshipApplicationList displayedInternships \u003d unarchivedInternships;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private InternshipApplicationViewType currentView \u003d InternshipApplicationViewType.UNARCHIVED;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final PropertyChangeSupport changes \u003d new PropertyChangeSupport(this);"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"    public InternshipDiary() {"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Creates an InternshipDiary using the InternshipApplications in the {@code toBeCopied}"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"    public InternshipDiary(ReadOnlyInternshipDiary toBeCopied) {"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"        this();"},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"        resetData(toBeCopied);"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    //// property change listeners"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void addPropertyChangeListener(ListenerPropertyType propertyType, PropertyChangeListener l) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        changes.addPropertyChangeListener(propertyType.toString(), l);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private void firePropertyChange(ListenerPropertyType propertyType, Object newValue) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        changes.firePropertyChange(propertyType.toString(), null, newValue);"},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    //// internship list views"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Sets the displayed internship application(s) list with archived internship application(s) list."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Updates its observers about the change in the displayed internships."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void viewArchivedInternshipApplicationList() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.displayedInternships \u003d archivedInternships;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.currentView \u003d InternshipApplicationViewType.ARCHIVED;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        firePropertyChange(DISPLAYED_INTERNSHIPS, getDisplayedInternshipList());"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Sets the displayed internship application(s) list with unarchived internship application(s) list."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Updates its observers about the change in the displayed internships."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void viewUnarchivedInternshipApplicationList() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        this.displayedInternships \u003d unarchivedInternships;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        this.currentView \u003d InternshipApplicationViewType.UNARCHIVED;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        firePropertyChange(DISPLAYED_INTERNSHIPS, getDisplayedInternshipList());"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Retrieves the current view of the internship applications (either archived or unarchived)."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public InternshipApplicationViewType getCurrentView() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return this.currentView;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    //// list overwrite operations"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Resets the existing archived and unarchived internship application data of this {@code InternshipDiary}"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * with appropriate applications from {@code newData}."},{"lineNumber":92,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"gerhean"},"content":"    public void resetData(ReadOnlyInternshipDiary newData) {"},{"lineNumber":94,"author":{"gitId":"gerhean"},"content":"        requireNonNull(newData);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // check if newData contains any duplicate internship applications as a whole"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        new UniqueInternshipApplicationList().setInternshipApplications(newData.getAllInternshipList());"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        setArchivedInternships(newData.getAllInternshipList());"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        setUnarchivedInternships(newData.getAllInternshipList());"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Replaces the contents of the archived internship application list with {@code internshipApplications}."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * {@code internshipApplications} must not contain duplicate internship applications."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void setArchivedInternships(List\u003cInternshipApplication\u003e internshipApplications) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        List\u003cInternshipApplication\u003e archived \u003d internshipApplications.stream()"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            .filter((internshipApplication) -\u003e internshipApplication.isArchived())"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        this.archivedInternships.setInternshipApplications(archived);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Replaces the contents of the unarchived internship application list with {@code internshipApplications}."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * {@code internshipApplications} must not contain duplicate internship applications."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void setUnarchivedInternships(List\u003cInternshipApplication\u003e internshipApplications) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        List\u003cInternshipApplication\u003e unarchived \u003d internshipApplications.stream()"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            .filter((internshipApplication) -\u003e !internshipApplication.isArchived())"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        this.unarchivedInternships.setInternshipApplications(unarchived);"},{"lineNumber":121,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    //// internship-application-level operations"},{"lineNumber":124,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":125,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * Returns true if an internship application with the same identity as {@code internshipApplication}"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * exists in the internship diary."},{"lineNumber":128,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"gerhean"},"content":"    public boolean hasInternship(InternshipApplication internshipApplication) {"},{"lineNumber":130,"author":{"gitId":"gerhean"},"content":"        requireNonNull(internshipApplication);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        return displayedInternships.contains(internshipApplication);"},{"lineNumber":132,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * Archives an internship application and moves it to the unarchived list in the internship diary."},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * The internship application must already exist in the internship diary."},{"lineNumber":137,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public void archiveInternshipApplication(InternshipApplication internshipApplication) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        unarchivedInternships.remove(internshipApplication);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        InternshipApplication archived \u003d internshipApplication.archive();"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        archivedInternships.add(archived);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * Unarchives an internship application and moves it to the unarchived list in the internship diary."},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * The internship application must already exist in the internship diary."},{"lineNumber":147,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    public void unarchiveInternshipApplication(InternshipApplication internshipApplication) {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        archivedInternships.remove(internshipApplication);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        InternshipApplication unarchived \u003d internshipApplication.unarchive();"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        unarchivedInternships.add(unarchived);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * Loads an internship application into the internship diary from storage."},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * Internship application is added to the archived internship application list if it is archived."},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * Otherwise, it is added to the unarchived internship application list."},{"lineNumber":158,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    public void loadInternshipApplication(InternshipApplication internshipApplication) {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        if (internshipApplication.isArchived()) {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            archivedInternships.add(internshipApplication);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            unarchivedInternships.add(internshipApplication);"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":168,"author":{"gitId":"-"},"content":"     * Adds an internship application to the internship diary from the user interface."},{"lineNumber":169,"author":{"gitId":"-"},"content":"     * The internship application must not already exist in the internship diary."},{"lineNumber":170,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    public void addInternshipApplication(InternshipApplication internshipApplication) {"},{"lineNumber":172,"author":{"gitId":"gerhean"},"content":"        InternshipApplication internshipApplicationToAdd \u003d internshipApplication;"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        if (currentView.equals(InternshipApplicationViewType.ARCHIVED)) {"},{"lineNumber":174,"author":{"gitId":"gerhean"},"content":"            internshipApplicationToAdd \u003d internshipApplication.archive();"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"gerhean"},"content":"        displayedInternships.add(internshipApplicationToAdd);"},{"lineNumber":177,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":179,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":180,"author":{"gitId":"-"},"content":"     * Replaces the given internship application {@code target} in the list with {@code editedInternship}."},{"lineNumber":181,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the internship diary."},{"lineNumber":182,"author":{"gitId":"-"},"content":"     * The internship application identity of {@code editedInternship}"},{"lineNumber":183,"author":{"gitId":"-"},"content":"     * must not be the same as another existing internship application in the internship diary."},{"lineNumber":184,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":185,"author":{"gitId":"gerhean"},"content":"    public void setInternship(InternshipApplication target, InternshipApplication editedInternship) {"},{"lineNumber":186,"author":{"gitId":"gerhean"},"content":"        requireNonNull(editedInternship);"},{"lineNumber":187,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"        displayedInternships.setInternshipApplication(target, editedInternship);"},{"lineNumber":189,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":191,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":192,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code InternshipDiary}."},{"lineNumber":193,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the internship diary."},{"lineNumber":194,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":195,"author":{"gitId":"gerhean"},"content":"    public void removeInternship(InternshipApplication key) {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        displayedInternships.remove(key);"},{"lineNumber":197,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":199,"author":{"gitId":"gerhean"},"content":"    //// util methods"},{"lineNumber":200,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":201,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":202,"author":{"gitId":"gerhean"},"content":"    public String toString() {"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        return displayedInternships.asUnmodifiableObservableList().size() + \" internship application(s)\";"},{"lineNumber":204,"author":{"gitId":"gerhean"},"content":"        // TODO: refine later"},{"lineNumber":205,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":206,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":207,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    public ObservableList\u003cInternshipApplication\u003e getDisplayedInternshipList() {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        return displayedInternships.asUnmodifiableObservableList();"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"    @SuppressWarnings(\"unchecked\")"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    public ObservableList\u003cInternshipApplication\u003e getAllInternshipList() {"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        return FXCollections.concat(archivedInternships.asUnmodifiableObservableList(),"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            unarchivedInternships.asUnmodifiableObservableList());"},{"lineNumber":217,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":218,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":219,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":220,"author":{"gitId":"gerhean"},"content":"    public boolean equals(Object other) {"},{"lineNumber":221,"author":{"gitId":"gerhean"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":222,"author":{"gitId":"gerhean"},"content":"            || (other instanceof InternshipDiary // instanceof handles nulls"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            \u0026\u0026 archivedInternships.equals(((InternshipDiary) other).archivedInternships))"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            \u0026\u0026 unarchivedInternships.equals(((InternshipDiary) other).unarchivedInternships)"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            \u0026\u0026 currentView.equals(((InternshipDiary) other).currentView);"},{"lineNumber":226,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":227,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":228,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":229,"author":{"gitId":"gerhean"},"content":"    public int hashCode() {"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        return Objects.hash(archivedInternships, unarchivedInternships, currentView);"},{"lineNumber":231,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":232,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":89,"-":143}},{"path":"src/main/java/seedu/diary/model/ListenerPropertyType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":" * Enums for the ListenerPropertyTypes to pass to addPropertyChangeListener in Model."},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":" */"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"public enum ListenerPropertyType {"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"    COMPARATOR(\"comparator\"),"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"    PREDICATE(\"predicate\"),"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    FILTERED_INTERNSHIP_APPLICATIONS(\"filteredInternshipApplications\"),"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    DISPLAYED_INTERNSHIPS(\"displayedInternships\"),"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"    VIEW_TYPE(\"currentView\"),"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    DISPLAYED_INTERNSHIP_DETAIL(\"displayedDetails\"),"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    DISPLAYED_INTERVIEWS(\"displayedInterviews\");"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"    private String propertyName;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"    ListenerPropertyType(String propertyName) {"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"        this.propertyName \u003d propertyName;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"        return propertyName;"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":21,"-":4}},{"path":"src/main/java/seedu/diary/model/Model.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.beans.PropertyChangeListener;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import java.util.Comparator;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.GuiSettings;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.archival.InternshipApplicationViewType;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.statistics.Statistics;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The API of the Model component."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public interface Model {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"     * {@code Predicate} that always evaluate to true"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    Predicate\u003cInternshipApplication\u003e PREDICATE_SHOW_ALL_INTERNSHIPS \u003d unused -\u003e true;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns the user prefs."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 internship diary file path."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    Path getInternshipDiaryFilePath();"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 internship diary file path."},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @param internshipDiaryFilePath new file path."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    void setInternshipDiaryFilePath(Path internshipDiaryFilePath);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Replaces internship diary with the data in {@code internshipDiary}"},{"lineNumber":59,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @param internshipDiary new internship diary."},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    void setInternshipDiary(ReadOnlyInternshipDiary internshipDiary);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":"     * Returns the InternshipDiary"},{"lineNumber":66,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    ReadOnlyInternshipDiary getInternshipDiary();"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Returns true if an internship application with the same identity as {@code internshipApplication}"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * exists in the Internship Diary."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    boolean hasInternshipApplication(InternshipApplication internshipApplication);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Archives the given internship application."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * The application must exist in the internship diary."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    void archiveInternshipApplication(InternshipApplication target);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Unarchives the given internship application."},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * The application must exist in the internship diary."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    void unarchiveInternshipApplication(InternshipApplication target);"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Deletes the given internship application."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * The application must exist in the internship diary."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    void deleteInternshipApplication(InternshipApplication target);"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Adds the given internship application."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * {@code internshipApplication} must not already exist in the internship diary"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    void addInternshipApplication(InternshipApplication internshipApplication);"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Replaces the given internship application {@code target} with {@code editedInternship}."},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the internship application."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * The internship application identify of {@code editedInternship} must not be the same"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * as another existing internship application in the internship diary."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    void setInternshipApplication(InternshipApplication target, InternshipApplication editedInternship);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the filtered internship applications list"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    ObservableList\u003cInternshipApplication\u003e getFilteredInternshipApplicationList();"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered internship application list to filter by the given {@code predicate}."},{"lineNumber":114,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    void updateFilteredInternshipApplicationList(Predicate\u003cInternshipApplication\u003e predicate);"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"gerhean"},"content":"     * Updates the filter of the filtered internship application list to sort by the given {@code predicate}."},{"lineNumber":121,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":122,"author":{"gitId":"gerhean"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":123,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"gerhean"},"content":"    void updateFilteredInternshipApplicationList(Comparator\u003cInternshipApplication\u003e comparator);"},{"lineNumber":125,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Updates the currently used internship application(s) list with the archived internship application list(s)."},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    void viewArchivedInternshipApplicationList();"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Updates the currently used internship application(s) list with the unarchived internship application list(s)."},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    void viewUnarchivedInternshipApplicationList();"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the concatenated archived and unarchived internship applications list."},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    ObservableList\u003cInternshipApplication\u003e getAllInternshipApplicationList();"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * Retrieves the current view of the internship diary."},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    InternshipApplicationViewType getCurrentView();"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":147,"author":{"gitId":"gerhean"},"content":"     * Changes the currently displayed InternshipApplicationDetail."},{"lineNumber":148,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"gerhean"},"content":"    void displayInternshipDetail(InternshipApplication internshipApplication);"},{"lineNumber":150,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"gerhean"},"content":"     * Adds a property listener for any changes in {@code propertyType} used."},{"lineNumber":153,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":154,"author":{"gitId":"gerhean"},"content":"    void addPropertyChangeListener(ListenerPropertyType propertyType, PropertyChangeListener l);"},{"lineNumber":155,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * Returns a statistics object that can compute relevant internship application statistics."},{"lineNumber":158,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    Statistics getStatistics();"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":32,"-":129}},{"path":"src/main/java/seedu/diary/model/ModelManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.model.ListenerPropertyType.COMPARATOR;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.model.ListenerPropertyType.DISPLAYED_INTERNSHIPS;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.model.ListenerPropertyType.DISPLAYED_INTERNSHIP_DETAIL;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.model.ListenerPropertyType.FILTERED_INTERNSHIP_APPLICATIONS;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.model.ListenerPropertyType.PREDICATE;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.model.ListenerPropertyType.VIEW_TYPE;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.beans.PropertyChangeEvent;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.beans.PropertyChangeListener;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.beans.PropertyChangeSupport;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import java.util.Comparator;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"import javafx.collections.transformation.SortedList;"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.GuiSettings;"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.LogsCenter;"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.archival.InternshipApplicationViewType;"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.statistics.Statistics;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the internship diary data."},{"lineNumber":32,"author":{"gitId":"-"},"content":" */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class ModelManager implements Model, PropertyChangeListener {"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private final Statistics statistics;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"    private InternshipDiary internshipDiary;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"    private FilteredList\u003cInternshipApplication\u003e filteredInternshipApplications;"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"    private SortedList\u003cInternshipApplication\u003e sortedFilteredInternshipApplications;"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private final PropertyChangeSupport changes \u003d new PropertyChangeSupport(this);"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given internshipDiary and userPrefs."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyInternshipDiary internshipDiary, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        requireAllNonNull(internshipDiary, userPrefs);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with internship diary: \" + internshipDiary + \" and user prefs \" + userPrefs);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.internshipDiary \u003d new InternshipDiary(internshipDiary);"},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":"        // Model manager listens to any changes in displayedInternships in internshipDiary"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        this.internshipDiary.addPropertyChangeListener(DISPLAYED_INTERNSHIPS, this);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        this.statistics \u003d new Statistics();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        filteredInternshipApplications \u003d new FilteredList\u003c\u003e(this.internshipDiary.getDisplayedInternshipList());"},{"lineNumber":62,"author":{"gitId":"gerhean"},"content":"        sortedFilteredInternshipApplications \u003d new SortedList\u003c\u003e(filteredInternshipApplications);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public ModelManager() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this(new InternshipDiary(), new UserPrefs());"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public Path getInternshipDiaryFilePath() {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return userPrefs.getInternshipDiaryFilePath();"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void setInternshipDiaryFilePath(Path internshipDiaryFilePath) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        requireNonNull(internshipDiaryFilePath);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        userPrefs.setInternshipDiaryFilePath(internshipDiaryFilePath);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d InternshipDiary \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public ReadOnlyInternshipDiary getInternshipDiary() {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        return internshipDiary;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void setInternshipDiary(ReadOnlyInternshipDiary internshipDiary) {"},{"lineNumber":113,"author":{"gitId":"gerhean"},"content":"        firePropertyChange(DISPLAYED_INTERNSHIP_DETAIL, null);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        this.internshipDiary.resetData(internshipDiary);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void addInternshipApplication(InternshipApplication internshipApplication) {"},{"lineNumber":119,"author":{"gitId":"gerhean"},"content":"        firePropertyChange(DISPLAYED_INTERNSHIP_DETAIL, internshipApplication);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        internshipDiary.addInternshipApplication(internshipApplication);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void deleteInternshipApplication(InternshipApplication target) {"},{"lineNumber":125,"author":{"gitId":"gerhean"},"content":"        firePropertyChange(DISPLAYED_INTERNSHIP_DETAIL, target, null);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        internshipDiary.removeInternship(target);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void archiveInternshipApplication(InternshipApplication target) {"},{"lineNumber":131,"author":{"gitId":"gerhean"},"content":"        firePropertyChange(DISPLAYED_INTERNSHIP_DETAIL, target, null);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        internshipDiary.archiveInternshipApplication(target);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void unarchiveInternshipApplication(InternshipApplication target) {"},{"lineNumber":137,"author":{"gitId":"gerhean"},"content":"        firePropertyChange(DISPLAYED_INTERNSHIP_DETAIL, target, null);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        internshipDiary.unarchiveInternshipApplication(target);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public boolean hasInternshipApplication(InternshipApplication internshipApplication) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        requireNonNull(internshipApplication);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        return internshipDiary.hasInternship(internshipApplication);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    public void setInternshipApplication(InternshipApplication target, InternshipApplication editedInternship) {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedInternship);"},{"lineNumber":150,"author":{"gitId":"gerhean"},"content":"        firePropertyChange(DISPLAYED_INTERNSHIP_DETAIL, target, editedInternship);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        internshipDiary.setInternship(target, editedInternship);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Internship Application List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the concatenated archived and unarchived list of {@code InternshipApplication}"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     * backed by the internal list of {@code versionedInternshipDiary}"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    public ObservableList\u003cInternshipApplication\u003e getAllInternshipApplicationList() {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        return internshipDiary.getAllInternshipList();"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the current list of {@code InternshipApplication}"},{"lineNumber":167,"author":{"gitId":"-"},"content":"     * backed by the internal list of {@code versionedInternshipDiary}"},{"lineNumber":168,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    public ObservableList\u003cInternshipApplication\u003e getFilteredInternshipApplicationList() {"},{"lineNumber":171,"author":{"gitId":"gerhean"},"content":"        return sortedFilteredInternshipApplications;"},{"lineNumber":172,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void updateFilteredInternshipApplicationList(Predicate\u003cInternshipApplication\u003e predicate) {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        filteredInternshipApplications.setPredicate(predicate);"},{"lineNumber":178,"author":{"gitId":"gerhean"},"content":"        firePropertyChange(PREDICATE, predicate);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":182,"author":{"gitId":"gerhean"},"content":"    public void updateFilteredInternshipApplicationList(Comparator\u003cInternshipApplication\u003e comparator) {"},{"lineNumber":183,"author":{"gitId":"gerhean"},"content":"        requireNonNull(comparator);"},{"lineNumber":184,"author":{"gitId":"gerhean"},"content":"        sortedFilteredInternshipApplications.setComparator(comparator);"},{"lineNumber":185,"author":{"gitId":"gerhean"},"content":"        firePropertyChange(COMPARATOR, comparator);"},{"lineNumber":186,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Archival view \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    public void viewArchivedInternshipApplicationList() {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        internshipDiary.viewArchivedInternshipApplicationList();"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    public void viewUnarchivedInternshipApplicationList() {"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        internshipDiary.viewUnarchivedInternshipApplicationList();"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    public InternshipApplicationViewType getCurrentView() {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        return internshipDiary.getCurrentView();"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Statistics \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    public Statistics getStatistics() {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        return statistics;"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PropertyChanges \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":215,"author":{"gitId":"gerhean"},"content":"    public void displayInternshipDetail(InternshipApplication internshipApplication) {"},{"lineNumber":216,"author":{"gitId":"gerhean"},"content":"        firePropertyChange(DISPLAYED_INTERNSHIP_DETAIL, internshipApplication);"},{"lineNumber":217,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":218,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    public void addPropertyChangeListener(ListenerPropertyType propertyType, PropertyChangeListener l) {"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        changes.addPropertyChangeListener(propertyType.toString(), l);"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"    private void firePropertyChange(ListenerPropertyType propertyType, Object newValue) {"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        changes.firePropertyChange(propertyType.toString(), null, newValue);"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"gerhean"},"content":"    private void firePropertyChange(ListenerPropertyType propertyType, Object oldValue, Object newValue) {"},{"lineNumber":229,"author":{"gitId":"gerhean"},"content":"        changes.firePropertyChange(propertyType.toString(), oldValue, newValue);"},{"lineNumber":230,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":231,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":233,"author":{"gitId":"-"},"content":"     * Receives the latest changes in displayed internships from internship diary."},{"lineNumber":234,"author":{"gitId":"-"},"content":"     * Updates the filtered and sorted internship applications accordingly"},{"lineNumber":235,"author":{"gitId":"-"},"content":"     * and fires property change event to its listeners."},{"lineNumber":236,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":237,"author":{"gitId":"-"},"content":"     * @param e event that describes the changes in the updated property."},{"lineNumber":238,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    public void propertyChange(PropertyChangeEvent e) {"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        refreshFilteredInternshipApplications(e.getNewValue());"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        fireAllPropertyChanges();"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":246,"author":{"gitId":"-"},"content":"     * Updates the current filtered internship applicaations with the refreshed displayed internship applications."},{"lineNumber":247,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":248,"author":{"gitId":"-"},"content":"     * @param newInternshipApplications the new list to replace the current filtered internship applications."},{"lineNumber":249,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    @SuppressWarnings(\"unchecked\")"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    private void refreshFilteredInternshipApplications(Object newInternshipApplications) {"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        ObservableList\u003cInternshipApplication\u003e ia \u003d (ObservableList\u003cInternshipApplication\u003e) newInternshipApplications;"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        filteredInternshipApplications \u003d new FilteredList\u003c\u003e(ia);"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        sortedFilteredInternshipApplications \u003d new SortedList\u003c\u003e(filteredInternshipApplications);"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":258,"author":{"gitId":"-"},"content":"     * Fires all the relevant property changes to the listeners."},{"lineNumber":259,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    private void fireAllPropertyChanges() {"},{"lineNumber":261,"author":{"gitId":"gerhean"},"content":"        firePropertyChange(FILTERED_INTERNSHIP_APPLICATIONS, getFilteredInternshipApplicationList());"},{"lineNumber":262,"author":{"gitId":"gerhean"},"content":"        firePropertyChange(DISPLAYED_INTERNSHIP_DETAIL, null);"},{"lineNumber":263,"author":{"gitId":"gerhean"},"content":"        firePropertyChange(COMPARATOR, null);"},{"lineNumber":264,"author":{"gitId":"gerhean"},"content":"        firePropertyChange(PREDICATE, null);"},{"lineNumber":265,"author":{"gitId":"-"},"content":"        firePropertyChange(VIEW_TYPE, getCurrentView());"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":272,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":276,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":277,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":278,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":279,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":280,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":281,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":282,"author":{"gitId":"-"},"content":"        return internshipDiary.equals(other.internshipDiary)"},{"lineNumber":283,"author":{"gitId":"-"},"content":"            \u0026\u0026 userPrefs.equals(other.userPrefs)"},{"lineNumber":284,"author":{"gitId":"-"},"content":"            \u0026\u0026 filteredInternshipApplications.equals(other.filteredInternshipApplications);"},{"lineNumber":285,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":286,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":57,"-":230}},{"path":"src/main/java/seedu/diary/model/ReadOnlyInternshipDiary.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.beans.PropertyChangeListener;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Unmodifiable view of an internship diary"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":" */"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"public interface ReadOnlyInternshipDiary {"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the currently displayed internship application list."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate internship application."},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ObservableList\u003cInternshipApplication\u003e getDisplayedInternshipList();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of both the archived and unarchived internship application list."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate internship application."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    ObservableList\u003cInternshipApplication\u003e getAllInternshipList();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Adds a property listener for any changes in {@code propertyType} used."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    void addPropertyChangeListener(ListenerPropertyType propertyType, PropertyChangeListener l);"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":14,"-":18}},{"path":"src/main/java/seedu/diary/model/ReadOnlyUserPrefs.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    Path getInternshipDiaryFilePath();"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":2,"-":13}},{"path":"src/main/java/seedu/diary/model/UserPrefs.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.GuiSettings;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path internshipDiaryFilePath \u003d Paths.get(\"data\", \"internshipdiary.json\");"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"    public UserPrefs() {"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        resetData(userPrefs);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        setInternshipDiaryFilePath(newUserPrefs.getInternshipDiaryFilePath());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return guiSettings;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public Path getInternshipDiaryFilePath() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return internshipDiaryFilePath;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setInternshipDiaryFilePath(Path internshipDiaryFilePath) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        requireNonNull(internshipDiaryFilePath);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        this.internshipDiaryFilePath \u003d internshipDiaryFilePath;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            \u0026\u0026 internshipDiaryFilePath.equals(o.internshipDiaryFilePath);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return Objects.hash(guiSettings, internshipDiaryFilePath);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + internshipDiaryFilePath);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":4,"-":84}},{"path":"src/main/java/seedu/diary/model/internship/Address.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":" * Represents an InternshipApplication\u0027s address in the internship diary."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Address {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"    public static final String VALIDATION_REGEX \u003d \"^([^\\\\s].*)?$\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs an {@code Address}."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"     * @param address A valid address."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Address(String address) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        value \u003d address;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid email."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            || (other instanceof Address // instanceof handles nulls"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            \u0026\u0026 value.equals(((Address) other).value)); // state check"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":6,"-":50}},{"path":"src/main/java/seedu/diary/model/internship/ApplicationDate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.util.DateTimeUtil;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Represents a InternshipApplication\u0027s application date in the internship diary."},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidApplicationDate(String)}"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"public class ApplicationDate implements Comparable\u003cApplicationDate\u003e {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"        \"Date should be a valid date in the form: DD MM YYYY\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"    // Default Pattern"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DATE_PATTERN \u003d \"dd MM yyyy\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    // To print pattern"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DATE_PATTERN_TO_PRINT \u003d \"dd MMM yyyy\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public final LocalDate fullApplicationDate;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Constructs a {@code ApplicationDate}."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @param date A valid date."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public ApplicationDate(String date) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        requireNonNull(date);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        checkArgument(isValidApplicationDate(date), MESSAGE_CONSTRAINTS);"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"        fullApplicationDate \u003d DateTimeUtil.parseDate(date);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Constructs a {@code ApplicationDate}."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @param date A valid date of type LocalDate."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public ApplicationDate(LocalDate date) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        requireNonNull(date);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        fullApplicationDate \u003d date;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid application date."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static boolean isValidApplicationDate(String test) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            //simple parse test"},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":"            DateTimeUtil.parseDate(test);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Prints the date in the print format provided."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public String printDate() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return fullApplicationDate.format(DateTimeFormatter.ofPattern(DATE_PATTERN_TO_PRINT));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":70,"author":{"gitId":"gerhean"},"content":"        return fullApplicationDate.format(DateTimeFormatter.ofPattern(DATE_PATTERN));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            || (other instanceof ApplicationDate // instanceof handles nulls"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            \u0026\u0026 fullApplicationDate.equals(((ApplicationDate) other).fullApplicationDate)); // state check"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"gerhean"},"content":"    public int compareTo(ApplicationDate other) {"},{"lineNumber":82,"author":{"gitId":"gerhean"},"content":"        return fullApplicationDate.compareTo(other.fullApplicationDate);"},{"lineNumber":83,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return String.valueOf(fullApplicationDate).hashCode();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":15,"-":75}},{"path":"src/main/java/seedu/diary/model/internship/Company.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a InternshipApplication\u0027s company in the internship diary."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidCompany(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"public class Company implements Comparable\u003cCompany\u003e {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        \"Companies should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * The first character of the company must not be a whitespace,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String fullCompany;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code Company}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param company A valid company."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Company(String company) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(company);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        checkArgument(isValidCompany(company), MESSAGE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        fullCompany \u003d company;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid company."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static boolean isValidCompany(String test) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return fullCompany;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            || (other instanceof Company // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            \u0026\u0026 fullCompany.equals(((Company) other).fullCompany)); // state check"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return fullCompany.hashCode();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":59,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":"     * Does string comparison of company name."},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"gerhean"},"content":"    public int compareTo(Company other) {"},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":"        return fullCompany.compareToIgnoreCase(other.fullCompany); // String comparison."},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":11,"-":55}},{"path":"src/main/java/seedu/diary/model/internship/Email.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a InternshipApplication\u0027s email in the internship diary."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Email {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""},{"lineNumber":14,"author":{"gitId":"-"},"content":"        + \"and adhere to the following constraints:\\n\""},{"lineNumber":15,"author":{"gitId":"-"},"content":"        + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""},{"lineNumber":16,"author":{"gitId":"-"},"content":"        + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""},{"lineNumber":17,"author":{"gitId":"-"},"content":"        + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""},{"lineNumber":18,"author":{"gitId":"-"},"content":"        + \"The domain name must:\\n\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"        + \"    - be at least 2 characters long\\n\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"        + \"    - start and end with alphanumeric characters\\n\""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    // alphanumeric and special characters"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]\";"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"    private static final String DOMAIN_REGEX \u003d LOCAL_PART_REGEX + \"@\""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"    public static final String VALIDATION_REGEX \u003d \"^(\" + DOMAIN_REGEX + \")?$\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs an {@code Email}."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"     * @param email A valid email diary."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Email(String email) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        value \u003d email;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid email."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            || (other instanceof Email // instanceof handles nulls"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            \u0026\u0026 value.equals(((Email) other).value)); // state check"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":7,"-":60}},{"path":"src/main/java/seedu/diary/model/internship/InternshipApplication.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.diary.model.ListenerPropertyType.DISPLAYED_INTERVIEWS;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.beans.PropertyChangeListener;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.beans.PropertyChangeSupport;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.diary.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.diary.model.ListenerPropertyType;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.interview.Interview;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.status.Status;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Represents an InternshipApplication in the internship diary."},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class InternshipApplication {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Company company;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Role role;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Address address;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Phone phone;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Email email;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final ApplicationDate applicationDate;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final Priority priority;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final Status status;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final Boolean isArchived;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Boolean isGhostedOrRejected;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private final Status lastStage;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private final PropertyChangeSupport changes \u003d new PropertyChangeSupport(this);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private List\u003cInterview\u003e interviews;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public InternshipApplication(Company company, Role role, Address address, Phone phone, Email email,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        ApplicationDate applicationDate, Priority priority, Status status) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireAllNonNull(company, phone, email, address, status);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.company \u003d company;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.role \u003d role;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        this.status \u003d status;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.applicationDate \u003d applicationDate;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.priority \u003d priority;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        this.isArchived \u003d false;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        this.isGhostedOrRejected \u003d false;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        this.lastStage \u003d status;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        interviews \u003d new ArrayList\u003c\u003e();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Overloaded constructor to set isArchived, lastStage and interviews fields."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public InternshipApplication(Company company, Role role, Address address, Phone phone, Email email,"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        ApplicationDate applicationDate, Priority priority, Status status, Boolean isArchived, Status lastStage,"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        List\u003cInterview\u003e interviews) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        requireAllNonNull(company, phone, email, address, status);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        this.company \u003d company;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        this.role \u003d role;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        this.status \u003d status;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        this.applicationDate \u003d applicationDate;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        this.priority \u003d priority;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        this.isArchived \u003d isArchived;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        this.isGhostedOrRejected \u003d false;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        this.lastStage \u003d lastStage;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        this.interviews \u003d interviews;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Overloaded constructor to set isArchived, lastStage and interviews fields."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public InternshipApplication(Company company, Role role, Address address, Phone phone, Email email,"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        ApplicationDate applicationDate, Priority priority, Status status, Boolean isArchived,"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        List\u003cInterview\u003e interviews) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        requireAllNonNull(company, phone, email, address, status);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        this.company \u003d company;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        this.role \u003d role;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        this.status \u003d status;"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        this.applicationDate \u003d applicationDate;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        this.priority \u003d priority;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        this.isArchived \u003d isArchived;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        this.isGhostedOrRejected \u003d false;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        this.lastStage \u003d status;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        this.interviews \u003d interviews;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * Overloaded constructor to set lastStage and interviews field."},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public InternshipApplication(Company company, Role role, Address address, Phone phone, Email email,"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        ApplicationDate applicationDate, Priority priority, Status status,"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Status lastStage, List\u003cInterview\u003e interviews) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        requireAllNonNull(company, phone, email, address, status);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        this.company \u003d company;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        this.role \u003d role;"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        this.status \u003d status;"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        this.applicationDate \u003d applicationDate;"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        this.priority \u003d priority;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        this.isArchived \u003d false;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        this.isGhostedOrRejected \u003d false;"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        this.lastStage \u003d lastStage;"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        this.interviews \u003d interviews;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public Company getCompany() {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        return company;"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public Role getRole() {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        return role;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public Address getAddress() {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return address;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        return phone;"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public Email getEmail() {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public ApplicationDate getApplicationDate() {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        return applicationDate;"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public Priority getPriority() {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        return priority;"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public Status getStatus() {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        return status;"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * Sets variable \u0027isGhostedOrRejected\u0027 to true to keep track of whether the last stage before the internship"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * application failed (ghosted/ rejected) needs to be stored."},{"lineNumber":161,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void setIsGhostedOrRejected(Boolean bool) {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        this.isGhostedOrRejected \u003d bool;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public Boolean getIsGhostedOrRejected() {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        return isGhostedOrRejected;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * Returns an InternshipApplication updated with last stage."},{"lineNumber":172,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     * @param lastStage where the application failed (APPLIED/ INTERVIEW/ OFFERED)."},{"lineNumber":174,"author":{"gitId":"-"},"content":"     * @return InternshipApplication with lastStage specified."},{"lineNumber":175,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    public InternshipApplication setLastStage(Status lastStage) {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        return new InternshipApplication(company, role, address, phone, email, applicationDate, priority, status,"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            lastStage, interviews);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     * Returns the last stage before the status of an internship application was updated to be ghosted/ rejected."},{"lineNumber":183,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":184,"author":{"gitId":"-"},"content":"     * @return an enum of Status (APPLIED/ OFFERED/ INTERVIEW)."},{"lineNumber":185,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    public Status getLastStage() {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        return lastStage;"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":191,"author":{"gitId":"-"},"content":"     * Returns the last stage failed."},{"lineNumber":192,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":193,"author":{"gitId":"-"},"content":"     * @return message of the last stage failed, else an empty string."},{"lineNumber":194,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    public String getLastStageMessage() {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        if (status \u003d\u003d Status.GHOSTED || status \u003d\u003d Status.REJECTED) {"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            return \" [You failed at \" + lastStage.toString() + \":(]\";"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            return \"\";"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"    public Boolean isArchived() {"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        return isArchived;"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     * Returns the earliest interview from today in the list of interviews of the application."},{"lineNumber":209,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":210,"author":{"gitId":"-"},"content":"     * @param todayDate The current date today."},{"lineNumber":211,"author":{"gitId":"-"},"content":"     * @return an Optional of LocalDate. Will return empty if there are no interviews after today\u0027s date."},{"lineNumber":212,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    public Optional\u003cInterview\u003e getEarliestInterview(LocalDate todayDate) {"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        if (interviews.size() \u003c\u003d 0) {"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"        Interview earliestInterview \u003d interviews.get(0);"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        for (Interview currentInterview : interviews) {"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            LocalDate earliestDate \u003d earliestInterview.getInterviewDate();"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            LocalDate currentDate \u003d currentInterview.getInterviewDate();"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            if ((currentDate.compareTo(earliestDate) \u003c\u003d 0 || earliestDate.compareTo(todayDate) \u003c 0)"},{"lineNumber":223,"author":{"gitId":"-"},"content":"                \u0026\u0026 currentDate.compareTo(todayDate) \u003e\u003d 0) {"},{"lineNumber":224,"author":{"gitId":"-"},"content":"                earliestInterview \u003d currentInterview;"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        return earliestInterview.getInterviewDate().compareTo(todayDate) \u003e\u003d 0"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            ? Optional.of(earliestInterview) : Optional.empty();"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":232,"author":{"gitId":"gerhean"},"content":"     * Adds given interview into interview list. Will fire property change event"},{"lineNumber":233,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    public void addInterview(Interview interview) {"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        interviews.add(interview);"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        firePropertyChange(DISPLAYED_INTERVIEWS, interviews);"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":240,"author":{"gitId":"gerhean"},"content":"     * Deletes given interview from interview list. Will fire property change event"},{"lineNumber":241,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    public void deleteInterview(Interview interview) {"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        interviews.remove(interview);"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        firePropertyChange(DISPLAYED_INTERVIEWS, interviews);"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":248,"author":{"gitId":"gerhean"},"content":"     * Sets given interview into specified index in the interview list. Will fire property change event"},{"lineNumber":249,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    public void setInterview(Index index, Interview interview) {"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        interviews.set(index.getZeroBased(), interview);"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        firePropertyChange(DISPLAYED_INTERVIEWS, interviews);"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":"    public Interview getInterview(int index) {"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        return interviews.get(index);"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":"    public void setInterviews(List\u003cInterview\u003e interviews) {"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        requireNonNull(interviews);"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        this.interviews.addAll(interviews);"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        firePropertyChange(DISPLAYED_INTERVIEWS, this.interviews);"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":"    public List\u003cInterview\u003e getInterviews() {"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        return interviews;"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":"    public boolean hasInterview(Interview interview) {"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        return interviews.contains(interview);"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":274,"author":{"gitId":"-"},"content":"     * Returns a deep, archived copy of this internship application (isArchived field is marked true)."},{"lineNumber":275,"author":{"gitId":"-"},"content":"     * The rationale behind this is to uphold immutability."},{"lineNumber":276,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":277,"author":{"gitId":"-"},"content":"    public InternshipApplication archive() {"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        return new InternshipApplication("},{"lineNumber":279,"author":{"gitId":"-"},"content":"            this.company,"},{"lineNumber":280,"author":{"gitId":"-"},"content":"            this.role,"},{"lineNumber":281,"author":{"gitId":"-"},"content":"            this.address,"},{"lineNumber":282,"author":{"gitId":"-"},"content":"            this.phone,"},{"lineNumber":283,"author":{"gitId":"-"},"content":"            this.email,"},{"lineNumber":284,"author":{"gitId":"-"},"content":"            this.applicationDate,"},{"lineNumber":285,"author":{"gitId":"-"},"content":"            this.priority,"},{"lineNumber":286,"author":{"gitId":"-"},"content":"            this.status,"},{"lineNumber":287,"author":{"gitId":"-"},"content":"            true,"},{"lineNumber":288,"author":{"gitId":"-"},"content":"            this.lastStage,"},{"lineNumber":289,"author":{"gitId":"-"},"content":"            this.interviews"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":294,"author":{"gitId":"-"},"content":"     * Returns a deep, unarchived copy of this internship application (isArchived field is marked false)."},{"lineNumber":295,"author":{"gitId":"-"},"content":"     * The rationale behind this is to uphold immutability."},{"lineNumber":296,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    public InternshipApplication unarchive() {"},{"lineNumber":298,"author":{"gitId":"-"},"content":"        return new InternshipApplication("},{"lineNumber":299,"author":{"gitId":"-"},"content":"            this.company,"},{"lineNumber":300,"author":{"gitId":"-"},"content":"            this.role,"},{"lineNumber":301,"author":{"gitId":"-"},"content":"            this.address,"},{"lineNumber":302,"author":{"gitId":"-"},"content":"            this.phone,"},{"lineNumber":303,"author":{"gitId":"-"},"content":"            this.email,"},{"lineNumber":304,"author":{"gitId":"-"},"content":"            this.applicationDate,"},{"lineNumber":305,"author":{"gitId":"-"},"content":"            this.priority,"},{"lineNumber":306,"author":{"gitId":"-"},"content":"            this.status,"},{"lineNumber":307,"author":{"gitId":"-"},"content":"            false,"},{"lineNumber":308,"author":{"gitId":"-"},"content":"            this.lastStage,"},{"lineNumber":309,"author":{"gitId":"-"},"content":"            this.interviews"},{"lineNumber":310,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":312,"author":{"gitId":"-"},"content":""},{"lineNumber":313,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":314,"author":{"gitId":"-"},"content":"     * Returns application date or the earliest interview date scheduled, whichever is closer to current date."},{"lineNumber":315,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":316,"author":{"gitId":"-"},"content":"     * @return earliest date from current date."},{"lineNumber":317,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":318,"author":{"gitId":"-"},"content":"    public ApplicationDate getEarliestApplicationOrInterviewDate() {"},{"lineNumber":319,"author":{"gitId":"-"},"content":"        LocalDate currentDate \u003d LocalDate.now();"},{"lineNumber":320,"author":{"gitId":"-"},"content":"        Optional\u003cInterview\u003e earliestInterview \u003d getEarliestInterview(currentDate);"},{"lineNumber":321,"author":{"gitId":"-"},"content":"        if (applicationDate.fullApplicationDate.compareTo(currentDate) \u003c 0) { // application date before current date"},{"lineNumber":322,"author":{"gitId":"-"},"content":"            if (earliestInterview.isPresent()) {"},{"lineNumber":323,"author":{"gitId":"-"},"content":"                return earliestInterview.get().getDate();"},{"lineNumber":324,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":325,"author":{"gitId":"-"},"content":"                return applicationDate;"},{"lineNumber":326,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":327,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":328,"author":{"gitId":"-"},"content":"        if (earliestInterview.isPresent()) { // there are interviews after current date"},{"lineNumber":329,"author":{"gitId":"-"},"content":"            ApplicationDate earliestInterviewDate \u003d earliestInterview.get().getDate();"},{"lineNumber":330,"author":{"gitId":"-"},"content":"            return applicationDate.compareTo(earliestInterviewDate) \u003e\u003d 0 ? earliestInterviewDate : applicationDate;"},{"lineNumber":331,"author":{"gitId":"-"},"content":"        } else { // there are no interviews after current date"},{"lineNumber":332,"author":{"gitId":"-"},"content":"            return applicationDate;"},{"lineNumber":333,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":334,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":335,"author":{"gitId":"-"},"content":""},{"lineNumber":336,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PropertyChanges \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":337,"author":{"gitId":"-"},"content":""},{"lineNumber":338,"author":{"gitId":"-"},"content":"    public void addPropertyChangeListener(ListenerPropertyType propertyType, PropertyChangeListener l) {"},{"lineNumber":339,"author":{"gitId":"-"},"content":"        changes.addPropertyChangeListener(propertyType.toString(), l);"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":341,"author":{"gitId":"-"},"content":""},{"lineNumber":342,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":343,"author":{"gitId":"gerhean"},"content":"     * Removes all property change listeners from Internship Application."},{"lineNumber":344,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":345,"author":{"gitId":"-"},"content":"    public void removeAllPropertyChangeListener() {"},{"lineNumber":346,"author":{"gitId":"-"},"content":"        PropertyChangeListener[] propertyChangeListeners \u003d changes.getPropertyChangeListeners();"},{"lineNumber":347,"author":{"gitId":"-"},"content":"        for (PropertyChangeListener pcl : propertyChangeListeners) {"},{"lineNumber":348,"author":{"gitId":"-"},"content":"            changes.removePropertyChangeListener(pcl);"},{"lineNumber":349,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":351,"author":{"gitId":"-"},"content":""},{"lineNumber":352,"author":{"gitId":"-"},"content":"    private void firePropertyChange(ListenerPropertyType propertyType, Object newValue) {"},{"lineNumber":353,"author":{"gitId":"-"},"content":"        changes.firePropertyChange(propertyType.toString(), null, newValue);"},{"lineNumber":354,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":355,"author":{"gitId":"-"},"content":""},{"lineNumber":356,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":357,"author":{"gitId":"-"},"content":"     * Returns true if all but priority and status fields are the same."},{"lineNumber":358,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two internship applications."},{"lineNumber":359,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    public boolean isSameInternshipApplication(InternshipApplication internshipApplication) {"},{"lineNumber":361,"author":{"gitId":"-"},"content":""},{"lineNumber":362,"author":{"gitId":"-"},"content":"        if (internshipApplication \u003d\u003d this) {"},{"lineNumber":363,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":365,"author":{"gitId":"-"},"content":""},{"lineNumber":366,"author":{"gitId":"-"},"content":"        return internshipApplication !\u003d null"},{"lineNumber":367,"author":{"gitId":"-"},"content":"            \u0026\u0026 internshipApplication.getCompany().equals(getCompany())"},{"lineNumber":368,"author":{"gitId":"-"},"content":"            \u0026\u0026 internshipApplication.getRole().equals(getRole())"},{"lineNumber":369,"author":{"gitId":"-"},"content":"            \u0026\u0026 internshipApplication.getAddress().equals(getAddress())"},{"lineNumber":370,"author":{"gitId":"-"},"content":"            \u0026\u0026 internshipApplication.getPhone().equals(getPhone())"},{"lineNumber":371,"author":{"gitId":"-"},"content":"            \u0026\u0026 internshipApplication.getEmail().equals(getEmail())"},{"lineNumber":372,"author":{"gitId":"-"},"content":"            \u0026\u0026 internshipApplication.getApplicationDate().equals(getApplicationDate())"},{"lineNumber":373,"author":{"gitId":"-"},"content":"            \u0026\u0026 internshipApplication.isArchived().equals(isArchived())"},{"lineNumber":374,"author":{"gitId":"-"},"content":"            \u0026\u0026 internshipApplication.getInterviews().equals(getInterviews());"},{"lineNumber":375,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":376,"author":{"gitId":"-"},"content":""},{"lineNumber":377,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":378,"author":{"gitId":"-"},"content":"     * Returns true if both internship application have the fields."},{"lineNumber":379,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two internship applications."},{"lineNumber":380,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":381,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":382,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":383,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":384,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":385,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":386,"author":{"gitId":"-"},"content":""},{"lineNumber":387,"author":{"gitId":"-"},"content":"        if (!(other instanceof InternshipApplication)) {"},{"lineNumber":388,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":389,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":390,"author":{"gitId":"-"},"content":""},{"lineNumber":391,"author":{"gitId":"-"},"content":"        InternshipApplication internshipApplication \u003d (InternshipApplication) other;"},{"lineNumber":392,"author":{"gitId":"-"},"content":"        return internshipApplication.getCompany().equals(getCompany())"},{"lineNumber":393,"author":{"gitId":"-"},"content":"            \u0026\u0026 internshipApplication.getRole().equals(getRole())"},{"lineNumber":394,"author":{"gitId":"-"},"content":"            \u0026\u0026 internshipApplication.getAddress().equals(getAddress())"},{"lineNumber":395,"author":{"gitId":"-"},"content":"            \u0026\u0026 internshipApplication.getPhone().equals(getPhone())"},{"lineNumber":396,"author":{"gitId":"-"},"content":"            \u0026\u0026 internshipApplication.getEmail().equals(getEmail())"},{"lineNumber":397,"author":{"gitId":"-"},"content":"            \u0026\u0026 internshipApplication.getApplicationDate().equals(getApplicationDate())"},{"lineNumber":398,"author":{"gitId":"-"},"content":"            \u0026\u0026 internshipApplication.getPriority().equals(getPriority())"},{"lineNumber":399,"author":{"gitId":"-"},"content":"            \u0026\u0026 internshipApplication.getStatus().equals(getStatus())"},{"lineNumber":400,"author":{"gitId":"-"},"content":"            \u0026\u0026 internshipApplication.isArchived().equals(isArchived())"},{"lineNumber":401,"author":{"gitId":"-"},"content":"            \u0026\u0026 internshipApplication.getInterviews().equals(getInterviews());"},{"lineNumber":402,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":403,"author":{"gitId":"-"},"content":""},{"lineNumber":404,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":405,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":406,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":407,"author":{"gitId":"-"},"content":"        return Objects.hash(company, role, address, phone, email, applicationDate, priority, status, isArchived);"},{"lineNumber":408,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":409,"author":{"gitId":"-"},"content":""},{"lineNumber":410,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":411,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":412,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":413,"author":{"gitId":"-"},"content":"        builder.append(getCompany())"},{"lineNumber":414,"author":{"gitId":"-"},"content":"            .append(\" Role: \")"},{"lineNumber":415,"author":{"gitId":"-"},"content":"            .append(getRole())"},{"lineNumber":416,"author":{"gitId":"-"},"content":"            .append(\" Address: \")"},{"lineNumber":417,"author":{"gitId":"-"},"content":"            .append(getAddress())"},{"lineNumber":418,"author":{"gitId":"-"},"content":"            .append(\" Phone: \")"},{"lineNumber":419,"author":{"gitId":"-"},"content":"            .append(getPhone())"},{"lineNumber":420,"author":{"gitId":"-"},"content":"            .append(\" Email: \")"},{"lineNumber":421,"author":{"gitId":"-"},"content":"            .append(getEmail())"},{"lineNumber":422,"author":{"gitId":"-"},"content":"            .append(\" Application Date: \")"},{"lineNumber":423,"author":{"gitId":"-"},"content":"            .append(getApplicationDate())"},{"lineNumber":424,"author":{"gitId":"-"},"content":"            .append(\" Priority: \")"},{"lineNumber":425,"author":{"gitId":"-"},"content":"            .append(getPriority())"},{"lineNumber":426,"author":{"gitId":"-"},"content":"            .append(\" Status: \")"},{"lineNumber":427,"author":{"gitId":"-"},"content":"            .append(getStatus())"},{"lineNumber":428,"author":{"gitId":"-"},"content":"            .append(getLastStageMessage())"},{"lineNumber":429,"author":{"gitId":"-"},"content":"            .append(\" Archived: \")"},{"lineNumber":430,"author":{"gitId":"-"},"content":"            .append(isArchived());"},{"lineNumber":431,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":432,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":433,"author":{"gitId":"-"},"content":""},{"lineNumber":434,"author":{"gitId":"-"},"content":"}"},{"lineNumber":435,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"gerhean":20,"-":415}},{"path":"src/main/java/seedu/diary/model/internship/Phone.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents an InternshipApplication\u0027s phone number in the internship diary."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Phone {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"        \"Phone numbers should only contain numbers (can include \u0027+\u0027 at the start)\""},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"            + \",\\nand it should be at least 3 and at most 15 digits long\";"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"    public static final String VALIDATION_REGEX \u003d \"^(\\\\+?\\\\d{3,15})?$\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Phone(String phone) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        value \u003d phone;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid phone number."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            || (other instanceof Phone // instanceof handles nulls"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            \u0026\u0026 value.equals(((Phone) other).value)); // state check"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":5,"-":48}},{"path":"src/main/java/seedu/diary/model/internship/Priority.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents an InternshipApplication\u0027s priority in the internship diary."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPriority(int)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"public class Priority implements Comparable\u003cPriority\u003e {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final int HIGHEST_PRIORITY \u003d 10;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final int LOWEST_PRIORITY \u003d 0;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        \"Priority should only contain a number between 0 to 10 inclusive, and it should not be blank\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public final int fullPriority;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Constructs a {@code Priority}."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param priority A valid priority in the form of an index."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public Priority(int priority) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(priority);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        checkArgument(isValidPriority(priority), MESSAGE_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        fullPriority \u003d priority;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code Priority}"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @param priority a valid priority in the from of a String."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public Priority(String priority) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(priority);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        checkArgument(isValidPriority(priority), MESSAGE_CONSTRAINTS);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        fullPriority \u003d Integer.parseInt(priority);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Returns true if a given integer is a valid priority."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static boolean isValidPriority(int test) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return test \u003e\u003d LOWEST_PRIORITY \u0026\u0026 test \u003c\u003d HIGHEST_PRIORITY;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid priority."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static boolean isValidPriority(String test) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            int priority \u003d Integer.parseInt(test);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return isValidPriority(priority);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return String.valueOf(fullPriority);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":67,"author":{"gitId":"gerhean"},"content":"            || (other instanceof Priority // instanceof handles nulls"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            \u0026\u0026 fullPriority \u003d\u003d ((Priority) other).fullPriority); // state check"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"gerhean"},"content":"    public int compareTo(Priority other) {"},{"lineNumber":73,"author":{"gitId":"gerhean"},"content":"        return fullPriority - other.fullPriority;"},{"lineNumber":74,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return String.valueOf(fullPriority).hashCode();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":9,"-":71}},{"path":"src/main/java/seedu/diary/model/internship/Role.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a InternshipApplication\u0027s role in the internship diary."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRole(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"public class Role implements Comparable\u003cRole\u003e {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        \"Roles should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * The first character of the role must not be a whitespace,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public final String fullRole;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs a {@code Role}."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param role A valid role."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Role(String role) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(role);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        checkArgument(isValidRole(role), MESSAGE_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        fullRole \u003d role;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid role."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static boolean isValidRole(String test) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return fullRole;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            || (other instanceof Role // instanceof handles nulls"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            \u0026\u0026 fullRole.equals(((Role) other).fullRole)); // state check"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":"    public int compareTo(Role other) {"},{"lineNumber":55,"author":{"gitId":"gerhean"},"content":"        return fullRole.compareToIgnoreCase(other.fullRole);"},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return fullRole.hashCode();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":8,"-":54}},{"path":"src/main/java/seedu/diary/model/internship/UniqueInternshipApplicationList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.exceptions.DuplicateInternshipApplicationException;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.exceptions.InternshipApplicationNotFoundException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A list of internship applications that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A internship application is considered unique by comparing"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * using {@code InternshipApplication#InternshipApplication(InternshipApplication)}."},{"lineNumber":19,"author":{"gitId":"-"},"content":" * As such, adding and updating of internship applications"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * uses InternshipApplication#InternshipApplication(InternshipApplication) for equality"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * so as to ensure that the internship application being added or updated is"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * unique in terms of identity in the UniqueInternshipApplicationList."},{"lineNumber":23,"author":{"gitId":"-"},"content":" * However, the removal of a internship application uses InternshipApplication#equals(Object) so"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * as to ensure that the internship application with exactly the same fields will be removed."},{"lineNumber":25,"author":{"gitId":"-"},"content":" *"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":27,"author":{"gitId":"-"},"content":" *"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * @see InternshipApplication#isSameInternshipApplication(InternshipApplication)"},{"lineNumber":29,"author":{"gitId":"-"},"content":" */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class UniqueInternshipApplicationList implements Iterable\u003cInternshipApplication\u003e {"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cInternshipApplication\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cInternshipApplication\u003e internalUnmodifiableList \u003d"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent internship application as the given argument."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public boolean contains(InternshipApplication toCheck) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return internalList.stream().anyMatch(toCheck::isSameInternshipApplication);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Adds a internship application to the list."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * The internship application must not already exist in the list."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void add(InternshipApplication toAdd) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            throw new DuplicateInternshipApplicationException();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Replaces the internship application {@code target} in the list with {@code editedInternshipApplication}."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * The internship application identity of {@code editedInternshipApplication}"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * must not be the same as another existing internship application in the list."},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void setInternshipApplication(InternshipApplication target,"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        InternshipApplication editedInternshipApplication) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedInternshipApplication);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            throw new InternshipApplicationNotFoundException();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (!target.isSameInternshipApplication(editedInternshipApplication) \u0026\u0026 contains(editedInternshipApplication)) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            throw new DuplicateInternshipApplicationException();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        internalList.set(index, editedInternshipApplication);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Removes the equivalent internship application from the list."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * The internship application must exist in the list."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void remove(InternshipApplication toRemove) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new InternshipApplicationNotFoundException();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void setInternshipApplications(UniqueInternshipApplicationList replacement) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Replaces the contents of this list with {@code internship applications}."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * {@code internship applications} must not contain duplicate internship applications."},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void setInternshipApplications(List\u003cInternshipApplication\u003e internshipApplications) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        requireAllNonNull(internshipApplications);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!internshipApplicationsAreUnique(internshipApplications)) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new DuplicateInternshipApplicationException();"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        internalList.setAll(internshipApplications);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public ObservableList\u003cInternshipApplication\u003e asUnmodifiableObservableList() {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public Iterator\u003cInternshipApplication\u003e iterator() {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        return internalList.iterator();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            || (other instanceof UniqueInternshipApplicationList // instanceof handles nulls"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            \u0026\u0026 internalList.equals(((UniqueInternshipApplicationList) other).internalList));"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Returns true if {@code internship applications} contains only unique internship applications."},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    private boolean internshipApplicationsAreUnique(List\u003cInternshipApplication\u003e internshipApplications) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c internshipApplications.size() - 1; i++) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            for (int j \u003d i + 1; j \u003c internshipApplications.size(); j++) {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                if (internshipApplications.get(i).isSameInternshipApplication(internshipApplications.get(j))) {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                    return false;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":5,"-":140}},{"path":"src/main/java/seedu/diary/model/internship/exceptions/DuplicateInternshipApplicationException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation will result in duplicate Internship Application (Internship Application are considered"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * duplicates if they have the same value in all but priority and status fields)."},{"lineNumber":6,"author":{"gitId":"-"},"content":" */"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class DuplicateInternshipApplicationException extends RuntimeException {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public DuplicateInternshipApplicationException() {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        super(\"Operation would result in duplicate internship application\");"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":1,"-":10}},{"path":"src/main/java/seedu/diary/model/internship/exceptions/InternshipApplicationNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation is unable to find the specified internship application."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"public class InternshipApplicationNotFoundException extends RuntimeException {"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"gerhean":3,"-":5}},{"path":"src/main/java/seedu/diary/model/internship/interview/Interview.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship.interview;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Address;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.ApplicationDate;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Represents an Interview in the Internship Diary."},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Interviews are always tagged to an internship application."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public abstract class Interview {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    protected final ApplicationDate interviewDate;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    protected final Address interviewAddress;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    protected Interview(ApplicationDate interviewDate, Address interviewAddress) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(interviewDate);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        requireNonNull(interviewAddress);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.interviewDate \u003d interviewDate;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        this.interviewAddress \u003d interviewAddress;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a new online or offline interview based on the parameters given."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * This is the default static constructor to create an interview object."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static Interview createInterview(boolean isOnline,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        ApplicationDate interviewDate, Address interviewAddress) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        if (isOnline) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            return new OnlineInterview(interviewDate);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            return new OfflineInterview(interviewDate, interviewAddress);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Constructs a new online interview."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * This constructor is only for adding a new online interview."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static Interview createOnlineInterview(ApplicationDate interviewDate) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return new OnlineInterview(interviewDate);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Returns the interview date in local date format."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public LocalDate getInterviewDate() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return interviewDate.fullApplicationDate;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public ApplicationDate getDate() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return interviewDate;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public Address getInterviewAddress() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return interviewAddress;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"gerhean"},"content":"     * Returns a boolean on whether the interview is to be conducted online."},{"lineNumber":63,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public abstract boolean getIsOnline();"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        if (!(other instanceof Interview)) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        Interview interview \u003d (Interview) other;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return interview.getInterviewDate().equals(getInterviewDate())"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            \u0026\u0026 interview.getInterviewAddress().equals(getInterviewAddress())"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            \u0026\u0026 this.getIsOnline() \u003d\u003d interview.getIsOnline();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":6,"-":75}},{"path":"src/main/java/seedu/diary/model/internship/predicate/AddressContainsKeywordsPredicate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship.predicate;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Tests that a {@code InternshipApplication}\u0027s {@code Address} contains any of the keywords given."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class AddressContainsKeywordsPredicate implements Predicate\u003cInternshipApplication\u003e {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public AddressContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public boolean test(InternshipApplication internshipApplication) {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        if (keywords \u003d\u003d null) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return keywords.stream()"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            .anyMatch(keyword -\u003e internshipApplication.getAddress().value.toLowerCase()"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                .contains(keyword.toLowerCase()));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            || (other instanceof AddressContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            \u0026\u0026 keywords.equals(((AddressContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public boolean isNull() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return keywords \u003d\u003d null;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"        if (isNull()) {"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"            return PREFIX_ADDRESS.toString();"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"        return PREFIX_ADDRESS + String.join(\" \", keywords);"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":12,"-":37}},{"path":"src/main/java/seedu/diary/model/internship/predicate/ApplicationDateDuePredicate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship.predicate;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.time.Period;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Tests that a {@code InternshipApplication}\u0027s {@code Application Date} is within 7 days from current date."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ApplicationDateDuePredicate implements Predicate\u003cInternshipApplication\u003e {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final LocalDate currentDate;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public ApplicationDateDuePredicate() {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        this.currentDate \u003d LocalDate.now();"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public boolean test(InternshipApplication internshipApplication) {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        LocalDate applicationDate \u003d internshipApplication.getApplicationDate().fullApplicationDate;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // count days between current internship application date and current date"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Period period \u003d Period.between(currentDate, applicationDate);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return (applicationDate.compareTo(currentDate) \u003e\u003d 0) \u0026\u0026 (period.getDays() \u003c\u003d 7);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            || (other instanceof ApplicationDateDuePredicate // instanceof handles nulls"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            \u0026\u0026 currentDate.equals(((ApplicationDateDuePredicate) other).currentDate)); // state check"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"},{"lineNumber":34,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"gerhean":2,"-":32}},{"path":"src/main/java/seedu/diary/model/internship/predicate/ApplicationDateIsDatePredicate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship.predicate;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.ParserUtil;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Tests that a {@code InternshipApplication}\u0027s {@code ApplicationDate} matches the date given."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ApplicationDateIsDatePredicate implements Predicate\u003cInternshipApplication\u003e {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final LocalDate date;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public ApplicationDateIsDatePredicate(LocalDate date) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.date \u003d date;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"    public ApplicationDateIsDatePredicate(List\u003cString\u003e dateArr) throws ParseException {"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"        String dateStr \u003d String.join(\" \", dateArr);"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"        this.date \u003d ParserUtil.parseApplicationDate(dateStr).fullApplicationDate;"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public boolean test(InternshipApplication internshipApplication) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        if (date \u003d\u003d null) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return internshipApplication.getApplicationDate().fullApplicationDate.isEqual(date);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            || (other instanceof ApplicationDateIsDatePredicate // instanceof handles nulls"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            \u0026\u0026 date.isEqual(((ApplicationDateIsDatePredicate) other).date)); // state check"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public boolean isNull() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return date \u003d\u003d null;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"        if (isNull()) {"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":"            return PREFIX_DATE.toString();"},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":"        return PREFIX_DATE.toString() + date.toString();"},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":20,"-":35}},{"path":"src/main/java/seedu/diary/model/internship/predicate/CompanyContainsKeywordsPredicate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship.predicate;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_COMPANY;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Tests that a {@code InternshipApplication}\u0027s {@code Company} contains any of the keywords given."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class CompanyContainsKeywordsPredicate implements Predicate\u003cInternshipApplication\u003e {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public CompanyContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public boolean test(InternshipApplication internshipApplication) {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        if (keywords \u003d\u003d null) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return keywords.stream()"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            .anyMatch(keyword -\u003e internshipApplication.getCompany().fullCompany.toLowerCase()"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                .contains(keyword.toLowerCase()));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            || (other instanceof CompanyContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            \u0026\u0026 keywords.equals(((CompanyContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public boolean isNull() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return keywords \u003d\u003d null;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"        if (isNull()) {"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"            return PREFIX_COMPANY.toString();"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"        return PREFIX_COMPANY + String.join(\" \", keywords);"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":12,"-":37}},{"path":"src/main/java/seedu/diary/model/internship/predicate/CustomToStringPredicate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship.predicate;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":" * Gives a predicate an overwritten toString method."},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":" */"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"public class CustomToStringPredicate\u003cT\u003e implements Predicate\u003cT\u003e {"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"    private final Predicate\u003cT\u003e internalPredicate;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"    private final String internalString;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"    public CustomToStringPredicate(Predicate\u003cT\u003e internalPredicate, String internalString) {"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"        this.internalPredicate \u003d internalPredicate;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"        this.internalString \u003d internalString;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"    public boolean test(T t) {"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"        return internalPredicate.test(t);"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"    public boolean equals(Object other) {"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"            || other instanceof CustomToStringPredicate // instanceof handles nulls"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"            \u0026\u0026 internalPredicate.equals(((CustomToStringPredicate\u003c?\u003e) other).internalPredicate)"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"            \u0026\u0026 internalString.equals(((CustomToStringPredicate\u003c?\u003e) other).internalString);"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"    public String toString() {"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"        return internalString;"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":34}},{"path":"src/main/java/seedu/diary/model/internship/predicate/EmailContainsKeywordsPredicate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship.predicate;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Tests that a {@code InternshipApplication}\u0027s {@code Email} contains any of the keywords given."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class EmailContainsKeywordsPredicate implements Predicate\u003cInternshipApplication\u003e {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public EmailContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public boolean test(InternshipApplication internshipApplication) {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        if (keywords \u003d\u003d null) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return keywords.stream()"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            .anyMatch(keyword -\u003e internshipApplication.getEmail().value.toLowerCase()"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                .contains(keyword.toLowerCase()));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            || (other instanceof EmailContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            \u0026\u0026 keywords.equals(((EmailContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public boolean isNull() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return keywords \u003d\u003d null;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"        if (isNull()) {"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"            return PREFIX_EMAIL.toString();"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"        return PREFIX_EMAIL + String.join(\" \", keywords);"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":12,"-":37}},{"path":"src/main/java/seedu/diary/model/internship/predicate/InterviewDateDuePredicate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship.predicate;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.time.Period;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.interview.Interview;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Tests that a {@code InternshipApplication}\u0027s {@code Application Date} is within 7 days from current date."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class InterviewDateDuePredicate implements Predicate\u003cInternshipApplication\u003e {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final LocalDate currentDate;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public InterviewDateDuePredicate() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        this.currentDate \u003d LocalDate.now();"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public boolean test(InternshipApplication internshipApplication) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        boolean hasAtLeastOneInterviewDue \u003d false;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        List\u003cInterview\u003e interviews \u003d internshipApplication.getInterviews();"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        for (Interview interview : interviews) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            LocalDate interviewDate \u003d interview.getInterviewDate();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            // count days between every interview in the internship application and current date"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Period duration \u003d Period.between(currentDate, interviewDate);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            if ((interviewDate.compareTo(currentDate) \u003e\u003d 0) \u0026\u0026 (duration.getDays() \u003c\u003d 7)) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                hasAtLeastOneInterviewDue \u003d true;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                break;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return hasAtLeastOneInterviewDue;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            || (other instanceof InterviewDateDuePredicate // instanceof handles nulls"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            \u0026\u0026 currentDate.equals(((InterviewDateDuePredicate) other).currentDate)); // state check"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":3,"-":40}},{"path":"src/main/java/seedu/diary/model/internship/predicate/IsNotArchivedPredicate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship.predicate;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Tests that a {@code InternshipApplication}\u0027s {@code isArchived} is false."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class IsNotArchivedPredicate implements Predicate\u003cInternshipApplication\u003e {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public boolean test(InternshipApplication internshipApplication) {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        return !internshipApplication.isArchived();"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            || (other instanceof IsNotArchivedPredicate); // instanceof handles nulls"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}"},{"lineNumber":23,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"gerhean":2,"-":21}},{"path":"src/main/java/seedu/diary/model/internship/predicate/PhoneContainsNumbersPredicate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship.predicate;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Tests that a {@code InternshipApplication}\u0027s {@code Phone} contains any of the numbers given."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class PhoneContainsNumbersPredicate implements Predicate\u003cInternshipApplication\u003e {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e numbers;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public PhoneContainsNumbersPredicate(List\u003cString\u003e numbers) {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        this.numbers \u003d numbers;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public boolean test(InternshipApplication internshipApplication) {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        if (numbers \u003d\u003d null) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return numbers.stream()"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            .anyMatch(number -\u003e internshipApplication.getPhone().value.toLowerCase().contains(number));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            || (other instanceof PhoneContainsNumbersPredicate // instanceof handles nulls"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            \u0026\u0026 numbers.equals(((PhoneContainsNumbersPredicate) other).numbers)); // state check"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public boolean isNull() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return numbers \u003d\u003d null;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"        if (isNull()) {"},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"            return PREFIX_PHONE.toString();"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"        return PREFIX_PHONE + String.join(\" \", numbers);"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":12,"-":36}},{"path":"src/main/java/seedu/diary/model/internship/predicate/PriorityContainsNumbersPredicate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship.predicate;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Tests that a {@code InternshipApplication}\u0027s {@code Priority} matches any of the numbers given."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class PriorityContainsNumbersPredicate implements Predicate\u003cInternshipApplication\u003e {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e numbers;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public PriorityContainsNumbersPredicate(List\u003cString\u003e numbers) {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        this.numbers \u003d numbers;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public boolean test(InternshipApplication internshipApplication) {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        if (numbers \u003d\u003d null) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return numbers.stream()"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            .anyMatch(number -\u003e Integer.toString(internshipApplication.getPriority().fullPriority)"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                .toLowerCase().equals(number));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            || (other instanceof PriorityContainsNumbersPredicate // instanceof handles nulls"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            \u0026\u0026 numbers.equals(((PriorityContainsNumbersPredicate) other).numbers)); // state check"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public boolean isNull() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return numbers \u003d\u003d null;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"        if (isNull()) {"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"            return PREFIX_PRIORITY.toString();"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"        return PREFIX_PRIORITY + String.join(\" \", numbers);"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":12,"-":37}},{"path":"src/main/java/seedu/diary/model/internship/predicate/RoleContainsKeywordsPredicate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship.predicate;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Tests that a {@code InternshipApplication}\u0027s {@code Role} contains any of the keywords given."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class RoleContainsKeywordsPredicate implements Predicate\u003cInternshipApplication\u003e {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public RoleContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public boolean test(InternshipApplication internshipApplication) {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        if (keywords \u003d\u003d null) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return keywords.stream()"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            .anyMatch(keyword -\u003e internshipApplication.getRole().fullRole.toLowerCase()"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                .contains(keyword.toLowerCase()));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            || (other instanceof RoleContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            \u0026\u0026 keywords.equals(((RoleContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public boolean isNull() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return keywords \u003d\u003d null;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"        if (isNull()) {"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"            return PREFIX_ROLE.toString();"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"        return PREFIX_ROLE + String.join(\" \", keywords);"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":12,"-":37}},{"path":"src/main/java/seedu/diary/model/internship/predicate/StatusContainsKeywordsPredicate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship.predicate;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Tests that a {@code InternshipApplication}\u0027s {@code Status} contains any of the keywords given."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StatusContainsKeywordsPredicate implements Predicate\u003cInternshipApplication\u003e {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public StatusContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public boolean test(InternshipApplication internshipApplication) {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        if (keywords \u003d\u003d null) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return keywords.stream()"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            .anyMatch(keyword -\u003e internshipApplication.getStatus().name().toLowerCase()"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                .contains(keyword.toLowerCase()));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            || (other instanceof StatusContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            \u0026\u0026 keywords.equals(((StatusContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public boolean isNull() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return keywords \u003d\u003d null;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"        if (isNull()) {"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"            return PREFIX_STATUS.toString();"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"        return PREFIX_STATUS + String.join(\" \", keywords);"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":12,"-":37}},{"path":"src/main/java/seedu/diary/model/internship/predicate/StatusIsInterviewPredicate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship.predicate;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.status.Status;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tests that a {@code InternshipApplication}\u0027s {@code Status} is INTERVIEW."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class StatusIsInterviewPredicate implements Predicate\u003cInternshipApplication\u003e {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public boolean test(InternshipApplication internshipApplication) {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return internshipApplication.getStatus() \u003d\u003d Status.INTERVIEW;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            || (other instanceof StatusIsInterviewPredicate); // instanceof handles nulls"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":3,"-":20}},{"path":"src/main/java/seedu/diary/model/internship/predicate/StatusIsWishlistPredicate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship.predicate;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.status.Status;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tests that a {@code InternshipApplication}\u0027s {@code Status} is WISHLIST."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class StatusIsWishlistPredicate implements Predicate\u003cInternshipApplication\u003e {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public boolean test(InternshipApplication internshipApplication) {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return internshipApplication.getStatus() \u003d\u003d Status.WISHLIST;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            || (other instanceof StatusIsWishlistPredicate); // instanceof handles nulls"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"},{"lineNumber":24,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"gerhean":3,"-":21}},{"path":"src/main/java/seedu/diary/model/statistics/Statistics.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.statistics;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Iterator;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.status.Status;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Represents a statistics generator model."},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Generates relevant statistics for internship applications."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class Statistics {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String TOTAL \u003d \"TOTAL\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Contains all Status enum constants."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Status[] statuses \u003d Status.class.getEnumConstants();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Stores mapping of each Status to their count across internship application(s)."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private HashMap\u003cStatus, Integer\u003e statusCount \u003d new HashMap\u003c\u003e();"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public Statistics() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        resetStatistics();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Computes and updates the overall statistics based on the latest list of internship applications given."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * It will reset any existing statistics before re-computing."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @param internshipApplicationList list of existing internship application(s)."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void computeAndUpdateStatistics(ObservableList\u003cInternshipApplication\u003e internshipApplicationList) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        resetStatistics();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        computeCount(internshipApplicationList);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Computes and updates the count for each internship application status."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @param internshipApplicationList list of existing internship application(s)."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void computeCount(ObservableList\u003cInternshipApplication\u003e internshipApplicationList) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        List\u003cStatus\u003e newStatuses \u003d internshipApplicationList.stream()"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            .map(ia -\u003e {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                return ia.getStatus();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            })"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        newStatuses.forEach((status) -\u003e {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            int count \u003d statusCount.get(status);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            statusCount.put(status, ++count);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Resets the current statistics."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void resetStatistics() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        for (Status status : statuses) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            statusCount.put(status, 0);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public int getCount(Status status) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return statusCount.get(status);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int getTotalCount() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Iterator statusCountIterator \u003d statusCount.entrySet().iterator();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        int totalCount \u003d 0;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        while (statusCountIterator.hasNext()) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            Map.Entry element \u003d (Map.Entry) statusCountIterator.next();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            int count \u003d (int) element.getValue();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            totalCount +\u003d count;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return totalCount;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public double getPercentage(Status status) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return ((double) statusCount.get(status) / getTotalCount()) * 100;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public Status[] getStatuses() {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return this.statuses;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":4,"-":91}},{"path":"src/main/java/seedu/diary/model/status/Status.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.status;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Enum for the possible statuses an internship application can have."},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public enum Status {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    WISHLIST, APPLIED, INTERVIEW, OFFERED, REJECTED, GHOSTED;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        \"Status should only be one of the following strings: \""},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"wishlist, applied, interview, offered, rejected, ghosted\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String[] validStatuses \u003d new String[]{\"wishlist\", \"applied\", \"interview\","},{"lineNumber":17,"author":{"gitId":"-"},"content":"        \"offered\", \"rejected\", \"ghosted\"};"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"     * Returns a list of possible Status which starts with test."},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"    public static List\u003cStatus\u003e possibleStatus(String test) {"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"        String regex \u003d \"^\" + test.toUpperCase() + \".*\";"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"        ArrayList\u003cStatus\u003e possible \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"        for (Status s : Status.values()) {"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"            if (s.name().matches(regex)) {"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"                possible.add(s);"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"            }"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"        return possible;"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns true is given string is a valid status."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static boolean isValidStatus(String test) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        String status \u003d test.toLowerCase();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        boolean output \u003d false;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        for (String s : validStatuses) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            output \u003d output || status.equals(s);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return output;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":18,"-":26}},{"path":"src/main/java/seedu/diary/model/util/SampleDataUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.InternshipDiary;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ReadOnlyInternshipDiary;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Address;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.ApplicationDate;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Company;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Email;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Phone;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Priority;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Role;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.interview.Interview;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.status.Status;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code InternshipDiary} with sample data."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final long DAYS_TO_MINUS \u003d 1;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static Interview[] sampleInterviews \u003d {Interview.createOnlineInterview("},{"lineNumber":27,"author":{"gitId":"-"},"content":"        new ApplicationDate(LocalDate.now().minusDays(DAYS_TO_MINUS))), Interview.createInterview(false,"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        new ApplicationDate(LocalDate.now().minusDays(DAYS_TO_MINUS)), new Address(\"123 Kent Ridge Road\"))};"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static InternshipApplication[] getSampleInternshipApplications() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return new InternshipApplication[]{"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            new InternshipApplication(new Company(\"Google\"), new Role(\"Software Developer\"),"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Phone(\"87438807\"),"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                new Email(\"google.recruit@example.com\"), new ApplicationDate(LocalDate.now().minusDays(DAYS_TO_MINUS)),"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                new Priority(8), Status.APPLIED),"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            new InternshipApplication(new Company(\"Facebook\"), new Role(\"Software Engineer\"),"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Phone(\"99272758\"),"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                new Email(\"facebook.recruit@example.com\"),"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                new ApplicationDate(LocalDate.now().minusDays(DAYS_TO_MINUS)),"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                new Priority(8), Status.APPLIED),"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            new InternshipApplication(new Company(\"DSO\"), new Role(\"Data Analyst\"),"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Phone(\"93210283\"),"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                new Email(\"dso.recruit@example.com\"), new ApplicationDate(LocalDate.now().minusDays(DAYS_TO_MINUS)),"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                new Priority(8), Status.INTERVIEW, false, new ArrayList\u003c\u003e(Arrays.asList(sampleInterviews))),"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            new InternshipApplication(new Company(\"Shopee\"), new Role(\"Data Science\"),"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Phone(\"91031282\"),"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                new Email(\"shopee.recruit@example.com\"), new ApplicationDate(LocalDate.now()),"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                new Priority(10), Status.WISHLIST),"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            new InternshipApplication(new Company(\"DSTA\"), new Role(\"Software Engineer\"),"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Phone(\"92492021\"),"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                new Email(\"dsta.recruit@example.com\"), new ApplicationDate(LocalDate.now().minusDays(DAYS_TO_MINUS)),"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                new Priority(2), Status.REJECTED, Status.INTERVIEW, new ArrayList\u003c\u003e(Arrays.asList(sampleInterviews))),"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            new InternshipApplication(new Company(\"Singtel\"), new Role(\"Software Engineer\"),"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Phone(\"92624417\"),"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                new Email(\"singtel.recruit@example.com\"), new ApplicationDate(LocalDate.now().minusDays(DAYS_TO_MINUS)),"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                new Priority(2), Status.OFFERED)"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":"    public static ReadOnlyInternshipDiary getSampleInternshipDiary() {"},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":"        InternshipDiary sampleDiary \u003d new InternshipDiary();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        for (InternshipApplication sampleApplication : getSampleInternshipApplications()) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            sampleDiary.loadInternshipApplication(sampleApplication);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":"        return sampleDiary;"},{"lineNumber":66,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":18,"-":50}},{"path":"src/main/java/seedu/diary/storage/InternshipDiaryStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.storage;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ReadOnlyInternshipDiary;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":" * Represents a storage for {@link seedu.diary.model.InternshipDiary}."},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":" */"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"public interface InternshipDiaryStorage {"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"     * Returns the file path of the data file."},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"    Path getInternshipDiaryFilePath();"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"     * Returns InternshipDiary data as a {@link ReadOnlyInternshipDiary}."},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"     * Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"    Optional\u003cReadOnlyInternshipDiary\u003e readInternshipDiary() throws DataConversionException, IOException;"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"     * @see #getInternshipDiaryFilePath()"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"    Optional\u003cReadOnlyInternshipDiary\u003e readInternshipDiary(Path filePath) throws DataConversionException, IOException;"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"     * Saves the given {@link ReadOnlyInternshipDiary} to the storage."},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"     * @param internshipDiary cannot be null."},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"    void saveInternshipDiary(ReadOnlyInternshipDiary internshipDiary) throws IOException;"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"     * @see #saveInternshipDiary(ReadOnlyInternshipDiary)"},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"    void saveInternshipDiary(ReadOnlyInternshipDiary internshipDiary, Path filePath) throws IOException;"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":47}},{"path":"src/main/java/seedu/diary/storage/JsonAdaptedInternship.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.storage;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.Messages;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.util.BooleanUtil;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Address;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.ApplicationDate;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Company;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Email;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Phone;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Priority;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Role;"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.interview.Interview;"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.status.Status;"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":" * Jackson-friendly version of {@link InternshipApplication}."},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":" */"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"class JsonAdaptedInternship {"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Internship\u0027s %s field is missing!\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_INTERVIEW \u003d \"Interviews list contains duplicate interview!\";"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"    private final String company;"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"    private final String role;"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"    private final String address;"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"    private final String phone;"},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"    private final String email;"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"    private final String applicationDate;"},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"    private final String priority;"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"    private final String status;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedInterview\u003e interviews \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private final String isArchived;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private final String lastStage;"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedInternship} with the given internship application details."},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"    @JsonCreator"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"    public JsonAdaptedInternship(@JsonProperty(\"company\") String company, @JsonProperty(\"role\") String role,"},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"        @JsonProperty(\"diary\") String address, @JsonProperty(\"phone\") String phone,"},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"        @JsonProperty(\"email\") String email, @JsonProperty(\"applicationDate\") String applicationDate,"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        @JsonProperty(\"priority\") String priority, @JsonProperty(\"status\") String status,"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        @JsonProperty(\"interviews\") List\u003cJsonAdaptedInterview\u003e interviews,"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        @JsonProperty(\"isArchived\") String isArchived, @JsonProperty(\"lastStage\") String lastStage) {"},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":"        this.company \u003d company;"},{"lineNumber":55,"author":{"gitId":"gerhean"},"content":"        this.role \u003d role;"},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":"        this.address \u003d address;"},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":"        this.phone \u003d phone;"},{"lineNumber":58,"author":{"gitId":"gerhean"},"content":"        this.email \u003d email;"},{"lineNumber":59,"author":{"gitId":"gerhean"},"content":"        this.applicationDate \u003d applicationDate;"},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":"        this.priority \u003d priority;"},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":"        this.status \u003d status;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        this.interviews.addAll(interviews);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        this.isArchived \u003d isArchived;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.lastStage \u003d lastStage;"},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":67,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"gerhean"},"content":"     * Converts a given {@code InternshipApplication} into this class for Jackson use."},{"lineNumber":69,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"gerhean"},"content":"    public JsonAdaptedInternship(InternshipApplication source) {"},{"lineNumber":71,"author":{"gitId":"gerhean"},"content":"        company \u003d source.getCompany().fullCompany;"},{"lineNumber":72,"author":{"gitId":"gerhean"},"content":"        role \u003d source.getRole().fullRole;"},{"lineNumber":73,"author":{"gitId":"gerhean"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":74,"author":{"gitId":"gerhean"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":75,"author":{"gitId":"gerhean"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        applicationDate \u003d source.getApplicationDate().toString();"},{"lineNumber":77,"author":{"gitId":"gerhean"},"content":"        priority \u003d Integer.toString(source.getPriority().fullPriority);"},{"lineNumber":78,"author":{"gitId":"gerhean"},"content":"        status \u003d source.getStatus().name();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        interviews.addAll(source.getInterviews()"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            .stream().map(JsonAdaptedInterview::new).collect(Collectors.toList()));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        isArchived \u003d source.isArchived().toString();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        lastStage \u003d source.getLastStage().toString();"},{"lineNumber":83,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":85,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted internship application object"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * into the model\u0027s {@code InternshipApplication} object."},{"lineNumber":88,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted internship application"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * object."},{"lineNumber":91,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"gerhean"},"content":"    public InternshipApplication toModelType() throws IllegalValueException {"},{"lineNumber":93,"author":{"gitId":"gerhean"},"content":"        if (company \u003d\u003d null) {"},{"lineNumber":94,"author":{"gitId":"gerhean"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Company.class.getSimpleName()));"},{"lineNumber":95,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"gerhean"},"content":"        if (!Company.isValidCompany(company)) {"},{"lineNumber":97,"author":{"gitId":"gerhean"},"content":"            throw new IllegalValueException(Company.MESSAGE_CONSTRAINTS);"},{"lineNumber":98,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"gerhean"},"content":"        final Company modelCompany \u003d new Company(company);"},{"lineNumber":100,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":101,"author":{"gitId":"gerhean"},"content":"        if (role \u003d\u003d null) {"},{"lineNumber":102,"author":{"gitId":"gerhean"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Role.class.getSimpleName()));"},{"lineNumber":103,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"gerhean"},"content":"        if (!Role.isValidRole(role)) {"},{"lineNumber":105,"author":{"gitId":"gerhean"},"content":"            throw new IllegalValueException(Role.MESSAGE_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"gerhean"},"content":"        final Role modelRole \u003d new Role(role);"},{"lineNumber":108,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":109,"author":{"gitId":"gerhean"},"content":"        if (phone \u003d\u003d null) {"},{"lineNumber":110,"author":{"gitId":"gerhean"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":111,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"gerhean"},"content":"        if (!Phone.isValidPhone(phone)) {"},{"lineNumber":113,"author":{"gitId":"gerhean"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":114,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"gerhean"},"content":"        final Phone modelPhone \u003d new Phone(phone);"},{"lineNumber":116,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":117,"author":{"gitId":"gerhean"},"content":"        if (email \u003d\u003d null) {"},{"lineNumber":118,"author":{"gitId":"gerhean"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":119,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"gerhean"},"content":"        if (!Email.isValidEmail(email)) {"},{"lineNumber":121,"author":{"gitId":"gerhean"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":122,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"gerhean"},"content":"        final Email modelEmail \u003d new Email(email);"},{"lineNumber":124,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":125,"author":{"gitId":"gerhean"},"content":"        if (address \u003d\u003d null) {"},{"lineNumber":126,"author":{"gitId":"gerhean"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":127,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"gerhean"},"content":"        if (!Address.isValidAddress(address)) {"},{"lineNumber":129,"author":{"gitId":"gerhean"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":130,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"gerhean"},"content":"        final Address modelAddress \u003d new Address(address);"},{"lineNumber":132,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":133,"author":{"gitId":"gerhean"},"content":"        ApplicationDate modelDate;"},{"lineNumber":134,"author":{"gitId":"gerhean"},"content":"        if (applicationDate \u003d\u003d null) {"},{"lineNumber":135,"author":{"gitId":"gerhean"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                ApplicationDate.class.getSimpleName()));"},{"lineNumber":137,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"gerhean"},"content":"        if (!ApplicationDate.isValidApplicationDate(applicationDate)) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(ApplicationDate.MESSAGE_CONSTRAINTS);"},{"lineNumber":140,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"gerhean"},"content":"        modelDate \u003d new ApplicationDate(applicationDate);"},{"lineNumber":142,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":143,"author":{"gitId":"gerhean"},"content":"        if (priority \u003d\u003d null) {"},{"lineNumber":144,"author":{"gitId":"gerhean"},"content":"            throw new IllegalValueException("},{"lineNumber":145,"author":{"gitId":"gerhean"},"content":"                String.format(MISSING_FIELD_MESSAGE_FORMAT, Priority.class.getSimpleName()));"},{"lineNumber":146,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"gerhean"},"content":"        if (!Priority.isValidPriority(priority)) {"},{"lineNumber":148,"author":{"gitId":"gerhean"},"content":"            throw new IllegalValueException(Priority.MESSAGE_CONSTRAINTS);"},{"lineNumber":149,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"gerhean"},"content":"        final Priority modelPriority \u003d new Priority(priority);"},{"lineNumber":151,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":152,"author":{"gitId":"gerhean"},"content":"        if (status \u003d\u003d null) {"},{"lineNumber":153,"author":{"gitId":"gerhean"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName()));"},{"lineNumber":154,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"gerhean"},"content":"        if (!Status.isValidStatus(status)) {"},{"lineNumber":156,"author":{"gitId":"gerhean"},"content":"            throw new IllegalValueException(Status.MESSAGE_CONSTRAINTS);"},{"lineNumber":157,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"gerhean"},"content":"        final Status modelStatus \u003d Status.valueOf(status);"},{"lineNumber":159,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        if (isArchived \u003d\u003d null) {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Messages.IS_ARCHIVED));"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        if (!BooleanUtil.isValidBoolean(isArchived)) {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(BooleanUtil.INVALID_BOOLEAN);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        final Boolean modelIsArchived \u003d Boolean.valueOf(isArchived);"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"        InternshipApplication internshipApplication \u003d new InternshipApplication(modelCompany, modelRole, modelAddress,"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            modelPhone, modelEmail, modelDate, modelPriority, modelStatus);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        final Status modelLastStage \u003d Status.valueOf(lastStage);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        internshipApplication \u003d internshipApplication.setLastStage(modelLastStage);"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        for (JsonAdaptedInterview jsonAdaptedInterview : interviews) {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            Interview interview \u003d jsonAdaptedInterview.toModelType();"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            if (internshipApplication.hasInterview(interview)) {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_INTERVIEW);"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            internshipApplication.addInterview(interview);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"        if (modelIsArchived) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            internshipApplication \u003d internshipApplication.archive();"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"        return internshipApplication;"},{"lineNumber":186,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":188,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":136,"-":52}},{"path":"src/main/java/seedu/diary/storage/JsonAdaptedInterview.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.util.BooleanUtil;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Address;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.ApplicationDate;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.interview.Interview;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@code Interview}."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class JsonAdaptedInterview {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Interview\u0027s %s field is missing!\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final String isOnline;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final String interviewAddress;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final String interviewDate;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedInterview} with the given interview details."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public JsonAdaptedInterview(@JsonProperty(\"interviewAddress\") String interviewAddress,"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        @JsonProperty(\"isOnline\") String isOnline,"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        @JsonProperty(\"interviewDate\") String interviewDate) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.isOnline \u003d isOnline;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.interviewAddress \u003d interviewAddress;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.interviewDate \u003d interviewDate;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Converts a given {@code Interview} into this class for Jackson use."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public JsonAdaptedInterview(Interview source) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        interviewAddress \u003d source.getInterviewAddress().value;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        interviewDate \u003d source.getDate().toString();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        isOnline \u003d Boolean.toString(source.getIsOnline());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted interview object into the model\u0027s {@code Interview} object."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted interview."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public Interview toModelType() throws IllegalValueException {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (interviewAddress \u003d\u003d null) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(interviewAddress)) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(interviewAddress);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        ApplicationDate modelDate;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        if (interviewDate \u003d\u003d null) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                ApplicationDate.class.getSimpleName()));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (!ApplicationDate.isValidApplicationDate(interviewDate)) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(ApplicationDate.MESSAGE_CONSTRAINTS);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        modelDate \u003d new ApplicationDate(interviewDate);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (isOnline \u003d\u003d null) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Boolean.class.getSimpleName()));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        if (!BooleanUtil.isValidBoolean(isOnline)) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(BooleanUtil.INVALID_BOOLEAN);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        Boolean modelIsOnline \u003d Boolean.parseBoolean(isOnline);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return Interview.createInterview(modelIsOnline, modelDate, modelAddress);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":6,"-":71}},{"path":"src/main/java/seedu/diary/storage/JsonInternshipDiaryStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.storage;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.util.FileUtil;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.util.JsonUtil;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ReadOnlyInternshipDiary;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":" * A class to access InternshipDiary data stored as a json file on the hard disk."},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":" */"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"public class JsonInternshipDiaryStorage implements InternshipDiaryStorage {"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonInternshipDiaryStorage.class);"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"    private Path filePath;"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"    public JsonInternshipDiaryStorage(Path filePath) {"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"    public Path getInternshipDiaryFilePath() {"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"    public Optional\u003cReadOnlyInternshipDiary\u003e readInternshipDiary() throws DataConversionException {"},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"        return readInternshipDiary(filePath);"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"     * Similar to {@link #readInternshipDiary()}."},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"    public Optional\u003cReadOnlyInternshipDiary\u003e readInternshipDiary(Path filePath) throws DataConversionException {"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"        Optional\u003cJsonSerializableInternshipDiary\u003e jsonInternshipDiary \u003d JsonUtil.readJsonFile("},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"            filePath, JsonSerializableInternshipDiary.class);"},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"        if (jsonInternshipDiary.isEmpty()) {"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":"            return Optional.empty();"},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"gerhean"},"content":"            return Optional.of(jsonInternshipDiary.get().toModelType());"},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"},{"lineNumber":58,"author":{"gitId":"gerhean"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":59,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":62,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"gerhean"},"content":"    public void saveInternshipDiary(ReadOnlyInternshipDiary internshipDiary) throws IOException {"},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":"        saveInternshipDiary(internshipDiary, filePath);"},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":67,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"gerhean"},"content":"     * Similar to {@link #saveInternshipDiary(ReadOnlyInternshipDiary)}."},{"lineNumber":69,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"gerhean"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":71,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"gerhean"},"content":"    public void saveInternshipDiary(ReadOnlyInternshipDiary internshipDiary, Path filePath) throws IOException {"},{"lineNumber":73,"author":{"gitId":"gerhean"},"content":"        requireNonNull(internshipDiary);"},{"lineNumber":74,"author":{"gitId":"gerhean"},"content":"        requireNonNull(filePath);"},{"lineNumber":75,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":76,"author":{"gitId":"gerhean"},"content":"        FileUtil.createIfMissing(filePath);"},{"lineNumber":77,"author":{"gitId":"gerhean"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableInternshipDiary(internshipDiary), filePath);"},{"lineNumber":78,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":80,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":80}},{"path":"src/main/java/seedu/diary/storage/JsonSerializableInternshipDiary.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.storage;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.InternshipDiary;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ReadOnlyInternshipDiary;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":" * An Immutable InternshipDiary that is serializable to JSON format."},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":" */"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"@JsonRootName(value \u003d \"internshipDiary\")"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"class JsonSerializableInternshipDiary {"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"    public static final String MESSAGE_DUPLICATE_INTERNSHIP \u003d \"Internship list contains duplicate internship(s).\";"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"    private final List\u003cJsonAdaptedInternship\u003e internships \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonSerializableInternshipDiary} with the given internship applications."},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"    @JsonCreator"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"    public JsonSerializableInternshipDiary(@JsonProperty(\"internships\") List\u003cJsonAdaptedInternship\u003e internships) {"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"        this.internships.addAll(internships);"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"     * Converts a given {@code ReadOnlyInternshipDiary} into this class for Jackson use."},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableInternshipDiary}."},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"    public JsonSerializableInternshipDiary(ReadOnlyInternshipDiary source) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        internships.addAll(source.getAllInternshipList().stream()"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"            .map(JsonAdaptedInternship::new).collect(Collectors.toList()));"},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"     * Converts this diary book into the model\u0027s {@code InternshipDiary} object."},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"     * @throws IllegalValueException if there were any data constraints violated."},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"    public InternshipDiary toModelType() throws IllegalValueException {"},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"        InternshipDiary internshipDiary \u003d new InternshipDiary();"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":"        for (JsonAdaptedInternship jsonAdaptedInternship : internships) {"},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":"            InternshipApplication internship \u003d jsonAdaptedInternship.toModelType();"},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":"            if (internshipDiary.hasInternship(internship)) {"},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_INTERNSHIP);"},{"lineNumber":55,"author":{"gitId":"gerhean"},"content":"            }"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            internshipDiary.loadInternshipApplication(internship);"},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"gerhean"},"content":"        return internshipDiary;"},{"lineNumber":59,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":58,"-":3}},{"path":"src/main/java/seedu/diary/storage/JsonUserPrefsStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.util.JsonUtil;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ReadOnlyUserPrefs;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.UserPrefs;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A class to access UserPrefs stored in the hard disk as a json file"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorage implements UserPrefsStorage {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path filePath;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public JsonUserPrefsStorage(Path filePath) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return filePath;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return readUserPrefs(filePath);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Similar to {@link #readUserPrefs()}"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @param prefsFilePath location of the data. Cannot be null."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(userPrefs, filePath);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":6,"-":42}},{"path":"src/main/java/seedu/diary/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ReadOnlyInternshipDiary;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ReadOnlyUserPrefs;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.UserPrefs;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * API of the Storage component"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"public interface Storage extends InternshipDiaryStorage, UserPrefsStorage {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"    Path getInternshipDiaryFilePath();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"    Optional\u003cReadOnlyInternshipDiary\u003e readInternshipDiary() throws DataConversionException, IOException;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"    void saveInternshipDiary(ReadOnlyInternshipDiary internshipDiary) throws IOException;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":9,"-":23}},{"path":"src/main/java/seedu/diary/storage/StorageManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.exceptions.DataConversionException;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ReadOnlyInternshipDiary;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ReadOnlyUserPrefs;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":" * Manages storage of InternshipDiary data in local storage."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"    private InternshipDiaryStorage internshipDiaryStorage;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"    public StorageManager(InternshipDiaryStorage internshipDiaryStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"        this.internshipDiaryStorage \u003d internshipDiaryStorage;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d InternshipDiary methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":"    public Path getInternshipDiaryFilePath() {"},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":"        return internshipDiaryStorage.getInternshipDiaryFilePath();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":"    public Optional\u003cReadOnlyInternshipDiary\u003e readInternshipDiary() throws DataConversionException, IOException {"},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":"        return readInternshipDiary(internshipDiaryStorage.getInternshipDiaryFilePath());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":"    public Optional\u003cReadOnlyInternshipDiary\u003e readInternshipDiary(Path filePath)"},{"lineNumber":62,"author":{"gitId":"gerhean"},"content":"        throws DataConversionException, IOException {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":"        return internshipDiaryStorage.readInternshipDiary(filePath);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void saveInternshipDiary(ReadOnlyInternshipDiary internshipDiary) throws IOException {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        saveInternshipDiary(internshipDiary, internshipDiaryStorage.getInternshipDiaryFilePath());"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void saveInternshipDiary(ReadOnlyInternshipDiary internshipDiary, Path filePath) throws IOException {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        internshipDiaryStorage.saveInternshipDiary(internshipDiary, filePath);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":18,"-":60}},{"path":"src/main/java/seedu/diary/storage/UserPrefsStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ReadOnlyUserPrefs;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.UserPrefs;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":" * Represents a storage for {@link seedu.diary.model.UserPrefs}."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface UserPrefsStorage {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the UserPrefs data file."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Path getUserPrefsFilePath();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns UserPrefs data from storage."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"     * Saves the given {@link seedu.diary.model.ReadOnlyUserPrefs} to the storage."},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param userPrefs cannot be null."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":8,"-":30}},{"path":"src/main/java/seedu/diary/ui/CommandBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.CommandResult;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.exceptions.ClearCommandConfirmationParseException;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final CommandExecutor commandExecutor;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"    private EnteredCommandsHistory commandsHistory \u003d new EnteredCommandsHistory();"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public CommandBox(CommandExecutor commandExecutor) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.commandExecutor \u003d commandExecutor;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":34,"author":{"gitId":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private void handleCommandEntered() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"            String text \u003d commandTextField.getText();"},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"            commandExecutor.execute(text);"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"            commandsHistory.add(text);"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"            commandsHistory.resetIterator();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        } catch (ClearCommandConfirmationParseException e) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":"     * Handles any keyPressed pressed event."},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"gerhean"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitId":"gerhean"},"content":"    private void handleKeyPressed(KeyEvent ke) {"},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":"        if (ke.getCode() \u003d\u003d KeyCode.UP) {"},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":"            String text \u003d commandsHistory.iterateNext();"},{"lineNumber":62,"author":{"gitId":"gerhean"},"content":"            if (text !\u003d null) {"},{"lineNumber":63,"author":{"gitId":"gerhean"},"content":"                commandTextField.setText(text);"},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":"                commandTextField.positionCaret(commandTextField.getLength());"},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"gerhean"},"content":"        } else if (ke.getCode() \u003d\u003d KeyCode.DOWN) {"},{"lineNumber":67,"author":{"gitId":"gerhean"},"content":"            String text \u003d commandsHistory.iteratePrevious();"},{"lineNumber":68,"author":{"gitId":"gerhean"},"content":"            if (text !\u003d null) {"},{"lineNumber":69,"author":{"gitId":"gerhean"},"content":"                commandTextField.setText(text);"},{"lineNumber":70,"author":{"gitId":"gerhean"},"content":"                commandTextField.positionCaret(commandTextField.getLength());"},{"lineNumber":71,"author":{"gitId":"gerhean"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"gerhean"},"content":"        } else if (ke.getCode() !\u003d KeyCode.LEFT \u0026\u0026 ke.getCode() !\u003d KeyCode.RIGHT) {"},{"lineNumber":73,"author":{"gitId":"gerhean"},"content":"            commandsHistory.resetIterator();"},{"lineNumber":74,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Represents a function that can execute commands."},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @FunctionalInterface"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public interface CommandExecutor {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * Executes the command and returns the result."},{"lineNumber":104,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":105,"author":{"gitId":"gerhean"},"content":"         * @see seedu.diary.logic.Logic#execute(String)"},{"lineNumber":106,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":37,"-":73}},{"path":"src/main/java/seedu/diary/ui/ComparatorDisplayFooter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.ui;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import java.beans.PropertyChangeEvent;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import java.beans.PropertyChangeListener;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import java.util.Comparator;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":" * A graphical interface for the statistics that is displayed at the footer of the application."},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":" */"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"public class ComparatorDisplayFooter extends UiPart\u003cRegion\u003e implements PropertyChangeListener {"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"    private static final String FXML \u003d \"ComparatorDisplayFooter.fxml\";"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"    private Label comparatorLabel;"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"    public ComparatorDisplayFooter() {"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"        super(FXML);"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"        updateComparatorDisplay(null);"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"     * Receives the latest changes in Comparator from internship diary."},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"     * Updates the relevant display accordingly."},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"    @SuppressWarnings(\"unchecked\")"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"    public void propertyChange(PropertyChangeEvent e) {"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"        updateComparatorDisplay((Comparator\u003cInternshipApplication\u003e) e.getNewValue());"},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"     * Computes and updates the comparatorLabel."},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"     * @param comparator comparator object that generates relevant display."},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"    private void updateComparatorDisplay(Comparator\u003cInternshipApplication\u003e comparator) {"},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"        if (comparator \u003d\u003d null) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            comparatorLabel.setText(\"Not Sorted\");"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"        } else {"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"            comparatorLabel.setText(\"Sorted by: \" + comparator.toString());"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":50,"-":1}},{"path":"src/main/java/seedu/diary/ui/EnteredCommandsHistory.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.ui;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import java.util.LinkedList;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import java.util.ListIterator;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":" * The UI component helper that is responsible for storing the history of user command inputs."},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":" */"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"public class EnteredCommandsHistory {"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"    private final LinkedList\u003cString\u003e commandsHistory \u003d new LinkedList\u003c\u003e();"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"    private ListIterator\u003cString\u003e historyIterator;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"    private final int maxSize;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"     * Uses the default {@code maxSize} of 20 for history."},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"    public EnteredCommandsHistory() {"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"        this.maxSize \u003d 20;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"     * Uses the given {@code maxSize} for the history."},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"    public EnteredCommandsHistory(int maxSize) {"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"        this.maxSize \u003d maxSize;"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"     * Adds string to history."},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"     * @param command The string to be stored in the history."},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"    public void add(String command) {"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"        this.commandsHistory.addFirst(command);"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"        if (this.commandsHistory.size() \u003e maxSize) {"},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"            this.commandsHistory.removeLast();"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"        this.historyIterator \u003d null;"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"     * Returns the size of the command history."},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"     * @return the size of the command history."},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"    public int size() {"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"        return commandsHistory.size();"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":"     * Resets the history iterator."},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":"    public void resetIterator() {"},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":"        this.historyIterator \u003d null;"},{"lineNumber":55,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"gerhean"},"content":"     * Returns a command earlier in history."},{"lineNumber":59,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":"     * @return the string stored earlier in history."},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"gerhean"},"content":"    public String iterateNext() {"},{"lineNumber":63,"author":{"gitId":"gerhean"},"content":"        if (this.historyIterator \u003d\u003d null) {"},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":"            this.historyIterator \u003d commandsHistory.listIterator(0);"},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"gerhean"},"content":"        if (this.historyIterator.hasNext()) {"},{"lineNumber":67,"author":{"gitId":"gerhean"},"content":"            return this.historyIterator.next();"},{"lineNumber":68,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"gerhean"},"content":"        return null;"},{"lineNumber":70,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":72,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"gerhean"},"content":"     * Returns a command later in history."},{"lineNumber":74,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"gerhean"},"content":"     * @return the string stored later in history."},{"lineNumber":76,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"gerhean"},"content":"    public String iteratePrevious() {"},{"lineNumber":78,"author":{"gitId":"gerhean"},"content":"        if (this.historyIterator !\u003d null) {"},{"lineNumber":79,"author":{"gitId":"gerhean"},"content":"            if (this.historyIterator.hasPrevious()) {"},{"lineNumber":80,"author":{"gitId":"gerhean"},"content":"                this.historyIterator.previous();"},{"lineNumber":81,"author":{"gitId":"gerhean"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"gerhean"},"content":"            if (this.historyIterator.hasPrevious()) {"},{"lineNumber":83,"author":{"gitId":"gerhean"},"content":"                String result \u003d this.historyIterator.previous();"},{"lineNumber":84,"author":{"gitId":"gerhean"},"content":"                this.historyIterator.next();"},{"lineNumber":85,"author":{"gitId":"gerhean"},"content":"                return result;"},{"lineNumber":86,"author":{"gitId":"gerhean"},"content":"            } else {"},{"lineNumber":87,"author":{"gitId":"gerhean"},"content":"                return \"\";"},{"lineNumber":88,"author":{"gitId":"gerhean"},"content":"            }"},{"lineNumber":89,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"gerhean"},"content":"        return null;"},{"lineNumber":91,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":92}},{"path":"src/main/java/seedu/diary/ui/HelpWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import java.net.URISyntaxException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import javafx.scene.media.MediaException;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Controller for a help page"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay1920s2-cs2103t-f10-2.github.io/main/UserGuide.html\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private Button copyButton;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"    private WebView guideView;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        super(FXML, root);"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"            String uri \u003d HelpWindow.class.getResource(\"/html/userGuide.html\").toURI().toString();"},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"            guideView.getEngine().load(uri);"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"        } catch (URISyntaxException | MediaException e) {"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"            e.printStackTrace();"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public HelpWindow() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this(new Stage());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Shows the help window."},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":"     * @throws IllegalStateException \u003cul\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * \u003cli\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * \u003c/li\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * \u003cli\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * if this method is called during animation or layout processing."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * \u003c/li\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * \u003cli\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * if this method is called on the primary stage."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * \u003c/li\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * \u003cli\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * if {@code dialogStage} is already showing."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * \u003c/li\u003e"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void show() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        getRoot().show();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        guideView.getEngine().reload();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public boolean isShowing() {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Hides the help window."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void hide() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        getRoot().hide();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Focuses on the help window."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void focus() {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":16,"-":80}},{"path":"src/main/java/seedu/diary/ui/InternshipApplicationCard.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.status.Status;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code InternshipApplication}."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class InternshipApplicationCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"InternshipApplicationListCard.fxml\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String WISHLIST_COLOR \u003d \"-fx-background-color: #cd70ff;\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String APPLIED_COLOR \u003d \"-fx-background-color: #209cee;\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String INTERVIEW_COLOR \u003d \"-fx-background-color: #22c65b;\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String OFFERED_COLOR \u003d \"-fx-text-fill: black; -fx-background-color: #ffdd57;\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String REJECTED_COLOR \u003d \"-fx-background-color: #ff3860;\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String GHOSTED_COLOR \u003d \"-fx-text-fill: black; -fx-background-color: #cdcdcd;\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public final InternshipApplication internshipApplication;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private HBox cardPane;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label company;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label id;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Label phone;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private Label address;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Label email;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private Label role;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private Label applicationDate;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private Label priority;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private FlowPane status;"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public InternshipApplicationCard(InternshipApplication internshipApplication, int displayedIndex) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        this.internshipApplication \u003d internshipApplication;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        company.setText(internshipApplication.getCompany().fullCompany);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        role.setText(internshipApplication.getRole().fullRole);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        Label statusLabel \u003d getStatusLabel();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        status.getChildren().add(statusLabel);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Gets the status label colored based on the status of the internship application."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * @return the status label colored based on the status of the internship application"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private Label getStatusLabel() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Status internshipApplicationStatus \u003d internshipApplication.getStatus();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        Label statusLabel \u003d new Label(internshipApplicationStatus.toString().toLowerCase());"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        switch (internshipApplicationStatus) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        case WISHLIST:"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            statusLabel.setStyle(WISHLIST_COLOR);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        case APPLIED:"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            statusLabel.setStyle(APPLIED_COLOR);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        case INTERVIEW:"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            statusLabel.setStyle(INTERVIEW_COLOR);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        case OFFERED:"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            statusLabel.setStyle(OFFERED_COLOR);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        case REJECTED:"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            statusLabel.setStyle(REJECTED_COLOR);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        case GHOSTED:"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            statusLabel.setStyle(GHOSTED_COLOR);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return statusLabel;"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        if (!(other instanceof InternshipApplicationCard)) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        InternshipApplicationCard card \u003d (InternshipApplicationCard) other;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            \u0026\u0026 internshipApplication.equals(card.internshipApplication);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":4,"-":112}},{"path":"src/main/java/seedu/diary/ui/InternshipApplicationDetail.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.diary.model.ListenerPropertyType.DISPLAYED_INTERVIEWS;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.SplitPane;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Represents a panel with the details of a specific {@code InternshipApplication}."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class InternshipApplicationDetail extends UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"InternshipApplicationDetail.fxml\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    // Whitespace utility for printing details."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private InternshipApplication internshipApplication;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private InterviewListPanel interviewListPanel;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private SplitPane splitPanePlaceHolder;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private StackPane interviewListPanelPlaceHolder;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private HBox detailPane;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private Label company;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Label phone;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private Label address;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private Label email;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private Label role;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private Label applicationDate;"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private Label priority;"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private Label status;"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private Label interviewPreamble;"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public InternshipApplicationDetail(InternshipApplication internshipApplication) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        company.setText(internshipApplication.getCompany().fullCompany);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        phone.setText(internshipApplication.getPhone().value);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        address.setText(internshipApplication.getAddress().value);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        email.setText(internshipApplication.getEmail().value);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        role.setText(internshipApplication.getRole().fullRole);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        priority.setText(internshipApplication.getPriority().fullPriority + \"\");"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        applicationDate.setText(internshipApplication.getApplicationDate().printDate());"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        status.setText(internshipApplication.getStatus().toString()"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            + internshipApplication.getLastStageMessage());"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        interviewPreamble.setText(\"Interviews: \");"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        interviewListPanel \u003d new InterviewListPanel("},{"lineNumber":78,"author":{"gitId":"-"},"content":"            FXCollections.observableArrayList(internshipApplication.getInterviews()));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        interviewListPanelPlaceHolder.getChildren().add(interviewListPanel.getRoot());"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // remove old listeners to InternshipApplication"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        internshipApplication.removeAllPropertyChangeListener();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // initiate listener to InternshipApplication"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        internshipApplication.addPropertyChangeListener(DISPLAYED_INTERVIEWS, interviewListPanel);"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":3,"-":83}},{"path":"src/main/java/seedu/diary/ui/InternshipApplicationDetailSetter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.ui;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.model.ListenerPropertyType.DISPLAYED_INTERNSHIP_DETAIL;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.model.ListenerPropertyType.PREDICATE;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import java.beans.PropertyChangeEvent;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import java.beans.PropertyChangeListener;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import java.util.function.Predicate;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A setter for the internship application details on the stack pane."},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":" */"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"public class InternshipApplicationDetailSetter implements PropertyChangeListener {"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"    private final StackPane internshipApplicationDetailPlaceholder;"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"    private InternshipApplication internshipApplication;"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"    private Region internshipApplicationDetailRoot;"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"    public InternshipApplicationDetailSetter(StackPane internshipApplicationDetailPlaceholder) {"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"        this.internshipApplicationDetailPlaceholder \u003d internshipApplicationDetailPlaceholder;"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Receives the latest changes in predicate or the internship application selected from internship diary."},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"     * Updates the relevant display accordingly."},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"    @SuppressWarnings(\"unchecked\")"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"    public void propertyChange(PropertyChangeEvent e) {"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"        String propertyName \u003d e.getPropertyName();"},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"        if (propertyName.equals(DISPLAYED_INTERNSHIP_DETAIL.toString())) {"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"            if (Objects.equals(e.getOldValue(), internshipApplication) || e.getOldValue() \u003d\u003d null) {"},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"                updateInternshipDetail((InternshipApplication) e.getNewValue());"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"        } else if (propertyName.equals(PREDICATE.toString())) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            if (internshipApplication \u003d\u003d null) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                return;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"            Predicate\u003cInternshipApplication\u003e predicate \u003d (Predicate\u003cInternshipApplication\u003e) e.getNewValue();"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"            if (predicate !\u003d null \u0026\u0026 !predicate.test(this.internshipApplication)) {"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"                updateInternshipDetail(null);"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"        } else {"},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"            throw new IllegalStateException(\"InternshipApplicationDetailSetter listening to unhandled property name\");"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"gerhean"},"content":"     * Computes and updates the InternshipApplicationDetail."},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":"     * @param internshipApplication internshipApplication object that generates relevant display."},{"lineNumber":58,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"gerhean"},"content":"    public void updateInternshipDetail(InternshipApplication internshipApplication) {"},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":"        if (Objects.equals(this.internshipApplication, internshipApplication)) {"},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":"            return;"},{"lineNumber":62,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"gerhean"},"content":"        this.internshipApplication \u003d internshipApplication;"},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":"        internshipApplicationDetailPlaceholder.getChildren().remove(internshipApplicationDetailRoot);"},{"lineNumber":66,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":67,"author":{"gitId":"gerhean"},"content":"        if (internshipApplication !\u003d null) {"},{"lineNumber":68,"author":{"gitId":"gerhean"},"content":"            this.internshipApplicationDetailRoot \u003d new InternshipApplicationDetail(internshipApplication).getRoot();"},{"lineNumber":69,"author":{"gitId":"gerhean"},"content":"            internshipApplicationDetailPlaceholder.getChildren().add(internshipApplicationDetailRoot);"},{"lineNumber":70,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":73,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":67,"-":6}},{"path":"src/main/java/seedu/diary/ui/InternshipApplicationListPanel.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.beans.PropertyChangeEvent;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.beans.PropertyChangeListener;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.ApplicationDateDuePredicate;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.InterviewDateDuePredicate;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.diary.model.internship.predicate.StatusIsInterviewPredicate;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.diary.model.internship.predicate.StatusIsWishlistPredicate;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.status.Status;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Panel containing the list of internship applications."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class InternshipApplicationListPanel extends UiPart\u003cRegion\u003e implements PropertyChangeListener {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"InternshipApplicationListPanel.fxml\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String UPCOMING_BACKGROUND_COLOR \u003d \"-fx-background-color: #0d914f\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String GHOSTED_BACKGROUND_COLOR \u003d \"-fx-background-color: CRIMSON\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(InternshipApplicationListPanel.class);"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private ListView\u003cInternshipApplication\u003e internshipApplicationListView;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public InternshipApplicationListPanel(ObservableList\u003cInternshipApplication\u003e internshipApplicationList) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        internshipApplicationListView.setItems(internshipApplicationList);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        internshipApplicationListView.setCellFactory(listView -\u003e new InternshipApplicationListViewCell());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public ListView\u003cInternshipApplication\u003e getInternshipApplicationListView() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return internshipApplicationListView;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Receives the latest changes in displayed internships from internship diary."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Updates the internship application list view accordingly."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @SuppressWarnings(\"unchecked\")"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void propertyChange(PropertyChangeEvent e) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        ObservableList\u003cInternshipApplication\u003e ia \u003d (ObservableList\u003cInternshipApplication\u003e) e.getNewValue();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        internshipApplicationListView.setItems(ia);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code InternshipApplication} using a"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * {@code InternshipApplicationCard}."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    class InternshipApplicationListViewCell extends ListCell\u003cInternshipApplication\u003e {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        private String originalStyle \u003d getStyle();"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        protected void updateItem(InternshipApplication internshipApplication, boolean empty) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            super.updateItem(internshipApplication, empty);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"            if (empty || internshipApplication \u003d\u003d null) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                setGraphic(null);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                setText(null);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                setStyle(originalStyle);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                setGraphic(new InternshipApplicationCard(internshipApplication, getIndex() + 1).getRoot());"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                if (internshipApplication.isArchived()) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                    setStyle(originalStyle);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                } else if (isUpcoming(internshipApplication)) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                    setStyle(UPCOMING_BACKGROUND_COLOR);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                } else if (internshipApplication.getStatus().equals(Status.GHOSTED)) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                    setStyle(GHOSTED_BACKGROUND_COLOR);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                } else {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                    setStyle(originalStyle);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":85,"author":{"gitId":"-"},"content":"         * Verify if the given internship application has upcoming deadline or interview."},{"lineNumber":86,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":87,"author":{"gitId":"-"},"content":"         * @param internshipApplication The internship application to check."},{"lineNumber":88,"author":{"gitId":"-"},"content":"         * @return true if the application has a application deadline and is of status wishlist, or if the application"},{"lineNumber":89,"author":{"gitId":"-"},"content":"         * has an upcoming interview and is of status interview. False otherwise."},{"lineNumber":90,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        private boolean isUpcoming(InternshipApplication internshipApplication) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            Predicate\u003cInternshipApplication\u003e applicationDateDuePredicate \u003d"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                new ApplicationDateDuePredicate().and(new StatusIsWishlistPredicate());"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            Predicate\u003cInternshipApplication\u003e upcomingInterviewDatePredicate \u003d"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                new InterviewDateDuePredicate().and(new StatusIsInterviewPredicate());"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            return applicationDateDuePredicate.or(upcomingInterviewDatePredicate).test(internshipApplication);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":6,"-":94}},{"path":"src/main/java/seedu/diary/ui/InterviewCard.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.interview.Interview;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A UI component that shows information regarding an {@code Interview}."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class InterviewCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String FXML \u003d \"InterviewCard.fxml\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public final Interview interview;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private HBox cardPane;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private Label title;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Label date;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Label address;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public InterviewCard(Interview interview, int index) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.interview \u003d interview;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String title \u003d \"Interview \";"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        date.setText(interview.getDate().printDate());"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        if (interview.getIsOnline()) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            this.title.setText(index + \". ONLINE \" + title);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            this.title.setText(index + \". OFFLINE \" + title);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        address.setText(interview.getInterviewAddress().value);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":3,"-":40}},{"path":"src/main/java/seedu/diary/ui/InterviewListPanel.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.beans.PropertyChangeEvent;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.beans.PropertyChangeListener;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.interview.Interview;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Panel containing the list of interviews in a specific Internship Application."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class InterviewListPanel extends UiPart\u003cRegion\u003e implements PropertyChangeListener {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String FXML \u003d \"InterviewListPanel.fxml\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private ListView\u003cInterview\u003e interviewListView;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public InterviewListPanel(ObservableList\u003cInterview\u003e interviews) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        interviewListView.setItems(interviews);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        interviewListView.setCellFactory(listView -\u003e new InternshipApplicationListViewCell());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Receives the latest changes in displayed interviews from the internship application."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Updates the interview list view accordingly."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @SuppressWarnings(\"unchecked\")"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void propertyChange(PropertyChangeEvent e) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        List\u003cInterview\u003e interviews \u003d (ArrayList\u003cInterview\u003e) e.getNewValue();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        interviewListView.setItems(FXCollections.observableArrayList(interviews));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Interview} using a"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * {@code InterviewCard}."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    class InternshipApplicationListViewCell extends ListCell\u003cInterview\u003e {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        protected void updateItem(Interview interview, boolean empty) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            super.updateItem(interview, empty);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"            if (empty || interview \u003d\u003d null) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                setGraphic(null);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                setText(null);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                setGraphic(new InterviewCard(interview, getIndex() + 1).getRoot());"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":3,"-":59}},{"path":"src/main/java/seedu/diary/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.model.ListenerPropertyType.COMPARATOR;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.model.ListenerPropertyType.DISPLAYED_INTERNSHIP_DETAIL;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.model.ListenerPropertyType.FILTERED_INTERNSHIP_APPLICATIONS;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.model.ListenerPropertyType.PREDICATE;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.model.ListenerPropertyType.VIEW_TYPE;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import javafx.beans.value.ChangeListener;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import javafx.beans.value.ObservableValue;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.event.EventHandler;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import javafx.scene.control.SplitPane;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import javafx.scene.input.MouseEvent;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.GuiSettings;"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.LogsCenter;"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.Logic;"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.CommandResult;"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.exceptions.CommandException;"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.exceptions.ParseException;"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":36,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":37,"author":{"gitId":"-"},"content":" */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"    // Container for Ui parts"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"    private InternshipApplicationDetailSetter internshipApplicationDetailSetter;"},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private InternshipApplicationListPanel internshipApplicationListPanel;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private StatisticsWindow statisticsWindow;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private StatisticsBarFooter statisticsBarFooter;"},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":"    private ComparatorDisplayFooter comparatorDisplayFooter;"},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":"    private PredicateDisplayFooter predicateDisplayFooter;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private ViewDisplayFooter viewDisplayFooter;"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"gerhean"},"content":"    @FXML"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private SplitPane resultAndInternshipSplitPanePlaceholder;"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    private SplitPane listAndDetailsSplitPanePlaceholder;"},{"lineNumber":71,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private StackPane internshipApplicationListPanelPlaceholder;"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private StackPane internshipApplicationDetailPlaceholder;"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private StackPane comparatorDisplayPlaceholder;"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"gerhean"},"content":"    @FXML"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private StackPane predicateDisplayPlaceholder;"},{"lineNumber":86,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    private StackPane viewDisplayPlaceholder;"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"gerhean"},"content":"    @FXML"},{"lineNumber":91,"author":{"gitId":"gerhean"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":92,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":93,"author":{"gitId":"gerhean"},"content":"    @FXML"},{"lineNumber":94,"author":{"gitId":"gerhean"},"content":"    private StackPane statisticsPlaceholder;"},{"lineNumber":95,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        // Set dependencies"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // Configure the UI"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        setAccelerators();"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"gerhean"},"content":"        internshipApplicationDetailSetter \u003d"},{"lineNumber":109,"author":{"gitId":"gerhean"},"content":"            new InternshipApplicationDetailSetter(internshipApplicationDetailPlaceholder);"},{"lineNumber":110,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        statisticsWindow \u003d new StatisticsWindow(logic.getStatistics(), logic.getFilteredInternshipApplicationList());"},{"lineNumber":113,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":114,"author":{"gitId":"gerhean"},"content":"        setSplitPaneDefaultSplit(0.2);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Initializes the relevant UI objects to listen for property changes."},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void initListeners() {"},{"lineNumber":121,"author":{"gitId":"gerhean"},"content":"        logic.addPropertyChangeListener(FILTERED_INTERNSHIP_APPLICATIONS, internshipApplicationListPanel);"},{"lineNumber":122,"author":{"gitId":"gerhean"},"content":"        logic.addPropertyChangeListener(FILTERED_INTERNSHIP_APPLICATIONS, statisticsWindow);"},{"lineNumber":123,"author":{"gitId":"gerhean"},"content":"        logic.addPropertyChangeListener(FILTERED_INTERNSHIP_APPLICATIONS, statisticsBarFooter);"},{"lineNumber":124,"author":{"gitId":"gerhean"},"content":"        logic.addPropertyChangeListener(COMPARATOR, comparatorDisplayFooter);"},{"lineNumber":125,"author":{"gitId":"gerhean"},"content":"        logic.addPropertyChangeListener(PREDICATE, predicateDisplayFooter);"},{"lineNumber":126,"author":{"gitId":"gerhean"},"content":"        logic.addPropertyChangeListener(PREDICATE, internshipApplicationDetailSetter);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        logic.addPropertyChangeListener(VIEW_TYPE, viewDisplayFooter);"},{"lineNumber":128,"author":{"gitId":"gerhean"},"content":"        logic.addPropertyChangeListener(DISPLAYED_INTERNSHIP_DETAIL, internshipApplicationDetailSetter);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        return primaryStage;"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":136,"author":{"gitId":"gerhean"},"content":"     * Sets the default split of the splitPane."},{"lineNumber":137,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"gerhean"},"content":"    private void setSplitPaneDefaultSplit(double split) {"},{"lineNumber":139,"author":{"gitId":"gerhean"},"content":"        this.primaryStage.showingProperty().addListener(new ChangeListener\u003cBoolean\u003e() {"},{"lineNumber":140,"author":{"gitId":"gerhean"},"content":"            @Override"},{"lineNumber":141,"author":{"gitId":"gerhean"},"content":"            public void changed(ObservableValue\u003c? extends Boolean\u003e observable, Boolean oldValue, Boolean newValue) {"},{"lineNumber":142,"author":{"gitId":"gerhean"},"content":"                if (newValue) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                    resultAndInternshipSplitPanePlaceholder.setDividerPositions(split);"},{"lineNumber":144,"author":{"gitId":"gerhean"},"content":"                    observable.removeListener(this);"},{"lineNumber":145,"author":{"gitId":"gerhean"},"content":"                }"},{"lineNumber":146,"author":{"gitId":"gerhean"},"content":"            }"},{"lineNumber":147,"author":{"gitId":"gerhean"},"content":"        });"},{"lineNumber":148,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":156,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":163,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":164,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":165,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":166,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":167,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":168,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":169,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":170,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":171,"author":{"gitId":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":172,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":173,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":174,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":175,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":176,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":180,"author":{"gitId":"-"},"content":"                event.consume();"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":187,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitId":"gerhean"},"content":"    protected void fillInnerParts() {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        internshipApplicationListPanel \u003d new InternshipApplicationListPanel("},{"lineNumber":190,"author":{"gitId":"-"},"content":"            logic.getFilteredInternshipApplicationList());"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        internshipApplicationListPanelPlaceholder.getChildren().add(internshipApplicationListPanel.getRoot());"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"        ListView\u003cInternshipApplication\u003e internshipApplicationListView \u003d internshipApplicationListPanel"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            .getInternshipApplicationListView();"},{"lineNumber":195,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":"        // Show internship application details on click"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        internshipApplicationListView.setOnMouseClicked(new EventHandler\u003cMouseEvent\u003e() {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            @Override"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            public void handle(MouseEvent event) {"},{"lineNumber":200,"author":{"gitId":"gerhean"},"content":"                InternshipApplication internshipApplication \u003d internshipApplicationListView"},{"lineNumber":201,"author":{"gitId":"gerhean"},"content":"                    .getSelectionModel().getSelectedItem();"},{"lineNumber":202,"author":{"gitId":"gerhean"},"content":"                internshipApplicationDetailSetter.updateInternshipDetail(internshipApplication);"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getInternshipDiaryFilePath());"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"        statisticsBarFooter \u003d new StatisticsBarFooter(logic.getStatistics(),"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            logic.getFilteredInternshipApplicationList());"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        statisticsPlaceholder.getChildren().add(statisticsBarFooter.getRoot());"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"gerhean"},"content":"        comparatorDisplayFooter \u003d new ComparatorDisplayFooter();"},{"lineNumber":217,"author":{"gitId":"gerhean"},"content":"        comparatorDisplayPlaceholder.getChildren().add(comparatorDisplayFooter.getRoot());"},{"lineNumber":218,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":219,"author":{"gitId":"gerhean"},"content":"        predicateDisplayFooter \u003d new PredicateDisplayFooter();"},{"lineNumber":220,"author":{"gitId":"gerhean"},"content":"        predicateDisplayPlaceholder.getChildren().add(predicateDisplayFooter.getRoot());"},{"lineNumber":221,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":222,"author":{"gitId":"-"},"content":"        viewDisplayFooter \u003d new ViewDisplayFooter();"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        viewDisplayPlaceholder.getChildren().add(viewDisplayFooter.getRoot());"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}."},{"lineNumber":231,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {"},{"lineNumber":236,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":242,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened."},{"lineNumber":243,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    public void handleHelp() {"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {"},{"lineNumber":247,"author":{"gitId":"-"},"content":"            helpWindow.show();"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            helpWindow.focus();"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":254,"author":{"gitId":"-"},"content":"     * Opens the statistics window or focuses on it if it\u0027s already opened."},{"lineNumber":255,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    public void handleStatistics() {"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        if (!statisticsWindow.isShowing()) {"},{"lineNumber":259,"author":{"gitId":"-"},"content":"            statisticsWindow.show();"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":261,"author":{"gitId":"-"},"content":"            statisticsWindow.focus();"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"gerhean"},"content":"    protected void show() {"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        primaryStage.show();"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":270,"author":{"gitId":"-"},"content":"     * Closes the application."},{"lineNumber":271,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    private void handleExit() {"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":275,"author":{"gitId":"-"},"content":"            (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":276,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        helpWindow.hide();"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        statisticsWindow.hide();"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        primaryStage.hide();"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"-"},"content":"    public InternshipApplicationListPanel getInternshipApplicationListPanel() {"},{"lineNumber":283,"author":{"gitId":"-"},"content":"        return internshipApplicationListPanel;"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":287,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":288,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":289,"author":{"gitId":"gerhean"},"content":"     * @see seedu.diary.logic.Logic#execute(String)"},{"lineNumber":290,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"},{"lineNumber":292,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":293,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);"},{"lineNumber":294,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"},{"lineNumber":295,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {"},{"lineNumber":298,"author":{"gitId":"-"},"content":"                handleHelp();"},{"lineNumber":299,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":300,"author":{"gitId":"-"},"content":""},{"lineNumber":301,"author":{"gitId":"-"},"content":"            if (commandResult.isShowStatistics()) {"},{"lineNumber":302,"author":{"gitId":"-"},"content":"                handleStatistics();"},{"lineNumber":303,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":304,"author":{"gitId":"-"},"content":""},{"lineNumber":305,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {"},{"lineNumber":306,"author":{"gitId":"-"},"content":"                handleExit();"},{"lineNumber":307,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":308,"author":{"gitId":"-"},"content":""},{"lineNumber":309,"author":{"gitId":"-"},"content":"            return commandResult;"},{"lineNumber":310,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":311,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);"},{"lineNumber":312,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());"},{"lineNumber":313,"author":{"gitId":"-"},"content":"            throw e;"},{"lineNumber":314,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":316,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":73,"-":243}},{"path":"src/main/java/seedu/diary/ui/PredicateDisplayFooter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.ui;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import java.beans.PropertyChangeEvent;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import java.beans.PropertyChangeListener;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":" * A graphical interface for the statistics that is displayed at the footer of the application."},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":" */"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"public class PredicateDisplayFooter extends UiPart\u003cRegion\u003e implements PropertyChangeListener {"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"    private static final String FXML \u003d \"PredicateDisplayFooter.fxml\";"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"    private Label predicateLabel;"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"    public PredicateDisplayFooter() {"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"        super(FXML);"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"        updatePredicateDisplay(null);"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"     * Receives the latest changes in Comparator from internship diary."},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"     * Updates the relevant display accordingly."},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"    @SuppressWarnings(\"unchecked\")"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"    public void propertyChange(PropertyChangeEvent e) {"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"        updatePredicateDisplay((Predicate\u003cInternshipApplication\u003e) e.getNewValue());"},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"     * Computes and updates the predicateLabel."},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"     * @param predicate predicate that generates relevant display."},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"    private void updatePredicateDisplay(Predicate\u003cInternshipApplication\u003e predicate) {"},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"        if (predicate \u003d\u003d null) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            predicateLabel.setText(\"Not Filtered\");"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"        } else {"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"            predicateLabel.setText(\"Finding: \" + predicate.toString());"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":50,"-":1}},{"path":"src/main/java/seedu/diary/ui/ResultDisplay.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the header of the application."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private TextArea resultDisplay;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public ResultDisplay() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":1,"-":27}},{"path":"src/main/java/seedu/diary/ui/StatisticsBarFooter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.beans.PropertyChangeEvent;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.beans.PropertyChangeListener;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ListChangeListener;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.statistics.Statistics;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.status.Status;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A graphical interface for the statistics that is displayed at the footer of the application."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class StatisticsBarFooter extends UiPart\u003cRegion\u003e implements PropertyChangeListener {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"StatisticsBarFooter.fxml\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Label wishlist;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Label applied;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label interview;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Label offered;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label rejected;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label ghosted;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label total;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Statistics statistics;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private ObservableList\u003cInternshipApplication\u003e internshipApplicationList;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * To attach event listener to update statistics if there is any changes in the list."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private ListChangeListener\u003cInternshipApplication\u003e c \u003d c -\u003e {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        while (c.next()) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            if (c.wasAdded() || c.wasRemoved() || c.wasUpdated() || c.wasReplaced()) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                updateStatistics();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public StatisticsBarFooter(Statistics statistics, ObservableList\u003cInternshipApplication\u003e internshipApplicationList) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        this.statistics \u003d statistics;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.internshipApplicationList \u003d internshipApplicationList;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        updateStatistics();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        updateStatisticsOnChange();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Receives the latest changes in displayed internships from internship diary."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Reattaches listener to the latest internship application list and updates the relevant statistics accordingly."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @SuppressWarnings(\"unchecked\")"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void propertyChange(PropertyChangeEvent e) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        ObservableList\u003cInternshipApplication\u003e ia \u003d (ObservableList\u003cInternshipApplication\u003e) e.getNewValue();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.internshipApplicationList.removeListener(c);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        internshipApplicationList \u003d ia;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        updateStatistics();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        updateStatisticsOnChange();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Adds an event listener to update the statistics upon any changes in the given list of internship application."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void updateStatisticsOnChange() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        internshipApplicationList.addListener(c);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Computes and updates the statistics for statistics bar footer."},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void updateStatistics() {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        statistics.computeAndUpdateStatistics(internshipApplicationList);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        int wishlistCount \u003d statistics.getCount(Status.WISHLIST);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        int appliedCount \u003d statistics.getCount(Status.APPLIED);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        int interviewCount \u003d statistics.getCount(Status.INTERVIEW);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        int offeredCount \u003d statistics.getCount(Status.OFFERED);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        int rejectedCount \u003d statistics.getCount(Status.REJECTED);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        int ghostedCount \u003d statistics.getCount(Status.GHOSTED);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        int totalCount \u003d statistics.getTotalCount();"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        bindStatistics(wishlistCount, appliedCount, interviewCount, offeredCount, rejectedCount, ghostedCount,"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            totalCount);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Binds the statistics to the user interface."},{"lineNumber":99,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * @param wishlistCount number of internship application(s) in wishlist"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * @param appliedCount number of internship application(s) that has/ have been applied for"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @param interviewCount number of internship application(s) that has/ have been scheduled for interview"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @param offeredCount number of internship application(s) that has/ have been offered"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @param rejectedCount number of internship application(s) that has/ have been rejected"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param ghostedCount number of internship application(s) that has/ have been ghosted"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @param totalCount total number of internship applications in InternshipDiary"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void bindStatistics(int wishlistCount, int appliedCount, int interviewCount,"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        int offeredCount, int rejectedCount, int ghostedCount, int totalCount) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        wishlist.setText(String.format(\"%s: %d\", Status.WISHLIST, wishlistCount));"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        applied.setText(String.format(\"%s: %d\", Status.APPLIED, appliedCount));"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        interview.setText(String.format(\"%s: %d\", Status.INTERVIEW, interviewCount));"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        offered.setText(String.format(\"%s: %d\", Status.OFFERED, offeredCount));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        rejected.setText(String.format(\"%s: %d\", Status.REJECTED, rejectedCount));"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        ghosted.setText(String.format(\"%s: %d\", Status.GHOSTED, ghostedCount));"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        total.setText(String.format(\"%s: %d\", Statistics.TOTAL, totalCount));"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":5,"-":114}},{"path":"src/main/java/seedu/diary/ui/StatisticsWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.beans.PropertyChangeEvent;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.beans.PropertyChangeListener;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.beans.binding.Bindings;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.ListChangeListener;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.chart.BarChart;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.scene.chart.CategoryAxis;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.scene.chart.NumberAxis;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import javafx.scene.chart.PieChart;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.scene.chart.XYChart;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.LogsCenter;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.statistics.Statistics;"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.status.Status;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Controller for the statistics page."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class StatisticsWindow extends UiPart\u003cStage\u003e implements PropertyChangeListener {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StatisticsWindow.class);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"StatisticsWindow.fxml\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private BarChart\u003cString, Integer\u003e internshipApplicationChart;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private CategoryAxis status;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private NumberAxis count;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private PieChart internshipApplicationPie;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Statistics statistics;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private ObservableList\u003cInternshipApplication\u003e internshipApplicationList;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * To attach event listener to update statistics if there is any changes in the list."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private ListChangeListener\u003cInternshipApplication\u003e c \u003d c -\u003e {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        while (c.next()) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            if (c.wasAdded() || c.wasRemoved() || c.wasUpdated() || c.wasReplaced()) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                updateStatistics();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Creates a new StatisticsWindow."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @param statistics statistics object that generates relevant statistics."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @param internshipApplicationList list of existing internship applications."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public StatisticsWindow(Statistics statistics, ObservableList\u003cInternshipApplication\u003e internshipApplicationList) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        this(new Stage(), statistics, internshipApplicationList);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Creates a new StatisticsWindow."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the StatisticsWindow."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * @param statistics statistics object that generates relevant statistics."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @param internshipApplicationList list of existing internship applications."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public StatisticsWindow(Stage root, Statistics statistics,"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        ObservableList\u003cInternshipApplication\u003e internshipApplicationList) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        super(FXML, root);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        internshipApplicationChart.setLegendVisible(false);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        this.statistics \u003d statistics;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        this.internshipApplicationList \u003d internshipApplicationList;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        updateStatistics();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        updateStatisticsOnChange();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Receives the latest changes in displayed internships from internship diary."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Reattaches listener to the latest internship application list and updates the relevant statistics accordingly."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @SuppressWarnings(\"unchecked\")"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void propertyChange(PropertyChangeEvent e) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        ObservableList\u003cInternshipApplication\u003e ia \u003d (ObservableList\u003cInternshipApplication\u003e) e.getNewValue();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        this.internshipApplicationList.removeListener(c);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        internshipApplicationList \u003d ia;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        updateStatistics();"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        updateStatisticsOnChange();"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Adds an event listener to update the statistics upon any changes in the given list of internship application."},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void updateStatisticsOnChange() {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        internshipApplicationList.addListener(c);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Computes and retrieves the latest statistics"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void updateStatistics() {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        statistics.computeAndUpdateStatistics(internshipApplicationList);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        loadBarChart();"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        loadPieChart();"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Clears the existing data and loads the bar chart with new data."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @SuppressWarnings(\"unchecked\")"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private void loadBarChart() {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        internshipApplicationChart.getData().clear();"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        ObservableList\u003cXYChart.Data\u003cString, Integer\u003e\u003e barChartData \u003d generateBarChartData();"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        internshipApplicationChart.getData().addAll(new XYChart.Series\u003cString, Integer\u003e(barChartData));"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Clears the existing data and loads the pie chart with new data."},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    private void loadPieChart() {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        internshipApplicationPie.getData().clear();"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d generatePieChartData();"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        internshipApplicationPie.getData().addAll(pieChartData);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        bindPieChartLegend(pieChartData);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Loads the legend of the pie chart with the percentage information if the percentage is valid."},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    private void bindPieChartLegend(ObservableList\u003cPieChart.Data\u003e pieChartData) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        for (PieChart.Data data : pieChartData) {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            if (!Double.isNaN(data.getPieValue())) {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                String percentageLegend \u003d String.format(\"%s (%.2f%%)\", data.getName(), data.getPieValue());"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                data.nameProperty().bind("},{"lineNumber":140,"author":{"gitId":"-"},"content":"                    Bindings.concat(percentageLegend)"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                );"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * Generates the relevant bar chart data using the generated count statistics."},{"lineNumber":148,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    private ObservableList\u003cXYChart.Data\u003cString, Integer\u003e\u003e generateBarChartData() {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        ObservableList\u003cXYChart.Data\u003cString, Integer\u003e\u003e xyChartData \u003d FXCollections.observableArrayList();"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        for (Status status : statistics.getStatuses()) {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            XYChart.Data\u003cString, Integer\u003e data \u003d new XYChart.Data\u003c\u003e(status.toString(), statistics.getCount(status));"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            xyChartData.add(data);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        return xyChartData;"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * Generates the relevant pie chart data using the generated percentage statistics."},{"lineNumber":160,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    private ObservableList\u003cPieChart.Data\u003e generatePieChartData() {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d FXCollections.observableArrayList();"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        for (Status status : statistics.getStatuses()) {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            PieChart.Data data \u003d new PieChart.Data(status.toString(), statistics.getPercentage(status));"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            pieChartData.add(data);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        return pieChartData;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * Shows the statistics window."},{"lineNumber":172,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":173,"author":{"gitId":"gerhean"},"content":"     * @throws IllegalStateException \u003cul\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     * \u003cli\u003e"},{"lineNumber":175,"author":{"gitId":"-"},"content":"     * if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":176,"author":{"gitId":"-"},"content":"     * \u003c/li\u003e"},{"lineNumber":177,"author":{"gitId":"-"},"content":"     * \u003cli\u003e"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     * if this method is called during animation or layout processing."},{"lineNumber":179,"author":{"gitId":"-"},"content":"     * \u003c/li\u003e"},{"lineNumber":180,"author":{"gitId":"-"},"content":"     * \u003cli\u003e"},{"lineNumber":181,"author":{"gitId":"-"},"content":"     * if this method is called on the primary stage."},{"lineNumber":182,"author":{"gitId":"-"},"content":"     * \u003c/li\u003e"},{"lineNumber":183,"author":{"gitId":"-"},"content":"     * \u003cli\u003e"},{"lineNumber":184,"author":{"gitId":"-"},"content":"     * if {@code dialogStage} is already showing."},{"lineNumber":185,"author":{"gitId":"-"},"content":"     * \u003c/li\u003e"},{"lineNumber":186,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e"},{"lineNumber":187,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    public void show() {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        logger.fine(\"Generating statistics about your internship applications.\");"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        getRoot().show();"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":195,"author":{"gitId":"-"},"content":"     * Returns true if the statistics window is currently being shown."},{"lineNumber":196,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    public boolean isShowing() {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":202,"author":{"gitId":"-"},"content":"     * Hides the statistics window."},{"lineNumber":203,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    public void hide() {"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        getRoot().hide();"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":209,"author":{"gitId":"-"},"content":"     * Focuses on the statistics window."},{"lineNumber":210,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    public void focus() {"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":7,"-":208}},{"path":"src/main/java/seedu/diary/ui/StatusBarFooter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Label saveLocationStatus;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public StatusBarFooter(Path saveLocation) {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"        saveLocationStatus.setText(\"Save file data at: \" + Paths.get(\".\").resolve(saveLocation).toString());"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":2,"-":23}},{"path":"src/main/java/seedu/diary/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * API of UI component"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public interface Ui {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"     * Starts the UI (and the App)."},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    void start(Stage primaryStage);"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":4,"-":11}},{"path":"src/main/java/seedu/diary/ui/UiManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.MainApp;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.util.StringUtil;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.Logic;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * The manager of the UI component."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/internship_diary.png\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        //Set the application icon."},{"lineNumber":39,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow.initListeners();"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":"    private void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String contentText) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.showAndWait();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Platform.exit();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        System.exit(1);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":7,"-":81}},{"path":"src/main/java/seedu/diary/ui/UiPart.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.net.URL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.MainApp;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."},{"lineNumber":14,"author":{"gitId":"-"},"content":" * It contains a scene graph with a root node of type {@code T}."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public abstract class UiPart\u003cT\u003e {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"     * Resource folder where FXML files are stored."},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, null);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL)"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL and root object."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl, T root) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, root);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL, T)"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName, T root) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName), root);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Returns the root object of the scene graph of this UiPart."},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public T getRoot() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return fxmlLoader.getRoot();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Loads the object hierarchy from a FXML document."},{"lineNumber":68,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * @param location Location of the FXML document."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @param root Specifies the root of the object hierarchy."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private void loadFxmlFile(URL location, T root) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(location);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        fxmlLoader.setLocation(location);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        fxmlLoader.setController(this);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        fxmlLoader.setRoot(root);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            fxmlLoader.load();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            throw new AssertionError(e);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static URL getFxmlFileUrl(String fxmlFileName) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(fxmlFileName);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return requireNonNull(fxmlFileUrl);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":9,"-":85}},{"path":"src/main/java/seedu/diary/ui/ViewDisplayFooter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.beans.PropertyChangeEvent;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.beans.PropertyChangeListener;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.archival.InternshipApplicationViewType;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A graphical interface for the current view type that is displayed at the footer of the application."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class ViewDisplayFooter extends UiPart\u003cRegion\u003e implements PropertyChangeListener {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"ViewDisplayFooter.fxml\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String UNARCHIVED_LIST \u003d \"MAIN\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String ARCHIVED_LIST \u003d \"ARCHIVAL\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Label viewLabel;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public ViewDisplayFooter() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        updateViewDisplay(InternshipApplicationViewType.UNARCHIVED);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Receives the latest changes in displayed internships from internship diary."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Updates the relevant display accordingly."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @SuppressWarnings(\"unchecked\")"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void propertyChange(PropertyChangeEvent e) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        updateViewDisplay((InternshipApplicationViewType) e.getNewValue());"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Computes and updates the viewLabel."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param viewType enumeration that indicates the current display."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private void updateViewDisplay(InternshipApplicationViewType viewType) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (viewType.equals(InternshipApplicationViewType.UNARCHIVED)) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            viewLabel.setText(UNARCHIVED_LIST);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            viewLabel.setText(ARCHIVED_LIST);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":2,"-":50}},{"path":"src/main/resources/html/stylesheets/asciidoctor.css","fileType":"css","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"/* Asciidoctor default stylesheet | MIT License | http://asciidoctor.org */"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":"/* Remove comment around @import statement below when using as a custom stylesheet */"},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"/*@import \"https://fonts.googleapis.com/css?family\u003dOpen+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\";*/"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"audio,canvas,video{display:inline-block}"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"audio:not([controls]){display:none;height:0}"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"[hidden],template{display:none}"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"script{display:none!important}"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"body{margin:0}"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"a{background:transparent}"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"a:focus{outline:thin dotted}"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"a:active,a:hover{outline:0}"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"h1{font-size:2em;margin:.67em 0}"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"abbr[title]{border-bottom:1px dotted}"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"b,strong{font-weight:bold}"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"dfn{font-style:italic}"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"mark{background:#ff0;color:#000}"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"code,kbd,pre,samp{font-family:monospace;font-size:1em}"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"pre{white-space:pre-wrap}"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"q{quotes:\"\\201C\" \"\\201D\" \"\\2018\" \"\\2019\"}"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"small{font-size:80%}"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"sup{top:-.5em}"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"sub{bottom:-.25em}"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"img{border:0}"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"svg:not(:root){overflow:hidden}"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"figure{margin:0}"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"legend{border:0;padding:0}"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"button,input{line-height:normal}"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"button,select{text-transform:none}"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"button,html input[type\u003d\"button\"],input[type\u003d\"reset\"],input[type\u003d\"submit\"]{-webkit-appearance:button;cursor:pointer}"},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"button[disabled],html input[disabled]{cursor:default}"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"input[type\u003d\"checkbox\"],input[type\u003d\"radio\"]{box-sizing:border-box;padding:0}"},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"input[type\u003d\"search\"]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"input[type\u003d\"search\"]::-webkit-search-cancel-button,input[type\u003d\"search\"]::-webkit-search-decoration{-webkit-appearance:none}"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"textarea{overflow:auto;vertical-align:top}"},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"table{border-collapse:collapse;border-spacing:0}"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"*,*:before,*:after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}"},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"html,body{font-size:100%}"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-weight:400;font-style:normal;line-height:1;position:relative;cursor:auto}"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"a:hover{cursor:pointer}"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"img,object,embed{max-width:100%;height:auto}"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"object,embed{height:100%}"},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"img{-ms-interpolation-mode:bicubic}"},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":".left{float:left!important}"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":".right{float:right!important}"},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":".text-left{text-align:left!important}"},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":".text-right{text-align:right!important}"},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":".text-center{text-align:center!important}"},{"lineNumber":55,"author":{"gitId":"gerhean"},"content":".text-justify{text-align:justify!important}"},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":".hide{display:none}"},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":"body{-webkit-font-smoothing:antialiased}"},{"lineNumber":58,"author":{"gitId":"gerhean"},"content":"img,object,svg{display:inline-block;vertical-align:middle}"},{"lineNumber":59,"author":{"gitId":"gerhean"},"content":"textarea{height:auto;min-height:50px}"},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":"select{width:100%}"},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":".center{margin-left:auto;margin-right:auto}"},{"lineNumber":62,"author":{"gitId":"gerhean"},"content":".spread{width:100%}"},{"lineNumber":63,"author":{"gitId":"gerhean"},"content":"p.lead,.paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:1.21875em;line-height:1.6}"},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":".subheader,.admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}"},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":"div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0;direction:ltr}"},{"lineNumber":66,"author":{"gitId":"gerhean"},"content":"a{color:#2156a5;text-decoration:underline;line-height:inherit}"},{"lineNumber":67,"author":{"gitId":"gerhean"},"content":"a:hover,a:focus{color:#1d4b8f}"},{"lineNumber":68,"author":{"gitId":"gerhean"},"content":"a img{border:none}"},{"lineNumber":69,"author":{"gitId":"gerhean"},"content":"p{font-family:inherit;font-weight:400;font-size:1em;line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}"},{"lineNumber":70,"author":{"gitId":"gerhean"},"content":"p aside{font-size:.875em;line-height:1.35;font-style:italic}"},{"lineNumber":71,"author":{"gitId":"gerhean"},"content":"h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}"},{"lineNumber":72,"author":{"gitId":"gerhean"},"content":"h1 small,h2 small,h3 small,#toctitle small,.sidebarblock\u003e.content\u003e.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}"},{"lineNumber":73,"author":{"gitId":"gerhean"},"content":"h1{font-size:2.125em}"},{"lineNumber":74,"author":{"gitId":"gerhean"},"content":"h2{font-size:1.6875em}"},{"lineNumber":75,"author":{"gitId":"gerhean"},"content":"h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.375em}"},{"lineNumber":76,"author":{"gitId":"gerhean"},"content":"h4,h5{font-size:1.125em}"},{"lineNumber":77,"author":{"gitId":"gerhean"},"content":"h6{font-size:1em}"},{"lineNumber":78,"author":{"gitId":"gerhean"},"content":"hr{border:solid #ddddd8;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em;height:0}"},{"lineNumber":79,"author":{"gitId":"gerhean"},"content":"em,i{font-style:italic;line-height:inherit}"},{"lineNumber":80,"author":{"gitId":"gerhean"},"content":"strong,b{font-weight:bold;line-height:inherit}"},{"lineNumber":81,"author":{"gitId":"gerhean"},"content":"small{font-size:60%;line-height:inherit}"},{"lineNumber":82,"author":{"gitId":"gerhean"},"content":"code{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;color:rgba(0,0,0,.9)}"},{"lineNumber":83,"author":{"gitId":"gerhean"},"content":"ul,ol,dl{font-size:1em;line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}"},{"lineNumber":84,"author":{"gitId":"gerhean"},"content":"ul,ol,ul.no-bullet,ol.no-bullet{margin-left:1.5em}"},{"lineNumber":85,"author":{"gitId":"gerhean"},"content":"ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0;font-size:1em}"},{"lineNumber":86,"author":{"gitId":"gerhean"},"content":"ul.square li ul,ul.circle li ul,ul.disc li ul{list-style:inherit}"},{"lineNumber":87,"author":{"gitId":"gerhean"},"content":"ul.square{list-style-type:square}"},{"lineNumber":88,"author":{"gitId":"gerhean"},"content":"ul.circle{list-style-type:circle}"},{"lineNumber":89,"author":{"gitId":"gerhean"},"content":"ul.disc{list-style-type:disc}"},{"lineNumber":90,"author":{"gitId":"gerhean"},"content":"ul.no-bullet{list-style:none}"},{"lineNumber":91,"author":{"gitId":"gerhean"},"content":"ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}"},{"lineNumber":92,"author":{"gitId":"gerhean"},"content":"dl dt{margin-bottom:.3125em;font-weight:bold}"},{"lineNumber":93,"author":{"gitId":"gerhean"},"content":"dl dd{margin-bottom:1.25em}"},{"lineNumber":94,"author":{"gitId":"gerhean"},"content":"abbr,acronym{text-transform:uppercase;font-size:90%;color:rgba(0,0,0,.8);border-bottom:1px dotted #ddd;cursor:help}"},{"lineNumber":95,"author":{"gitId":"gerhean"},"content":"abbr{text-transform:none}"},{"lineNumber":96,"author":{"gitId":"gerhean"},"content":"blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}"},{"lineNumber":97,"author":{"gitId":"gerhean"},"content":"blockquote cite{display:block;font-size:.9375em;color:rgba(0,0,0,.6)}"},{"lineNumber":98,"author":{"gitId":"gerhean"},"content":"blockquote cite:before{content:\"\\2014 \\0020\"}"},{"lineNumber":99,"author":{"gitId":"gerhean"},"content":"blockquote cite a,blockquote cite a:visited{color:rgba(0,0,0,.6)}"},{"lineNumber":100,"author":{"gitId":"gerhean"},"content":"blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}"},{"lineNumber":101,"author":{"gitId":"gerhean"},"content":"@media only screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2}"},{"lineNumber":102,"author":{"gitId":"gerhean"},"content":"h1{font-size:2.75em}"},{"lineNumber":103,"author":{"gitId":"gerhean"},"content":"h2{font-size:2.3125em}"},{"lineNumber":104,"author":{"gitId":"gerhean"},"content":"h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.6875em}"},{"lineNumber":105,"author":{"gitId":"gerhean"},"content":"h4{font-size:1.4375em}}"},{"lineNumber":106,"author":{"gitId":"gerhean"},"content":"table{background:#fff;margin-bottom:1.25em;border:solid 1px #dedede}"},{"lineNumber":107,"author":{"gitId":"gerhean"},"content":"table thead,table tfoot{background:#f7f8f7;font-weight:bold}"},{"lineNumber":108,"author":{"gitId":"gerhean"},"content":"table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}"},{"lineNumber":109,"author":{"gitId":"gerhean"},"content":"table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}"},{"lineNumber":110,"author":{"gitId":"gerhean"},"content":"table tr.even,table tr.alt,table tr:nth-of-type(even){background:#f8f8f7}"},{"lineNumber":111,"author":{"gitId":"gerhean"},"content":"table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{display:table-cell;line-height:1.6}"},{"lineNumber":112,"author":{"gitId":"gerhean"},"content":"body{tab-size:4}"},{"lineNumber":113,"author":{"gitId":"gerhean"},"content":"h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}"},{"lineNumber":114,"author":{"gitId":"gerhean"},"content":"h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock\u003e.content\u003e.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}"},{"lineNumber":115,"author":{"gitId":"gerhean"},"content":".clearfix:before,.clearfix:after,.float-group:before,.float-group:after{content:\" \";display:table}"},{"lineNumber":116,"author":{"gitId":"gerhean"},"content":".clearfix:after,.float-group:after{clear:both}"},{"lineNumber":117,"author":{"gitId":"gerhean"},"content":"*:not(pre)\u003ecode{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background-color:#f7f7f8;-webkit-border-radius:4px;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed}"},{"lineNumber":118,"author":{"gitId":"gerhean"},"content":"pre,pre\u003ecode{line-height:1.45;color:rgba(0,0,0,.9);font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;text-rendering:optimizeSpeed}"},{"lineNumber":119,"author":{"gitId":"gerhean"},"content":".keyseq{color:rgba(51,51,51,.8)}"},{"lineNumber":120,"author":{"gitId":"gerhean"},"content":"kbd{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background-color:#f7f7f7;border:1px solid #ccc;-webkit-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em white inset;box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em #fff inset;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}"},{"lineNumber":121,"author":{"gitId":"gerhean"},"content":".keyseq kbd:first-child{margin-left:0}"},{"lineNumber":122,"author":{"gitId":"gerhean"},"content":".keyseq kbd:last-child{margin-right:0}"},{"lineNumber":123,"author":{"gitId":"gerhean"},"content":".menuseq,.menu{color:rgba(0,0,0,.8)}"},{"lineNumber":124,"author":{"gitId":"gerhean"},"content":"b.button:before,b.button:after{position:relative;top:-1px;font-weight:400}"},{"lineNumber":125,"author":{"gitId":"gerhean"},"content":"b.button:before{content:\"[\";padding:0 3px 0 2px}"},{"lineNumber":126,"author":{"gitId":"gerhean"},"content":"b.button:after{content:\"]\";padding:0 2px 0 3px}"},{"lineNumber":127,"author":{"gitId":"gerhean"},"content":"p a\u003ecode:hover{color:rgba(0,0,0,.9)}"},{"lineNumber":128,"author":{"gitId":"gerhean"},"content":"#header,#content,#footnotes,#footer{width:100%;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}"},{"lineNumber":129,"author":{"gitId":"gerhean"},"content":"#header:before,#header:after,#content:before,#content:after,#footnotes:before,#footnotes:after,#footer:before,#footer:after{content:\" \";display:table}"},{"lineNumber":130,"author":{"gitId":"gerhean"},"content":"#header:after,#content:after,#footnotes:after,#footer:after{clear:both}"},{"lineNumber":131,"author":{"gitId":"gerhean"},"content":"#content{margin-top:1.25em}"},{"lineNumber":132,"author":{"gitId":"gerhean"},"content":"#content:before{content:none}"},{"lineNumber":133,"author":{"gitId":"gerhean"},"content":"#header\u003eh1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}"},{"lineNumber":134,"author":{"gitId":"gerhean"},"content":"#header\u003eh1:first-child+#toc{margin-top:8px;border-top:1px solid #ddddd8}"},{"lineNumber":135,"author":{"gitId":"gerhean"},"content":"#header\u003eh1:only-child,body.toc2 #header\u003eh1:nth-last-child(2){border-bottom:1px solid #ddddd8;padding-bottom:8px}"},{"lineNumber":136,"author":{"gitId":"gerhean"},"content":"#header .details{border-bottom:1px solid #ddddd8;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:-ms-flexbox;display:-webkit-flex;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap}"},{"lineNumber":137,"author":{"gitId":"gerhean"},"content":"#header .details span:first-child{margin-left:-.125em}"},{"lineNumber":138,"author":{"gitId":"gerhean"},"content":"#header .details span.email a{color:rgba(0,0,0,.85)}"},{"lineNumber":139,"author":{"gitId":"gerhean"},"content":"#header .details br{display:none}"},{"lineNumber":140,"author":{"gitId":"gerhean"},"content":"#header .details br+span:before{content:\"\\00a0\\2013\\00a0\"}"},{"lineNumber":141,"author":{"gitId":"gerhean"},"content":"#header .details br+span.author:before{content:\"\\00a0\\22c5\\00a0\";color:rgba(0,0,0,.85)}"},{"lineNumber":142,"author":{"gitId":"gerhean"},"content":"#header .details br+span#revremark:before{content:\"\\00a0|\\00a0\"}"},{"lineNumber":143,"author":{"gitId":"gerhean"},"content":"#header #revnumber{text-transform:capitalize}"},{"lineNumber":144,"author":{"gitId":"gerhean"},"content":"#header #revnumber:after{content:\"\\00a0\"}"},{"lineNumber":145,"author":{"gitId":"gerhean"},"content":"#content\u003eh1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #ddddd8;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}"},{"lineNumber":146,"author":{"gitId":"gerhean"},"content":"#toc{border-bottom:1px solid #efefed;padding-bottom:.5em}"},{"lineNumber":147,"author":{"gitId":"gerhean"},"content":"#toc\u003eul{margin-left:.125em}"},{"lineNumber":148,"author":{"gitId":"gerhean"},"content":"#toc ul.sectlevel0\u003eli\u003ea{font-style:italic}"},{"lineNumber":149,"author":{"gitId":"gerhean"},"content":"#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}"},{"lineNumber":150,"author":{"gitId":"gerhean"},"content":"#toc ul{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;list-style-type:none}"},{"lineNumber":151,"author":{"gitId":"gerhean"},"content":"#toc li{line-height:1.3334;margin-top:.3334em}"},{"lineNumber":152,"author":{"gitId":"gerhean"},"content":"#toc a{text-decoration:none}"},{"lineNumber":153,"author":{"gitId":"gerhean"},"content":"#toc a:active{text-decoration:underline}"},{"lineNumber":154,"author":{"gitId":"gerhean"},"content":"#toctitle{color:#7a2518;font-size:1.2em}"},{"lineNumber":155,"author":{"gitId":"gerhean"},"content":"@media only screen and (min-width:768px){#toctitle{font-size:1.375em}"},{"lineNumber":156,"author":{"gitId":"gerhean"},"content":"body.toc2{padding-left:15em;padding-right:0}"},{"lineNumber":157,"author":{"gitId":"gerhean"},"content":"#toc.toc2{margin-top:0!important;background-color:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #efefed;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}"},{"lineNumber":158,"author":{"gitId":"gerhean"},"content":"#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}"},{"lineNumber":159,"author":{"gitId":"gerhean"},"content":"#toc.toc2\u003eul{font-size:.9em;margin-bottom:0}"},{"lineNumber":160,"author":{"gitId":"gerhean"},"content":"#toc.toc2 ul ul{margin-left:0;padding-left:1em}"},{"lineNumber":161,"author":{"gitId":"gerhean"},"content":"#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}"},{"lineNumber":162,"author":{"gitId":"gerhean"},"content":"body.toc2.toc-right{padding-left:0;padding-right:15em}"},{"lineNumber":163,"author":{"gitId":"gerhean"},"content":"body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #efefed;left:auto;right:0}}"},{"lineNumber":164,"author":{"gitId":"gerhean"},"content":"@media only screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}"},{"lineNumber":165,"author":{"gitId":"gerhean"},"content":"#toc.toc2{width:20em}"},{"lineNumber":166,"author":{"gitId":"gerhean"},"content":"#toc.toc2 #toctitle{font-size:1.375em}"},{"lineNumber":167,"author":{"gitId":"gerhean"},"content":"#toc.toc2\u003eul{font-size:.95em}"},{"lineNumber":168,"author":{"gitId":"gerhean"},"content":"#toc.toc2 ul ul{padding-left:1.25em}"},{"lineNumber":169,"author":{"gitId":"gerhean"},"content":"body.toc2.toc-right{padding-left:0;padding-right:20em}}"},{"lineNumber":170,"author":{"gitId":"gerhean"},"content":"#content #toc{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"},{"lineNumber":171,"author":{"gitId":"gerhean"},"content":"#content #toc\u003e:first-child{margin-top:0}"},{"lineNumber":172,"author":{"gitId":"gerhean"},"content":"#content #toc\u003e:last-child{margin-bottom:0}"},{"lineNumber":173,"author":{"gitId":"gerhean"},"content":"#footer{max-width:100%;background-color:rgba(0,0,0,.8);padding:1.25em}"},{"lineNumber":174,"author":{"gitId":"gerhean"},"content":"#footer-text{color:rgba(255,255,255,.8);line-height:1.44}"},{"lineNumber":175,"author":{"gitId":"gerhean"},"content":".sect1{padding-bottom:.625em}"},{"lineNumber":176,"author":{"gitId":"gerhean"},"content":"@media only screen and (min-width:768px){.sect1{padding-bottom:1.25em}}"},{"lineNumber":177,"author":{"gitId":"gerhean"},"content":".sect1+.sect1{border-top:1px solid #efefed}"},{"lineNumber":178,"author":{"gitId":"gerhean"},"content":"#content h1\u003ea.anchor,h2\u003ea.anchor,h3\u003ea.anchor,#toctitle\u003ea.anchor,.sidebarblock\u003e.content\u003e.title\u003ea.anchor,h4\u003ea.anchor,h5\u003ea.anchor,h6\u003ea.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}"},{"lineNumber":179,"author":{"gitId":"gerhean"},"content":"#content h1\u003ea.anchor:before,h2\u003ea.anchor:before,h3\u003ea.anchor:before,#toctitle\u003ea.anchor:before,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:before,h4\u003ea.anchor:before,h5\u003ea.anchor:before,h6\u003ea.anchor:before{content:\"\\00A7\";font-size:.85em;display:block;padding-top:.1em}"},{"lineNumber":180,"author":{"gitId":"gerhean"},"content":"#content h1:hover\u003ea.anchor,#content h1\u003ea.anchor:hover,h2:hover\u003ea.anchor,h2\u003ea.anchor:hover,h3:hover\u003ea.anchor,#toctitle:hover\u003ea.anchor,.sidebarblock\u003e.content\u003e.title:hover\u003ea.anchor,h3\u003ea.anchor:hover,#toctitle\u003ea.anchor:hover,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:hover,h4:hover\u003ea.anchor,h4\u003ea.anchor:hover,h5:hover\u003ea.anchor,h5\u003ea.anchor:hover,h6:hover\u003ea.anchor,h6\u003ea.anchor:hover{visibility:visible}"},{"lineNumber":181,"author":{"gitId":"gerhean"},"content":"#content h1\u003ea.link,h2\u003ea.link,h3\u003ea.link,#toctitle\u003ea.link,.sidebarblock\u003e.content\u003e.title\u003ea.link,h4\u003ea.link,h5\u003ea.link,h6\u003ea.link{color:#ba3925;text-decoration:none}"},{"lineNumber":182,"author":{"gitId":"gerhean"},"content":"#content h1\u003ea.link:hover,h2\u003ea.link:hover,h3\u003ea.link:hover,#toctitle\u003ea.link:hover,.sidebarblock\u003e.content\u003e.title\u003ea.link:hover,h4\u003ea.link:hover,h5\u003ea.link:hover,h6\u003ea.link:hover{color:#a53221}"},{"lineNumber":183,"author":{"gitId":"gerhean"},"content":".audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}"},{"lineNumber":184,"author":{"gitId":"gerhean"},"content":".admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{text-rendering:optimizeLegibility;text-align:left;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-size:1rem;font-style:italic}"},{"lineNumber":185,"author":{"gitId":"gerhean"},"content":"table.tableblock\u003ecaption.title{white-space:nowrap;overflow:visible;max-width:0}"},{"lineNumber":186,"author":{"gitId":"gerhean"},"content":".paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{color:rgba(0,0,0,.85)}"},{"lineNumber":187,"author":{"gitId":"gerhean"},"content":"table.tableblock #preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:inherit}"},{"lineNumber":188,"author":{"gitId":"gerhean"},"content":".admonitionblock\u003etable{border-collapse:separate;border:0;background:none;width:100%}"},{"lineNumber":189,"author":{"gitId":"gerhean"},"content":".admonitionblock\u003etable td.icon{text-align:center;width:80px}"},{"lineNumber":190,"author":{"gitId":"gerhean"},"content":".admonitionblock\u003etable td.icon img{max-width:none}"},{"lineNumber":191,"author":{"gitId":"gerhean"},"content":".admonitionblock\u003etable td.icon .title{font-weight:bold;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;text-transform:uppercase}"},{"lineNumber":192,"author":{"gitId":"gerhean"},"content":".admonitionblock\u003etable td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #ddddd8;color:rgba(0,0,0,.6)}"},{"lineNumber":193,"author":{"gitId":"gerhean"},"content":".admonitionblock\u003etable td.content\u003e:last-child\u003e:last-child{margin-bottom:0}"},{"lineNumber":194,"author":{"gitId":"gerhean"},"content":".exampleblock\u003e.content{border-style:solid;border-width:1px;border-color:#e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;-webkit-border-radius:4px;border-radius:4px}"},{"lineNumber":195,"author":{"gitId":"gerhean"},"content":".exampleblock\u003e.content\u003e:first-child{margin-top:0}"},{"lineNumber":196,"author":{"gitId":"gerhean"},"content":".exampleblock\u003e.content\u003e:last-child{margin-bottom:0}"},{"lineNumber":197,"author":{"gitId":"gerhean"},"content":".sidebarblock{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"},{"lineNumber":198,"author":{"gitId":"gerhean"},"content":".sidebarblock\u003e:first-child{margin-top:0}"},{"lineNumber":199,"author":{"gitId":"gerhean"},"content":".sidebarblock\u003e:last-child{margin-bottom:0}"},{"lineNumber":200,"author":{"gitId":"gerhean"},"content":".sidebarblock\u003e.content\u003e.title{color:#7a2518;margin-top:0;text-align:center}"},{"lineNumber":201,"author":{"gitId":"gerhean"},"content":".exampleblock\u003e.content\u003e:last-child\u003e:last-child,.exampleblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content\u003e:last-child\u003e:last-child,.sidebarblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child{margin-bottom:0}"},{"lineNumber":202,"author":{"gitId":"gerhean"},"content":".literalblock pre,.listingblock pre:not(.highlight),.listingblock pre[class\u003d\"highlight\"],.listingblock pre[class^\u003d\"highlight \"],.listingblock pre.CodeRay,.listingblock pre.prettyprint{background:#f7f7f8}"},{"lineNumber":203,"author":{"gitId":"gerhean"},"content":".sidebarblock .literalblock pre,.sidebarblock .listingblock pre:not(.highlight),.sidebarblock .listingblock pre[class\u003d\"highlight\"],.sidebarblock .listingblock pre[class^\u003d\"highlight \"],.sidebarblock .listingblock pre.CodeRay,.sidebarblock .listingblock pre.prettyprint{background:#f2f1f1}"},{"lineNumber":204,"author":{"gitId":"gerhean"},"content":".literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{-webkit-border-radius:4px;border-radius:4px;word-wrap:break-word;padding:1em;font-size:.8125em}"},{"lineNumber":205,"author":{"gitId":"gerhean"},"content":".literalblock pre.nowrap,.literalblock pre[class].nowrap,.listingblock pre.nowrap,.listingblock pre[class].nowrap{overflow-x:auto;white-space:pre;word-wrap:normal}"},{"lineNumber":206,"author":{"gitId":"gerhean"},"content":"@media only screen and (min-width:768px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:.90625em}}"},{"lineNumber":207,"author":{"gitId":"gerhean"},"content":"@media only screen and (min-width:1280px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:1em}}"},{"lineNumber":208,"author":{"gitId":"gerhean"},"content":".literalblock.output pre{color:#f7f7f8;background-color:rgba(0,0,0,.9)}"},{"lineNumber":209,"author":{"gitId":"gerhean"},"content":".listingblock pre.highlightjs{padding:0}"},{"lineNumber":210,"author":{"gitId":"gerhean"},"content":".listingblock pre.highlightjs\u003ecode{padding:1em;-webkit-border-radius:4px;border-radius:4px}"},{"lineNumber":211,"author":{"gitId":"gerhean"},"content":".listingblock pre.prettyprint{border-width:0}"},{"lineNumber":212,"author":{"gitId":"gerhean"},"content":".listingblock\u003e.content{position:relative}"},{"lineNumber":213,"author":{"gitId":"gerhean"},"content":".listingblock code[data-lang]:before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:#999}"},{"lineNumber":214,"author":{"gitId":"gerhean"},"content":".listingblock:hover code[data-lang]:before{display:block}"},{"lineNumber":215,"author":{"gitId":"gerhean"},"content":".listingblock.terminal pre .command:before{content:attr(data-prompt);padding-right:.5em;color:#999}"},{"lineNumber":216,"author":{"gitId":"gerhean"},"content":".listingblock.terminal pre .command:not([data-prompt]):before{content:\"$\"}"},{"lineNumber":217,"author":{"gitId":"gerhean"},"content":"table.pyhltable{border-collapse:separate;border:0;margin-bottom:0;background:none}"},{"lineNumber":218,"author":{"gitId":"gerhean"},"content":"table.pyhltable td{vertical-align:top;padding-top:0;padding-bottom:0;line-height:1.45}"},{"lineNumber":219,"author":{"gitId":"gerhean"},"content":"table.pyhltable td.code{padding-left:.75em;padding-right:0}"},{"lineNumber":220,"author":{"gitId":"gerhean"},"content":"pre.pygments .lineno,table.pyhltable td:not(.code){color:#999;padding-left:0;padding-right:.5em;border-right:1px solid #ddddd8}"},{"lineNumber":221,"author":{"gitId":"gerhean"},"content":"pre.pygments .lineno{display:inline-block;margin-right:.25em}"},{"lineNumber":222,"author":{"gitId":"gerhean"},"content":"table.pyhltable .linenodiv{background:none!important;padding-right:0!important}"},{"lineNumber":223,"author":{"gitId":"gerhean"},"content":".quoteblock{margin:0 1em 1.25em 1.5em;display:table}"},{"lineNumber":224,"author":{"gitId":"gerhean"},"content":".quoteblock\u003e.title{margin-left:-1.5em;margin-bottom:.75em}"},{"lineNumber":225,"author":{"gitId":"gerhean"},"content":".quoteblock blockquote,.quoteblock blockquote p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}"},{"lineNumber":226,"author":{"gitId":"gerhean"},"content":".quoteblock blockquote{margin:0;padding:0;border:0}"},{"lineNumber":227,"author":{"gitId":"gerhean"},"content":".quoteblock blockquote:before{content:\"\\201c\";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}"},{"lineNumber":228,"author":{"gitId":"gerhean"},"content":".quoteblock blockquote\u003e.paragraph:last-child p{margin-bottom:0}"},{"lineNumber":229,"author":{"gitId":"gerhean"},"content":".quoteblock .attribution{margin-top:.5em;margin-right:.5ex;text-align:right}"},{"lineNumber":230,"author":{"gitId":"gerhean"},"content":".quoteblock .quoteblock{margin-left:0;margin-right:0;padding:.5em 0;border-left:3px solid rgba(0,0,0,.6)}"},{"lineNumber":231,"author":{"gitId":"gerhean"},"content":".quoteblock .quoteblock blockquote{padding:0 0 0 .75em}"},{"lineNumber":232,"author":{"gitId":"gerhean"},"content":".quoteblock .quoteblock blockquote:before{display:none}"},{"lineNumber":233,"author":{"gitId":"gerhean"},"content":".verseblock{margin:0 1em 1.25em 1em}"},{"lineNumber":234,"author":{"gitId":"gerhean"},"content":".verseblock pre{font-family:\"Open Sans\",\"DejaVu Sans\",sans;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}"},{"lineNumber":235,"author":{"gitId":"gerhean"},"content":".verseblock pre strong{font-weight:400}"},{"lineNumber":236,"author":{"gitId":"gerhean"},"content":".verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}"},{"lineNumber":237,"author":{"gitId":"gerhean"},"content":".quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}"},{"lineNumber":238,"author":{"gitId":"gerhean"},"content":".quoteblock .attribution br,.verseblock .attribution br{display:none}"},{"lineNumber":239,"author":{"gitId":"gerhean"},"content":".quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}"},{"lineNumber":240,"author":{"gitId":"gerhean"},"content":".quoteblock.abstract{margin:0 0 1.25em 0;display:block}"},{"lineNumber":241,"author":{"gitId":"gerhean"},"content":".quoteblock.abstract blockquote,.quoteblock.abstract blockquote p{text-align:left;word-spacing:0}"},{"lineNumber":242,"author":{"gitId":"gerhean"},"content":".quoteblock.abstract blockquote:before,.quoteblock.abstract blockquote p:first-of-type:before{display:none}"},{"lineNumber":243,"author":{"gitId":"gerhean"},"content":"table.tableblock{max-width:100%;border-collapse:separate}"},{"lineNumber":244,"author":{"gitId":"gerhean"},"content":"table.tableblock td\u003e.paragraph:last-child p\u003ep:last-child,table.tableblock th\u003ep:last-child,table.tableblock td\u003ep:last-child{margin-bottom:0}"},{"lineNumber":245,"author":{"gitId":"gerhean"},"content":"table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}"},{"lineNumber":246,"author":{"gitId":"gerhean"},"content":"table.grid-all th.tableblock,table.grid-all td.tableblock{border-width:0 1px 1px 0}"},{"lineNumber":247,"author":{"gitId":"gerhean"},"content":"table.grid-all tfoot\u003etr\u003eth.tableblock,table.grid-all tfoot\u003etr\u003etd.tableblock{border-width:1px 1px 0 0}"},{"lineNumber":248,"author":{"gitId":"gerhean"},"content":"table.grid-cols th.tableblock,table.grid-cols td.tableblock{border-width:0 1px 0 0}"},{"lineNumber":249,"author":{"gitId":"gerhean"},"content":"table.grid-all *\u003etr\u003e.tableblock:last-child,table.grid-cols *\u003etr\u003e.tableblock:last-child{border-right-width:0}"},{"lineNumber":250,"author":{"gitId":"gerhean"},"content":"table.grid-rows th.tableblock,table.grid-rows td.tableblock{border-width:0 0 1px 0}"},{"lineNumber":251,"author":{"gitId":"gerhean"},"content":"table.grid-all tbody\u003etr:last-child\u003eth.tableblock,table.grid-all tbody\u003etr:last-child\u003etd.tableblock,table.grid-all thead:last-child\u003etr\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003etd.tableblock,table.grid-rows thead:last-child\u003etr\u003eth.tableblock{border-bottom-width:0}"},{"lineNumber":252,"author":{"gitId":"gerhean"},"content":"table.grid-rows tfoot\u003etr\u003eth.tableblock,table.grid-rows tfoot\u003etr\u003etd.tableblock{border-width:1px 0 0 0}"},{"lineNumber":253,"author":{"gitId":"gerhean"},"content":"table.frame-all{border-width:1px}"},{"lineNumber":254,"author":{"gitId":"gerhean"},"content":"table.frame-sides{border-width:0 1px}"},{"lineNumber":255,"author":{"gitId":"gerhean"},"content":"table.frame-topbot{border-width:1px 0}"},{"lineNumber":256,"author":{"gitId":"gerhean"},"content":"th.halign-left,td.halign-left{text-align:left}"},{"lineNumber":257,"author":{"gitId":"gerhean"},"content":"th.halign-right,td.halign-right{text-align:right}"},{"lineNumber":258,"author":{"gitId":"gerhean"},"content":"th.halign-center,td.halign-center{text-align:center}"},{"lineNumber":259,"author":{"gitId":"gerhean"},"content":"th.valign-top,td.valign-top{vertical-align:top}"},{"lineNumber":260,"author":{"gitId":"gerhean"},"content":"th.valign-bottom,td.valign-bottom{vertical-align:bottom}"},{"lineNumber":261,"author":{"gitId":"gerhean"},"content":"th.valign-middle,td.valign-middle{vertical-align:middle}"},{"lineNumber":262,"author":{"gitId":"gerhean"},"content":"table thead th,table tfoot th{font-weight:bold}"},{"lineNumber":263,"author":{"gitId":"gerhean"},"content":"tbody tr th{display:table-cell;line-height:1.6;background:#f7f8f7}"},{"lineNumber":264,"author":{"gitId":"gerhean"},"content":"tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}"},{"lineNumber":265,"author":{"gitId":"gerhean"},"content":"p.tableblock\u003ecode:only-child{background:none;padding:0}"},{"lineNumber":266,"author":{"gitId":"gerhean"},"content":"p.tableblock{font-size:1em}"},{"lineNumber":267,"author":{"gitId":"gerhean"},"content":"td\u003ediv.verse{white-space:pre}"},{"lineNumber":268,"author":{"gitId":"gerhean"},"content":"ol{margin-left:1.75em}"},{"lineNumber":269,"author":{"gitId":"gerhean"},"content":"ul li ol{margin-left:1.5em}"},{"lineNumber":270,"author":{"gitId":"gerhean"},"content":"dl dd{margin-left:1.125em}"},{"lineNumber":271,"author":{"gitId":"gerhean"},"content":"dl dd:last-child,dl dd:last-child\u003e:last-child{margin-bottom:0}"},{"lineNumber":272,"author":{"gitId":"gerhean"},"content":"ol\u003eli p,ul\u003eli p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}"},{"lineNumber":273,"author":{"gitId":"gerhean"},"content":"ul.unstyled,ol.unnumbered,ul.checklist,ul.none{list-style-type:none}"},{"lineNumber":274,"author":{"gitId":"gerhean"},"content":"ul.unstyled,ol.unnumbered,ul.checklist{margin-left:.625em}"},{"lineNumber":275,"author":{"gitId":"gerhean"},"content":"ul.checklist li\u003ep:first-child\u003e.fa-square-o:first-child,ul.checklist li\u003ep:first-child\u003e.fa-check-square-o:first-child{width:1em;font-size:.85em}"},{"lineNumber":276,"author":{"gitId":"gerhean"},"content":"ul.checklist li\u003ep:first-child\u003einput[type\u003d\"checkbox\"]:first-child{width:1em;position:relative;top:1px}"},{"lineNumber":277,"author":{"gitId":"gerhean"},"content":"ul.inline{margin:0 auto .625em auto;margin-left:-1.375em;margin-right:0;padding:0;list-style:none;overflow:hidden}"},{"lineNumber":278,"author":{"gitId":"gerhean"},"content":"ul.inline\u003eli{list-style:none;float:left;margin-left:1.375em;display:block}"},{"lineNumber":279,"author":{"gitId":"gerhean"},"content":"ul.inline\u003eli\u003e*{display:block}"},{"lineNumber":280,"author":{"gitId":"gerhean"},"content":".unstyled dl dt{font-weight:400;font-style:normal}"},{"lineNumber":281,"author":{"gitId":"gerhean"},"content":"ol.arabic{list-style-type:decimal}"},{"lineNumber":282,"author":{"gitId":"gerhean"},"content":"ol.decimal{list-style-type:decimal-leading-zero}"},{"lineNumber":283,"author":{"gitId":"gerhean"},"content":"ol.loweralpha{list-style-type:lower-alpha}"},{"lineNumber":284,"author":{"gitId":"gerhean"},"content":"ol.upperalpha{list-style-type:upper-alpha}"},{"lineNumber":285,"author":{"gitId":"gerhean"},"content":"ol.lowerroman{list-style-type:lower-roman}"},{"lineNumber":286,"author":{"gitId":"gerhean"},"content":"ol.upperroman{list-style-type:upper-roman}"},{"lineNumber":287,"author":{"gitId":"gerhean"},"content":"ol.lowergreek{list-style-type:lower-greek}"},{"lineNumber":288,"author":{"gitId":"gerhean"},"content":".hdlist\u003etable,.colist\u003etable{border:0;background:none}"},{"lineNumber":289,"author":{"gitId":"gerhean"},"content":".hdlist\u003etable\u003etbody\u003etr,.colist\u003etable\u003etbody\u003etr{background:none}"},{"lineNumber":290,"author":{"gitId":"gerhean"},"content":"td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}"},{"lineNumber":291,"author":{"gitId":"gerhean"},"content":"td.hdlist1{font-weight:bold;padding-bottom:1.25em}"},{"lineNumber":292,"author":{"gitId":"gerhean"},"content":".literalblock+.colist,.listingblock+.colist{margin-top:-.5em}"},{"lineNumber":293,"author":{"gitId":"gerhean"},"content":".colist\u003etable tr\u003etd:first-of-type{padding:0 .75em;line-height:1}"},{"lineNumber":294,"author":{"gitId":"gerhean"},"content":".colist\u003etable tr\u003etd:last-of-type{padding:.25em 0}"},{"lineNumber":295,"author":{"gitId":"gerhean"},"content":".thumb,.th{line-height:0;display:inline-block;border:solid 4px #fff;-webkit-box-shadow:0 0 0 1px #ddd;box-shadow:0 0 0 1px #ddd}"},{"lineNumber":296,"author":{"gitId":"gerhean"},"content":".imageblock.left,.imageblock[style*\u003d\"float: left\"]{margin:.25em .625em 1.25em 0}"},{"lineNumber":297,"author":{"gitId":"gerhean"},"content":".imageblock.right,.imageblock[style*\u003d\"float: right\"]{margin:.25em 0 1.25em .625em}"},{"lineNumber":298,"author":{"gitId":"gerhean"},"content":".imageblock\u003e.title{margin-bottom:0}"},{"lineNumber":299,"author":{"gitId":"gerhean"},"content":".imageblock.thumb,.imageblock.th{border-width:6px}"},{"lineNumber":300,"author":{"gitId":"gerhean"},"content":".imageblock.thumb\u003e.title,.imageblock.th\u003e.title{padding:0 .125em}"},{"lineNumber":301,"author":{"gitId":"gerhean"},"content":".image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}"},{"lineNumber":302,"author":{"gitId":"gerhean"},"content":".image.left{margin-right:.625em}"},{"lineNumber":303,"author":{"gitId":"gerhean"},"content":".image.right{margin-left:.625em}"},{"lineNumber":304,"author":{"gitId":"gerhean"},"content":"a.image{text-decoration:none;display:inline-block}"},{"lineNumber":305,"author":{"gitId":"gerhean"},"content":"a.image object{pointer-events:none}"},{"lineNumber":306,"author":{"gitId":"gerhean"},"content":"sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}"},{"lineNumber":307,"author":{"gitId":"gerhean"},"content":"sup.footnote a,sup.footnoteref a{text-decoration:none}"},{"lineNumber":308,"author":{"gitId":"gerhean"},"content":"sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}"},{"lineNumber":309,"author":{"gitId":"gerhean"},"content":"#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}"},{"lineNumber":310,"author":{"gitId":"gerhean"},"content":"#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em 0;border-width:1px 0 0 0}"},{"lineNumber":311,"author":{"gitId":"gerhean"},"content":"#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;text-indent:-1.05em;margin-bottom:.2em}"},{"lineNumber":312,"author":{"gitId":"gerhean"},"content":"#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none}"},{"lineNumber":313,"author":{"gitId":"gerhean"},"content":"#footnotes .footnote:last-of-type{margin-bottom:0}"},{"lineNumber":314,"author":{"gitId":"gerhean"},"content":"#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}"},{"lineNumber":315,"author":{"gitId":"gerhean"},"content":".gist .file-data\u003etable{border:0;background:#fff;width:100%;margin-bottom:0}"},{"lineNumber":316,"author":{"gitId":"gerhean"},"content":".gist .file-data\u003etable td.line-data{width:99%}"},{"lineNumber":317,"author":{"gitId":"gerhean"},"content":"div.unbreakable{page-break-inside:avoid}"},{"lineNumber":318,"author":{"gitId":"gerhean"},"content":".big{font-size:larger}"},{"lineNumber":319,"author":{"gitId":"gerhean"},"content":".small{font-size:smaller}"},{"lineNumber":320,"author":{"gitId":"gerhean"},"content":".underline{text-decoration:underline}"},{"lineNumber":321,"author":{"gitId":"gerhean"},"content":".overline{text-decoration:overline}"},{"lineNumber":322,"author":{"gitId":"gerhean"},"content":".line-through{text-decoration:line-through}"},{"lineNumber":323,"author":{"gitId":"gerhean"},"content":".aqua{color:#00bfbf}"},{"lineNumber":324,"author":{"gitId":"gerhean"},"content":".aqua-background{background-color:#00fafa}"},{"lineNumber":325,"author":{"gitId":"gerhean"},"content":".black{color:#000}"},{"lineNumber":326,"author":{"gitId":"gerhean"},"content":".black-background{background-color:#000}"},{"lineNumber":327,"author":{"gitId":"gerhean"},"content":".blue{color:#0000bf}"},{"lineNumber":328,"author":{"gitId":"gerhean"},"content":".blue-background{background-color:#0000fa}"},{"lineNumber":329,"author":{"gitId":"gerhean"},"content":".fuchsia{color:#bf00bf}"},{"lineNumber":330,"author":{"gitId":"gerhean"},"content":".fuchsia-background{background-color:#fa00fa}"},{"lineNumber":331,"author":{"gitId":"gerhean"},"content":".gray{color:#606060}"},{"lineNumber":332,"author":{"gitId":"gerhean"},"content":".gray-background{background-color:#7d7d7d}"},{"lineNumber":333,"author":{"gitId":"gerhean"},"content":".green{color:#006000}"},{"lineNumber":334,"author":{"gitId":"gerhean"},"content":".green-background{background-color:#007d00}"},{"lineNumber":335,"author":{"gitId":"gerhean"},"content":".lime{color:#00bf00}"},{"lineNumber":336,"author":{"gitId":"gerhean"},"content":".lime-background{background-color:#00fa00}"},{"lineNumber":337,"author":{"gitId":"gerhean"},"content":".maroon{color:#600000}"},{"lineNumber":338,"author":{"gitId":"gerhean"},"content":".maroon-background{background-color:#7d0000}"},{"lineNumber":339,"author":{"gitId":"gerhean"},"content":".navy{color:#000060}"},{"lineNumber":340,"author":{"gitId":"gerhean"},"content":".navy-background{background-color:#00007d}"},{"lineNumber":341,"author":{"gitId":"gerhean"},"content":".olive{color:#606000}"},{"lineNumber":342,"author":{"gitId":"gerhean"},"content":".olive-background{background-color:#7d7d00}"},{"lineNumber":343,"author":{"gitId":"gerhean"},"content":".purple{color:#600060}"},{"lineNumber":344,"author":{"gitId":"gerhean"},"content":".purple-background{background-color:#7d007d}"},{"lineNumber":345,"author":{"gitId":"gerhean"},"content":".red{color:#bf0000}"},{"lineNumber":346,"author":{"gitId":"gerhean"},"content":".red-background{background-color:#fa0000}"},{"lineNumber":347,"author":{"gitId":"gerhean"},"content":".silver{color:#909090}"},{"lineNumber":348,"author":{"gitId":"gerhean"},"content":".silver-background{background-color:#bcbcbc}"},{"lineNumber":349,"author":{"gitId":"gerhean"},"content":".teal{color:#006060}"},{"lineNumber":350,"author":{"gitId":"gerhean"},"content":".teal-background{background-color:#007d7d}"},{"lineNumber":351,"author":{"gitId":"gerhean"},"content":".white{color:#bfbfbf}"},{"lineNumber":352,"author":{"gitId":"gerhean"},"content":".white-background{background-color:#fafafa}"},{"lineNumber":353,"author":{"gitId":"gerhean"},"content":".yellow{color:#bfbf00}"},{"lineNumber":354,"author":{"gitId":"gerhean"},"content":".yellow-background{background-color:#fafa00}"},{"lineNumber":355,"author":{"gitId":"gerhean"},"content":"span.icon\u003e.fa{cursor:default}"},{"lineNumber":356,"author":{"gitId":"gerhean"},"content":".admonitionblock td.icon [class^\u003d\"fa icon-\"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}"},{"lineNumber":357,"author":{"gitId":"gerhean"},"content":".admonitionblock td.icon .icon-note:before{content:\"\\f05a\";color:#19407c}"},{"lineNumber":358,"author":{"gitId":"gerhean"},"content":".admonitionblock td.icon .icon-tip:before{content:\"\\f0eb\";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}"},{"lineNumber":359,"author":{"gitId":"gerhean"},"content":".admonitionblock td.icon .icon-warning:before{content:\"\\f071\";color:#bf6900}"},{"lineNumber":360,"author":{"gitId":"gerhean"},"content":".admonitionblock td.icon .icon-caution:before{content:\"\\f06d\";color:#bf3400}"},{"lineNumber":361,"author":{"gitId":"gerhean"},"content":".admonitionblock td.icon .icon-important:before{content:\"\\f06a\";color:#bf0000}"},{"lineNumber":362,"author":{"gitId":"gerhean"},"content":".conum[data-value]{display:inline-block;color:#fff!important;background-color:rgba(0,0,0,.8);-webkit-border-radius:100px;border-radius:100px;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-style:normal;font-weight:bold}"},{"lineNumber":363,"author":{"gitId":"gerhean"},"content":".conum[data-value] *{color:#fff!important}"},{"lineNumber":364,"author":{"gitId":"gerhean"},"content":".conum[data-value]+b{display:none}"},{"lineNumber":365,"author":{"gitId":"gerhean"},"content":".conum[data-value]:after{content:attr(data-value)}"},{"lineNumber":366,"author":{"gitId":"gerhean"},"content":"pre .conum[data-value]{position:relative;top:-.125em}"},{"lineNumber":367,"author":{"gitId":"gerhean"},"content":"b.conum *{color:inherit!important}"},{"lineNumber":368,"author":{"gitId":"gerhean"},"content":".conum:not([data-value]):empty{display:none}"},{"lineNumber":369,"author":{"gitId":"gerhean"},"content":"dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}"},{"lineNumber":370,"author":{"gitId":"gerhean"},"content":"h1,h2,p,td.content,span.alt{letter-spacing:-.01em}"},{"lineNumber":371,"author":{"gitId":"gerhean"},"content":"p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}"},{"lineNumber":372,"author":{"gitId":"gerhean"},"content":"p,blockquote,dt,td.content,span.alt{font-size:1.0625rem}"},{"lineNumber":373,"author":{"gitId":"gerhean"},"content":"p{margin-bottom:1.25rem}"},{"lineNumber":374,"author":{"gitId":"gerhean"},"content":".sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}"},{"lineNumber":375,"author":{"gitId":"gerhean"},"content":".exampleblock\u003e.content{background-color:#fffef7;border-color:#e0e0dc;-webkit-box-shadow:0 1px 4px #e0e0dc;box-shadow:0 1px 4px #e0e0dc}"},{"lineNumber":376,"author":{"gitId":"gerhean"},"content":".print-only{display:none!important}"},{"lineNumber":377,"author":{"gitId":"gerhean"},"content":"@media print{@page{margin:1.25cm .75cm}"},{"lineNumber":378,"author":{"gitId":"gerhean"},"content":"*{-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow:none!important}"},{"lineNumber":379,"author":{"gitId":"gerhean"},"content":"a{color:inherit!important;text-decoration:underline!important}"},{"lineNumber":380,"author":{"gitId":"gerhean"},"content":"a.bare,a[href^\u003d\"#\"],a[href^\u003d\"mailto:\"]{text-decoration:none!important}"},{"lineNumber":381,"author":{"gitId":"gerhean"},"content":"a[href^\u003d\"http:\"]:not(.bare):after,a[href^\u003d\"https:\"]:not(.bare):after{content:\"(\" attr(href) \")\";display:inline-block;font-size:.875em;padding-left:.25em}"},{"lineNumber":382,"author":{"gitId":"gerhean"},"content":"abbr[title]:after{content:\" (\" attr(title) \")\"}"},{"lineNumber":383,"author":{"gitId":"gerhean"},"content":"pre,blockquote,tr,img,object,svg{page-break-inside:avoid}"},{"lineNumber":384,"author":{"gitId":"gerhean"},"content":"thead{display:table-header-group}"},{"lineNumber":385,"author":{"gitId":"gerhean"},"content":"svg{max-width:100%}"},{"lineNumber":386,"author":{"gitId":"gerhean"},"content":"p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}"},{"lineNumber":387,"author":{"gitId":"gerhean"},"content":"h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title{page-break-after:avoid}"},{"lineNumber":388,"author":{"gitId":"gerhean"},"content":"#toc,.sidebarblock,.exampleblock\u003e.content{background:none!important}"},{"lineNumber":389,"author":{"gitId":"gerhean"},"content":"#toc{border-bottom:1px solid #ddddd8!important;padding-bottom:0!important}"},{"lineNumber":390,"author":{"gitId":"gerhean"},"content":".sect1{padding-bottom:0!important}"},{"lineNumber":391,"author":{"gitId":"gerhean"},"content":".sect1+.sect1{border:0!important}"},{"lineNumber":392,"author":{"gitId":"gerhean"},"content":"#header\u003eh1:first-child{margin-top:1.25rem}"},{"lineNumber":393,"author":{"gitId":"gerhean"},"content":"body.book #header{text-align:center}"},{"lineNumber":394,"author":{"gitId":"gerhean"},"content":"body.book #header\u003eh1:first-child{border:0!important;margin:2.5em 0 1em 0}"},{"lineNumber":395,"author":{"gitId":"gerhean"},"content":"body.book #header .details{border:0!important;display:block;padding:0!important}"},{"lineNumber":396,"author":{"gitId":"gerhean"},"content":"body.book #header .details span:first-child{margin-left:0!important}"},{"lineNumber":397,"author":{"gitId":"gerhean"},"content":"body.book #header .details br{display:block}"},{"lineNumber":398,"author":{"gitId":"gerhean"},"content":"body.book #header .details br+span:before{content:none!important}"},{"lineNumber":399,"author":{"gitId":"gerhean"},"content":"body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}"},{"lineNumber":400,"author":{"gitId":"gerhean"},"content":"body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1\u003eh2{page-break-before:always}"},{"lineNumber":401,"author":{"gitId":"gerhean"},"content":".listingblock code[data-lang]:before{display:block}"},{"lineNumber":402,"author":{"gitId":"gerhean"},"content":"#footer{background:none!important;padding:0 .9375em}"},{"lineNumber":403,"author":{"gitId":"gerhean"},"content":"#footer-text{color:rgba(0,0,0,.6)!important;font-size:.9em}"},{"lineNumber":404,"author":{"gitId":"gerhean"},"content":".hide-on-print{display:none!important}"},{"lineNumber":405,"author":{"gitId":"gerhean"},"content":".print-only{display:block!important}"},{"lineNumber":406,"author":{"gitId":"gerhean"},"content":".hide-for-print{display:none!important}"},{"lineNumber":407,"author":{"gitId":"gerhean"},"content":".show-for-print{display:inherit!important}}"}],"authorContributionMap":{"gerhean":407}},{"path":"src/main/resources/html/stylesheets/gh-pages.css","fileType":"css","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"@import url(https://fonts.googleapis.com/css?family\u003dMontserrat|Open+Sans);"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":"@import \"asciidoctor.css\"; /* Default asciidoc style framework - important */"},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"/* Custom block: details */"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":".sidebarblock.details \u003e .content {"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"    border-left: .25rem solid rgba(0, 0, 0, 0.1);"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":".sidebarblock.details \u003e .content {"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"    padding-left: .5rem"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":".sidebarblock.details {"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"    background-color: transparent;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"    border: none;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"    padding-bottom: 0;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"    padding-top: 0;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"/* Overrides for asciidoctor.css */"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"a {"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"    color: #0074c7;"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"h1,"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"#content h1 \u003e a.link,"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"h2,"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"h2 \u003e a.link,"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"h3,"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"h3 \u003e a.link,"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"#toctitle,"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"#toctitle \u003e a.link,"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":".sidebarblock \u003e .content \u003e .title,"},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":".sidebarblock \u003e .content \u003e .title \u003e a.link,"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"h4,"},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"h4 \u003e a.link,"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"h5,"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"h5 \u003e a.link,"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"h6,"},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"h6 \u003e a.link {"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"    color: #e46c0a;"},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":".subheader,"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":".admonitionblock td.content \u003e .title,"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":".audioblock \u003e .title,"},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":".exampleblock \u003e .title,"},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":".imageblock \u003e .title,"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":".listingblock \u003e .title,"},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":".literalblock \u003e .title,"},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":".stemblock \u003e .title,"},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":".openblock \u003e .title,"},{"lineNumber":55,"author":{"gitId":"gerhean"},"content":".paragraph \u003e.title,"},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":".quoteblock \u003e .title,"},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":"table.tableblock \u003e .title,"},{"lineNumber":58,"author":{"gitId":"gerhean"},"content":".verseblock \u003e .title,"},{"lineNumber":59,"author":{"gitId":"gerhean"},"content":".videoblock \u003e .title,"},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":".dlist \u003e .title,"},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":".olist \u003e .title,"},{"lineNumber":62,"author":{"gitId":"gerhean"},"content":".ulist \u003e .title,"},{"lineNumber":63,"author":{"gitId":"gerhean"},"content":".qlist \u003e .title,"},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":".hdlist \u003e .title {"},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":"    color: rgb(197, 90, 17);"},{"lineNumber":66,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":67,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":68,"author":{"gitId":"gerhean"},"content":"@media screen {"},{"lineNumber":69,"author":{"gitId":"gerhean"},"content":"    #footer {"},{"lineNumber":70,"author":{"gitId":"gerhean"},"content":"        background-color: #f6f6f6;"},{"lineNumber":71,"author":{"gitId":"gerhean"},"content":"        border-top: 1px #d2d2d2 solid;"},{"lineNumber":72,"author":{"gitId":"gerhean"},"content":"        border-bottom: 1px #d2d2d2 solid;"},{"lineNumber":73,"author":{"gitId":"gerhean"},"content":"        font-family: \"Open Sans\", \"DejaVu Sans\", sans-serif;"},{"lineNumber":74,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":76,"author":{"gitId":"gerhean"},"content":"    #footer-text {"},{"lineNumber":77,"author":{"gitId":"gerhean"},"content":"        color: #595959;"},{"lineNumber":78,"author":{"gitId":"gerhean"},"content":"        line-height: 1;"},{"lineNumber":79,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":81,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":82,"author":{"gitId":"gerhean"},"content":"/* Utilities */"},{"lineNumber":83,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":84,"author":{"gitId":"gerhean"},"content":".container {"},{"lineNumber":85,"author":{"gitId":"gerhean"},"content":"    width: 100%;"},{"lineNumber":86,"author":{"gitId":"gerhean"},"content":"    max-width: 62.5rem;"},{"lineNumber":87,"author":{"gitId":"gerhean"},"content":"    margin-left: auto;"},{"lineNumber":88,"author":{"gitId":"gerhean"},"content":"    margin-right: auto;"},{"lineNumber":89,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":90,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":91,"author":{"gitId":"gerhean"},"content":"/* Colors */"},{"lineNumber":92,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":93,"author":{"gitId":"gerhean"},"content":".bg-light {"},{"lineNumber":94,"author":{"gitId":"gerhean"},"content":"    background-color: #f8f9fa;"},{"lineNumber":95,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":96,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":97,"author":{"gitId":"gerhean"},"content":".bg-lighter {"},{"lineNumber":98,"author":{"gitId":"gerhean"},"content":"    background-color: #fbfbfb;"},{"lineNumber":99,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":100,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":101,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":102,"author":{"gitId":"gerhean"},"content":"/* Navbar */"},{"lineNumber":103,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":104,"author":{"gitId":"gerhean"},"content":".navbar {"},{"lineNumber":105,"author":{"gitId":"gerhean"},"content":"    display: flex;"},{"lineNumber":106,"author":{"gitId":"gerhean"},"content":"    flex-wrap: nowrap;"},{"lineNumber":107,"author":{"gitId":"gerhean"},"content":"    justify-content: center;"},{"lineNumber":108,"author":{"gitId":"gerhean"},"content":"    font-family: \"Open Sans\", \"DejaVu Sans\", sans-serif;"},{"lineNumber":109,"author":{"gitId":"gerhean"},"content":"    font-size: 1rem;"},{"lineNumber":110,"author":{"gitId":"gerhean"},"content":"    padding: 0px 1rem;"},{"lineNumber":111,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":112,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":113,"author":{"gitId":"gerhean"},"content":".navbar-lg {"},{"lineNumber":114,"author":{"gitId":"gerhean"},"content":"    font-size: 1.3rem;"},{"lineNumber":115,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":116,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":117,"author":{"gitId":"gerhean"},"content":".navbar-light {"},{"lineNumber":118,"author":{"gitId":"gerhean"},"content":"    border-bottom: 1px #d2d2d2 solid;"},{"lineNumber":119,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":120,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":121,"author":{"gitId":"gerhean"},"content":".navbar a {"},{"lineNumber":122,"author":{"gitId":"gerhean"},"content":"    text-decoration: none;"},{"lineNumber":123,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":124,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":125,"author":{"gitId":"gerhean"},"content":".navbar-light a {"},{"lineNumber":126,"author":{"gitId":"gerhean"},"content":"    color: #595959;"},{"lineNumber":127,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":128,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":129,"author":{"gitId":"gerhean"},"content":".navbar-light a:hover,"},{"lineNumber":130,"author":{"gitId":"gerhean"},"content":".navbar-light a:focus {"},{"lineNumber":131,"author":{"gitId":"gerhean"},"content":"    color: #000000;"},{"lineNumber":132,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":133,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":134,"author":{"gitId":"gerhean"},"content":".navbar a.active,"},{"lineNumber":135,"author":{"gitId":"gerhean"},"content":".navbar a.active:hover,"},{"lineNumber":136,"author":{"gitId":"gerhean"},"content":".navbar a.active:focus {"},{"lineNumber":137,"author":{"gitId":"gerhean"},"content":"    font-weight: bold;"},{"lineNumber":138,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":139,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":140,"author":{"gitId":"gerhean"},"content":".navbar-light a.active,"},{"lineNumber":141,"author":{"gitId":"gerhean"},"content":".navbar-light a.active:hover,"},{"lineNumber":142,"author":{"gitId":"gerhean"},"content":".navbar-light a.active:focus {"},{"lineNumber":143,"author":{"gitId":"gerhean"},"content":"    color: #000000;"},{"lineNumber":144,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":145,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":146,"author":{"gitId":"gerhean"},"content":".navbar-light .nav-link {"},{"lineNumber":147,"author":{"gitId":"gerhean"},"content":"    border-bottom: 2px transparent solid;"},{"lineNumber":148,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":149,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":150,"author":{"gitId":"gerhean"},"content":".navbar-light .nav-link.active {"},{"lineNumber":151,"author":{"gitId":"gerhean"},"content":"    border-bottom: 2px #e46c0a solid;"},{"lineNumber":152,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":153,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":154,"author":{"gitId":"gerhean"},"content":".navbar-lg .nav-link.active {"},{"lineNumber":155,"author":{"gitId":"gerhean"},"content":"    border-bottom: 0;"},{"lineNumber":156,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":157,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":158,"author":{"gitId":"gerhean"},"content":".navbar \u003e .container {"},{"lineNumber":159,"author":{"gitId":"gerhean"},"content":"    display: flex;"},{"lineNumber":160,"author":{"gitId":"gerhean"},"content":"    flex-wrap: wrap;"},{"lineNumber":161,"author":{"gitId":"gerhean"},"content":"    justify-content: center;"},{"lineNumber":162,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":163,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":164,"author":{"gitId":"gerhean"},"content":".navbar-brand {"},{"lineNumber":165,"author":{"gitId":"gerhean"},"content":"    display: inline-block;"},{"lineNumber":166,"author":{"gitId":"gerhean"},"content":"    margin-right: 1rem;"},{"lineNumber":167,"author":{"gitId":"gerhean"},"content":"    padding: 0.8125rem 0rem;"},{"lineNumber":168,"author":{"gitId":"gerhean"},"content":"    padding-left: 0.9375rem;"},{"lineNumber":169,"author":{"gitId":"gerhean"},"content":"    font-size: 1.25rem;"},{"lineNumber":170,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":171,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":172,"author":{"gitId":"gerhean"},"content":".navbar-brand img {"},{"lineNumber":173,"author":{"gitId":"gerhean"},"content":"    height: 1.4rem;"},{"lineNumber":174,"author":{"gitId":"gerhean"},"content":"    margin: 0rem 0.4rem;"},{"lineNumber":175,"author":{"gitId":"gerhean"},"content":"    padding: 0;"},{"lineNumber":176,"author":{"gitId":"gerhean"},"content":"    vertical-align: middle;"},{"lineNumber":177,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":178,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":179,"author":{"gitId":"gerhean"},"content":".navbar-lg .navbar-brand {"},{"lineNumber":180,"author":{"gitId":"gerhean"},"content":"    font-size: 1.7rem;"},{"lineNumber":181,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":182,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":183,"author":{"gitId":"gerhean"},"content":".navbar-lg .navbar-brand img {"},{"lineNumber":184,"author":{"gitId":"gerhean"},"content":"    height: 2.3rem;"},{"lineNumber":185,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":186,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":187,"author":{"gitId":"gerhean"},"content":".navbar-nav {"},{"lineNumber":188,"author":{"gitId":"gerhean"},"content":"    display: flex;"},{"lineNumber":189,"author":{"gitId":"gerhean"},"content":"    flex-wrap: wrap;"},{"lineNumber":190,"author":{"gitId":"gerhean"},"content":"    flex-grow: 1;"},{"lineNumber":191,"author":{"gitId":"gerhean"},"content":"    align-items: center;"},{"lineNumber":192,"author":{"gitId":"gerhean"},"content":"    margin: 0px;"},{"lineNumber":193,"author":{"gitId":"gerhean"},"content":"    padding: 0px;"},{"lineNumber":194,"author":{"gitId":"gerhean"},"content":"    list-style: none;"},{"lineNumber":195,"author":{"gitId":"gerhean"},"content":"    line-height: inherit;"},{"lineNumber":196,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":197,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":198,"author":{"gitId":"gerhean"},"content":".nav-link {"},{"lineNumber":199,"author":{"gitId":"gerhean"},"content":"    display: block;"},{"lineNumber":200,"author":{"gitId":"gerhean"},"content":"    margin: 0px;"},{"lineNumber":201,"author":{"gitId":"gerhean"},"content":"    border: 0px;"},{"lineNumber":202,"author":{"gitId":"gerhean"},"content":"    padding: 1rem 1rem;"},{"lineNumber":203,"author":{"gitId":"gerhean"},"content":"}"},{"lineNumber":204,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":205,"author":{"gitId":"gerhean"},"content":"/* Do not display site header on print mediums */"},{"lineNumber":206,"author":{"gitId":"gerhean"},"content":"@media print {"},{"lineNumber":207,"author":{"gitId":"gerhean"},"content":"    #seedu-header {"},{"lineNumber":208,"author":{"gitId":"gerhean"},"content":"        display: none;"},{"lineNumber":209,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":211,"author":{"gitId":"gerhean"},"content":"    #site-header {"},{"lineNumber":212,"author":{"gitId":"gerhean"},"content":"        display: none;"},{"lineNumber":213,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":214,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":214}},{"path":"src/main/resources/html/userGuide.html","fileType":"html","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"\u003c!DOCTYPE html\u003e"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":"\u003chtml lang\u003d\"en\"\u003e"},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"\u003chead\u003e"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"    \u003cmeta charset\u003d\"UTF-8\"\u003e"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"    \u003c!--[if IE]\u003e"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"    \u003cmeta http-equiv\u003d\"X-UA-Compatible\" content\u003d\"IE\u003dedge\"\u003e\u003c![endif]--\u003e"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"    \u003cmeta name\u003d\"viewport\" content\u003d\"width\u003ddevice-width, initial-scale\u003d1.0\"\u003e"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"    \u003cmeta name\u003d\"generator\" content\u003d\"Asciidoctor 1.5.6.1\"\u003e"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"    \u003ctitle\u003eInternship Diary - User Guide\u003c/title\u003e"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"    \u003clink rel\u003d\"stylesheet\" href\u003d\"stylesheets/gh-pages.css\"\u003e"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"    \u003clink rel\u003d\"stylesheet\" href\u003d\"stylesheets/coderay-asciidoctor.css\"\u003e"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"\u003c/head\u003e"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"\u003cbody class\u003d\"article\"\u003e"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"\u003cdiv id\u003d\"header\"\u003e\u003ch1\u003eInternship Diary - User Guide (Offline Version)\u003c/h1\u003e\u003c/div\u003e"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"\u003cdiv id\u003d\"content\"\u003e"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"    \u003cdiv id\u003d\"preamble\"\u003e"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"        \u003cdiv class\u003d\"sectionbody\"\u003e"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"                \u003cp\u003eOnline version can be found here:\u003c/p\u003e"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"                \u003cp\u003ehttps://ay1920s2-cs2103t-f10-2.github.io/main/UserGuide.html\u003c/p\u003e"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"                \u003cp\u003eBy: \u003ccode\u003eCS2103T-F10-2\u003c/code\u003e Since: \u003ccode\u003eFeb 2020\u003c/code\u003e Licence: \u003ccode\u003eMIT\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"        \u003c/div\u003e"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"        \u003cdiv id\u003d\"toc\" class\u003d\"toc\"\u003e"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"            \u003cdiv id\u003d\"toctitle\"\u003e\u003c/div\u003e"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"            \u003cul class\u003d\"sectlevel1\"\u003e"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"                \u003cli\u003e\u003ca href\u003d\"#introduction\"\u003e1. Introduction\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"                \u003cli\u003e\u003ca href\u003d\"#quick-start\"\u003e2. Quick Start\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"                \u003cli\u003e\u003ca href\u003d\"#key-information\"\u003e3. Key Information\u003c/a\u003e"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"                    \u003cul class\u003d\"sectlevel2\"\u003e"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e\u003ca href\u003d\"#graphical-user-interface\"\u003e3.1. Graphical user interface\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e\u003ca href\u003d\"#fields\"\u003e3.2. Structure of internship application\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e\u003ca href\u003d\"#valid-status\"\u003e3.3. Valid status\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e\u003ca href\u003d\"#interview\"\u003e3.4. Structure of interview\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e\u003ca href\u003d\"#command-format\"\u003e3.5. Command format\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e\u003ca href\u003d\"#viewing-command-history\"\u003e3.6. Viewing command history\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e\u003ca href\u003d\"#other-important-information\"\u003e3.7. Other important information\u003c/a\u003e"},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"                            \u003cul class\u003d\"sectlevel3\"\u003e"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e\u003ca href\u003d\"#index-of-an-internship-application\"\u003e3.7.1. Index of an internship"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"                                    application\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e\u003ca href\u003d\"#multiple-fields\"\u003e3.7.2. Multiple fields\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e\u003ca href\u003d\"#command-availability\"\u003e3.7.3. Command availability\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e\u003ca href\u003d\"#colored-internship-applications\"\u003e3.7.4. Colored internship"},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"                                    applications\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"                            \u003c/ul\u003e"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"                    \u003c/ul\u003e"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"                \u003c/li\u003e"},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"                \u003cli\u003e\u003ca href\u003d\"#Commands\"\u003e4. Commands\u003c/a\u003e"},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"                    \u003cul class\u003d\"sectlevel2\"\u003e"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e\u003ca href\u003d\"#viewing-offline-user-guide-code-help-code\"\u003e4.1. Viewing offline user guide: \u003ccode\u003ehelp\u003c/code\u003e\u003c/a\u003e"},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e\u003ca href\u003d\"#viewing-unarchived-internship-applications-code-list-code\"\u003e4.2. Viewing unarchived"},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":"                            internship applications: \u003ccode\u003elist\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":55,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e\u003ca href\u003d\"#viewing-archived-internship-applications-code-archival-code\"\u003e4.3. Viewing archived"},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":"                            internship applications: \u003ccode\u003earchival\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e\u003ca href\u003d\"#selecting-an-internship-application-to-display-code-select-code\"\u003e4.4. Selecting an"},{"lineNumber":58,"author":{"gitId":"gerhean"},"content":"                            internship application to display: \u003ccode\u003eselect\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":59,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e\u003ca href\u003d\"#adding-an-internship-application-code-add-code\"\u003e4.5. Adding an internship"},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":"                            application: \u003ccode\u003eadd\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e\u003ca href\u003d\"#deleting-internship-application-code-delete-code\"\u003e4.6. Deleting internship"},{"lineNumber":62,"author":{"gitId":"gerhean"},"content":"                            application: \u003ccode\u003edelete\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":63,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e\u003ca href\u003d\"#archiving-internship-application-code-archive-code\"\u003e4.7. Archiving internship"},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":"                            application: \u003ccode\u003earchive\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e\u003ca href\u003d\"#unarchiving-internship-application-code-unarchive-code\"\u003e4.8. Unarchiving"},{"lineNumber":66,"author":{"gitId":"gerhean"},"content":"                            internship application: \u003ccode\u003eunarchive\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":67,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e\u003ca href\u003d\"#editing-an-internship-application-code-edit-code\"\u003e4.9. Editing an internship"},{"lineNumber":68,"author":{"gitId":"gerhean"},"content":"                            application: \u003ccode\u003eedit\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":69,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e\u003ca href\u003d\"#locating-internship-applications-code-find-code\"\u003e4.10. Locating internship"},{"lineNumber":70,"author":{"gitId":"gerhean"},"content":"                            applications: \u003ccode\u003efind\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":71,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e\u003ca href\u003d\"#sorting-internship-companies-by-field-code-sort-code\"\u003e4.11. Sorting internship"},{"lineNumber":72,"author":{"gitId":"gerhean"},"content":"                            companies by field: \u003ccode\u003esort\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":73,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e\u003ca href\u003d\"#modifying-an-interview-in-an-internship-application-code-interview-code\"\u003e4.12."},{"lineNumber":74,"author":{"gitId":"gerhean"},"content":"                            Modifying an interview in an internship application: \u003ccode\u003einterview\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":75,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e\u003ca href\u003d\"#getting-applications-due-or-have-interviews-in-7-days-code-reminder-code\"\u003e4.13."},{"lineNumber":76,"author":{"gitId":"gerhean"},"content":"                            Getting applications due or have interviews in 7 days: \u003ccode\u003ereminder\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":77,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e\u003ca href\u003d\"#clearing-all-entries-code-clear-code\"\u003e4.14. Clearing all entries:"},{"lineNumber":78,"author":{"gitId":"gerhean"},"content":"                            \u003ccode\u003eclear\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":79,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e\u003ca href\u003d\"#retrieving-statistics-code-stats-code\"\u003e4.15. Retrieving statistics:"},{"lineNumber":80,"author":{"gitId":"gerhean"},"content":"                            \u003ccode\u003estats\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":81,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e\u003ca href\u003d\"#exiting-the-program-code-exit-code\"\u003e4.16. Exiting the program:"},{"lineNumber":82,"author":{"gitId":"gerhean"},"content":"                            \u003ccode\u003eexit\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":83,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e\u003ca href\u003d\"#saving-the-data\"\u003e4.17. Saving the data\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":84,"author":{"gitId":"gerhean"},"content":"                    \u003c/ul\u003e"},{"lineNumber":85,"author":{"gitId":"gerhean"},"content":"                \u003c/li\u003e"},{"lineNumber":86,"author":{"gitId":"gerhean"},"content":"                \u003cli\u003e\u003ca href\u003d\"#faq\"\u003e5. FAQ\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":87,"author":{"gitId":"gerhean"},"content":"                \u003cli\u003e\u003ca href\u003d\"#command-summary\"\u003e6. Command Summary\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":88,"author":{"gitId":"gerhean"},"content":"                \u003cli\u003e\u003ca href\u003d\"#glossary\"\u003e7. Glossary\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":89,"author":{"gitId":"gerhean"},"content":"            \u003c/ul\u003e"},{"lineNumber":90,"author":{"gitId":"gerhean"},"content":"        \u003c/div\u003e"},{"lineNumber":91,"author":{"gitId":"gerhean"},"content":"    \u003c/div\u003e"},{"lineNumber":92,"author":{"gitId":"gerhean"},"content":"    \u003cdiv class\u003d\"sect1\"\u003e"},{"lineNumber":93,"author":{"gitId":"gerhean"},"content":"        \u003ch2 id\u003d\"introduction\"\u003e\u003ca class\u003d\"link\" href\u003d\"#introduction\"\u003e1. Introduction\u003c/a\u003e\u003c/h2\u003e"},{"lineNumber":94,"author":{"gitId":"gerhean"},"content":"        \u003cdiv class\u003d\"sectionbody\"\u003e"},{"lineNumber":95,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":96,"author":{"gitId":"gerhean"},"content":"                \u003cp\u003eInternship Diary is a desktop application that assists university students in managing their"},{"lineNumber":97,"author":{"gitId":"gerhean"},"content":"                    internship applications.\u003c/p\u003e"},{"lineNumber":98,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":99,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":100,"author":{"gitId":"gerhean"},"content":"                \u003cp\u003eWith the Internship Diary, you can leave behind your troubling times trying to to organize, track,"},{"lineNumber":101,"author":{"gitId":"gerhean"},"content":"                    and review all your past and upcoming internship applications."},{"lineNumber":102,"author":{"gitId":"gerhean"},"content":"                    The application is designed and optimized for users who can type quickly, and provides an elegant"},{"lineNumber":103,"author":{"gitId":"gerhean"},"content":"                    design which is easy on the eyes.\u003c/p\u003e"},{"lineNumber":104,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":105,"author":{"gitId":"gerhean"},"content":"        \u003c/div\u003e"},{"lineNumber":106,"author":{"gitId":"gerhean"},"content":"    \u003c/div\u003e"},{"lineNumber":107,"author":{"gitId":"gerhean"},"content":"    \u003cdiv class\u003d\"sect1\"\u003e"},{"lineNumber":108,"author":{"gitId":"gerhean"},"content":"        \u003ch2 id\u003d\"quick-start\"\u003e\u003ca class\u003d\"link\" href\u003d\"#quick-start\"\u003e2. Quick Start\u003c/a\u003e\u003c/h2\u003e"},{"lineNumber":109,"author":{"gitId":"gerhean"},"content":"        \u003cdiv class\u003d\"sectionbody\"\u003e"},{"lineNumber":110,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":111,"author":{"gitId":"gerhean"},"content":"                \u003cp\u003eHere are the steps to get you started on using Internship Diary:\u003c/p\u003e"},{"lineNumber":112,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":113,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"olist arabic\"\u003e"},{"lineNumber":114,"author":{"gitId":"gerhean"},"content":"                \u003col class\u003d\"arabic\"\u003e"},{"lineNumber":115,"author":{"gitId":"gerhean"},"content":"                    \u003cli\u003e"},{"lineNumber":116,"author":{"gitId":"gerhean"},"content":"                        \u003cp\u003eEnsure you have Java \u003ccode\u003e11\u003c/code\u003e or above installed in your Computer.\u003c/p\u003e"},{"lineNumber":117,"author":{"gitId":"gerhean"},"content":"                    \u003c/li\u003e"},{"lineNumber":118,"author":{"gitId":"gerhean"},"content":"                    \u003cli\u003e"},{"lineNumber":119,"author":{"gitId":"gerhean"},"content":"                        \u003cp\u003eCopy the file to the folder you want to use as the home folder for your Internship Diary.\u003c/p\u003e"},{"lineNumber":120,"author":{"gitId":"gerhean"},"content":"                    \u003c/li\u003e"},{"lineNumber":121,"author":{"gitId":"gerhean"},"content":"                    \u003cli\u003e"},{"lineNumber":122,"author":{"gitId":"gerhean"},"content":"                        \u003cp\u003eDouble-click the file to start the app."},{"lineNumber":123,"author":{"gitId":"gerhean"},"content":"                            The Graphical User Interface (GUI) should appear in a few seconds.\u003c/p\u003e"},{"lineNumber":124,"author":{"gitId":"gerhean"},"content":"                        \u003cdiv class\u003d\"imageblock\"\u003e"},{"lineNumber":125,"author":{"gitId":"gerhean"},"content":"                            \u003cdiv class\u003d\"content\"\u003e"},{"lineNumber":126,"author":{"gitId":"gerhean"},"content":"                                \u003cimg src\u003d\"images/Ui.png\" alt\u003d\"Ui\" width\u003d\"790\"\u003e"},{"lineNumber":127,"author":{"gitId":"gerhean"},"content":"                            \u003c/div\u003e"},{"lineNumber":128,"author":{"gitId":"gerhean"},"content":"                            \u003cdiv class\u003d\"title\"\u003eFigure 1. Graphical User Interface of Internship Diary\u003c/div\u003e"},{"lineNumber":129,"author":{"gitId":"gerhean"},"content":"                        \u003c/div\u003e"},{"lineNumber":130,"author":{"gitId":"gerhean"},"content":"                    \u003c/li\u003e"},{"lineNumber":131,"author":{"gitId":"gerhean"},"content":"                    \u003cli\u003e"},{"lineNumber":132,"author":{"gitId":"gerhean"},"content":"                        \u003cp\u003eTest the application by typing the command \u003cstrong\u003e\u003ccode\u003ehelp\u003c/code\u003e\u003c/strong\u003e in the command"},{"lineNumber":133,"author":{"gitId":"gerhean"},"content":"                            box and pressing \u003ckbd\u003eEnter\u003c/kbd\u003e to execute it. This should open the help window.\u003cbr\u003e\u003c/p\u003e"},{"lineNumber":134,"author":{"gitId":"gerhean"},"content":"                    \u003c/li\u003e"},{"lineNumber":135,"author":{"gitId":"gerhean"},"content":"                    \u003cli\u003e"},{"lineNumber":136,"author":{"gitId":"gerhean"},"content":"                        \u003cp\u003eRefer to \u003ca href\u003d\"#Commands\"\u003eSection 4, \u0026#8220;Commands\u0026#8221;\u003c/a\u003e to find out what other"},{"lineNumber":137,"author":{"gitId":"gerhean"},"content":"                            commands you can use on Internship Diary.\u003c/p\u003e"},{"lineNumber":138,"author":{"gitId":"gerhean"},"content":"                    \u003c/li\u003e"},{"lineNumber":139,"author":{"gitId":"gerhean"},"content":"                \u003c/ol\u003e"},{"lineNumber":140,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":141,"author":{"gitId":"gerhean"},"content":"        \u003c/div\u003e"},{"lineNumber":142,"author":{"gitId":"gerhean"},"content":"    \u003c/div\u003e"},{"lineNumber":143,"author":{"gitId":"gerhean"},"content":"    \u003cdiv class\u003d\"sect1\"\u003e"},{"lineNumber":144,"author":{"gitId":"gerhean"},"content":"        \u003ch2 id\u003d\"key-information\"\u003e\u003ca class\u003d\"link\" href\u003d\"#key-information\"\u003e3. Key Information\u003c/a\u003e\u003c/h2\u003e"},{"lineNumber":145,"author":{"gitId":"gerhean"},"content":"        \u003cdiv class\u003d\"sectionbody\"\u003e"},{"lineNumber":146,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":147,"author":{"gitId":"gerhean"},"content":"                \u003cp\u003eHere are some important information you should know.\u003c/p\u003e"},{"lineNumber":148,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":149,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"sect2\"\u003e"},{"lineNumber":150,"author":{"gitId":"gerhean"},"content":"                \u003ch3 id\u003d\"graphical-user-interface\"\u003e\u003ca class\u003d\"link\" href\u003d\"#graphical-user-interface\"\u003e3.1. Graphical user"},{"lineNumber":151,"author":{"gitId":"gerhean"},"content":"                    interface\u003c/a\u003e\u003c/h3\u003e"},{"lineNumber":152,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":153,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eThe above image illustrates the major graphical components of \u003cstrong\u003eInternship Diary\u003c/strong\u003e"},{"lineNumber":154,"author":{"gitId":"gerhean"},"content":"                        to help you navigate our application.\u003c/p\u003e"},{"lineNumber":155,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":156,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":157,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"sect2\"\u003e"},{"lineNumber":158,"author":{"gitId":"gerhean"},"content":"                \u003ch3 id\u003d\"fields\"\u003e\u003ca class\u003d\"link\" href\u003d\"#fields\"\u003e3.2. Structure of internship application\u003c/a\u003e\u003c/h3\u003e"},{"lineNumber":159,"author":{"gitId":"gerhean"},"content":"                \u003ctable class\u003d\"tableblock frame-all grid-all spread\"\u003e"},{"lineNumber":160,"author":{"gitId":"gerhean"},"content":"                    \u003ccolgroup\u003e"},{"lineNumber":161,"author":{"gitId":"gerhean"},"content":"                        \u003ccol style\u003d\"width: 10%;\"\u003e"},{"lineNumber":162,"author":{"gitId":"gerhean"},"content":"                        \u003ccol style\u003d\"width: 10%;\"\u003e"},{"lineNumber":163,"author":{"gitId":"gerhean"},"content":"                        \u003ccol style\u003d\"width: 10%;\"\u003e"},{"lineNumber":164,"author":{"gitId":"gerhean"},"content":"                        \u003ccol style\u003d\"width: 10%;\"\u003e"},{"lineNumber":165,"author":{"gitId":"gerhean"},"content":"                        \u003ccol style\u003d\"width: 60%;\"\u003e"},{"lineNumber":166,"author":{"gitId":"gerhean"},"content":"                    \u003c/colgroup\u003e"},{"lineNumber":167,"author":{"gitId":"gerhean"},"content":"                    \u003cthead\u003e"},{"lineNumber":168,"author":{"gitId":"gerhean"},"content":"                    \u003ctr\u003e"},{"lineNumber":169,"author":{"gitId":"gerhean"},"content":"                        \u003cth class\u003d\"tableblock halign-left valign-top\"\u003e\u003cstrong\u003eField\u003c/strong\u003e\u003c/th\u003e"},{"lineNumber":170,"author":{"gitId":"gerhean"},"content":"                        \u003cth class\u003d\"tableblock halign-left valign-top\"\u003e\u003cstrong\u003ePrefix\u003c/strong\u003e\u003c/th\u003e"},{"lineNumber":171,"author":{"gitId":"gerhean"},"content":"                        \u003cth class\u003d\"tableblock halign-left valign-top\"\u003eCan Be Empty?\u003c/th\u003e"},{"lineNumber":172,"author":{"gitId":"gerhean"},"content":"                        \u003cth class\u003d\"tableblock halign-left valign-top\"\u003eMax Number of Values\u003c/th\u003e"},{"lineNumber":173,"author":{"gitId":"gerhean"},"content":"                        \u003cth class\u003d\"tableblock halign-left valign-top\"\u003eRemarks\u003c/th\u003e"},{"lineNumber":174,"author":{"gitId":"gerhean"},"content":"                    \u003c/tr\u003e"},{"lineNumber":175,"author":{"gitId":"gerhean"},"content":"                    \u003c/thead\u003e"},{"lineNumber":176,"author":{"gitId":"gerhean"},"content":"                    \u003ctbody\u003e"},{"lineNumber":177,"author":{"gitId":"gerhean"},"content":"                    \u003ctr\u003e"},{"lineNumber":178,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e"},{"lineNumber":179,"author":{"gitId":"gerhean"},"content":"                            \u003cdiv\u003e"},{"lineNumber":180,"author":{"gitId":"gerhean"},"content":"                                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":181,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eCompany\u003c/p\u003e"},{"lineNumber":182,"author":{"gitId":"gerhean"},"content":"                                \u003c/div\u003e"},{"lineNumber":183,"author":{"gitId":"gerhean"},"content":"                            \u003c/div\u003e"},{"lineNumber":184,"author":{"gitId":"gerhean"},"content":"                        \u003c/td\u003e"},{"lineNumber":185,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003ec/\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":186,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eNo\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":187,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e1\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":188,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eNo restrictions on"},{"lineNumber":189,"author":{"gitId":"gerhean"},"content":"                            input.\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":190,"author":{"gitId":"gerhean"},"content":"                    \u003c/tr\u003e"},{"lineNumber":191,"author":{"gitId":"gerhean"},"content":"                    \u003ctr\u003e"},{"lineNumber":192,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e"},{"lineNumber":193,"author":{"gitId":"gerhean"},"content":"                            \u003cdiv\u003e"},{"lineNumber":194,"author":{"gitId":"gerhean"},"content":"                                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":195,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eRole\u003c/p\u003e"},{"lineNumber":196,"author":{"gitId":"gerhean"},"content":"                                \u003c/div\u003e"},{"lineNumber":197,"author":{"gitId":"gerhean"},"content":"                            \u003c/div\u003e"},{"lineNumber":198,"author":{"gitId":"gerhean"},"content":"                        \u003c/td\u003e"},{"lineNumber":199,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003er/\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":200,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eNo\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":201,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e1\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":202,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eNo restrictions on"},{"lineNumber":203,"author":{"gitId":"gerhean"},"content":"                            input.\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":204,"author":{"gitId":"gerhean"},"content":"                    \u003c/tr\u003e"},{"lineNumber":205,"author":{"gitId":"gerhean"},"content":"                    \u003ctr\u003e"},{"lineNumber":206,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e"},{"lineNumber":207,"author":{"gitId":"gerhean"},"content":"                            \u003cdiv\u003e"},{"lineNumber":208,"author":{"gitId":"gerhean"},"content":"                                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":209,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eAddress\u003c/p\u003e"},{"lineNumber":210,"author":{"gitId":"gerhean"},"content":"                                \u003c/div\u003e"},{"lineNumber":211,"author":{"gitId":"gerhean"},"content":"                            \u003c/div\u003e"},{"lineNumber":212,"author":{"gitId":"gerhean"},"content":"                        \u003c/td\u003e"},{"lineNumber":213,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003ea/\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":214,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eYes\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":215,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e1\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":216,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eNo restrictions on"},{"lineNumber":217,"author":{"gitId":"gerhean"},"content":"                            input.\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":218,"author":{"gitId":"gerhean"},"content":"                    \u003c/tr\u003e"},{"lineNumber":219,"author":{"gitId":"gerhean"},"content":"                    \u003ctr\u003e"},{"lineNumber":220,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e"},{"lineNumber":221,"author":{"gitId":"gerhean"},"content":"                            \u003cdiv\u003e"},{"lineNumber":222,"author":{"gitId":"gerhean"},"content":"                                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":223,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003ePhone\u003c/p\u003e"},{"lineNumber":224,"author":{"gitId":"gerhean"},"content":"                                \u003c/div\u003e"},{"lineNumber":225,"author":{"gitId":"gerhean"},"content":"                            \u003c/div\u003e"},{"lineNumber":226,"author":{"gitId":"gerhean"},"content":"                        \u003c/td\u003e"},{"lineNumber":227,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003ep/\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":228,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eYes\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":229,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e1\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":230,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\"+\" at the start is"},{"lineNumber":231,"author":{"gitId":"gerhean"},"content":"                            optional. Must have between 4 and 15 digits if not empty.\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":232,"author":{"gitId":"gerhean"},"content":"                    \u003c/tr\u003e"},{"lineNumber":233,"author":{"gitId":"gerhean"},"content":"                    \u003ctr\u003e"},{"lineNumber":234,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e"},{"lineNumber":235,"author":{"gitId":"gerhean"},"content":"                            \u003cdiv\u003e"},{"lineNumber":236,"author":{"gitId":"gerhean"},"content":"                                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":237,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eEmail\u003c/p\u003e"},{"lineNumber":238,"author":{"gitId":"gerhean"},"content":"                                \u003c/div\u003e"},{"lineNumber":239,"author":{"gitId":"gerhean"},"content":"                            \u003c/div\u003e"},{"lineNumber":240,"author":{"gitId":"gerhean"},"content":"                        \u003c/td\u003e"},{"lineNumber":241,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003ee/\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":242,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eYes\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":243,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e1\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":244,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eEmail should be of format"},{"lineNumber":245,"author":{"gitId":"gerhean"},"content":"                            \"LOCAL@DOMAIN\". LOCAL consists of at least 1 character."},{"lineNumber":246,"author":{"gitId":"gerhean"},"content":"                            DOMAIN starts and ends with alphanumeric characters, and consists of alphanumeric"},{"lineNumber":247,"author":{"gitId":"gerhean"},"content":"                            characters, periods or hyphens for the characters in between.\u003c/p\u003e"},{"lineNumber":248,"author":{"gitId":"gerhean"},"content":"                            \u003cp class\u003d\"tableblock\"\u003eE.g. \u003ca href\u003d\"mailto:example@example.com\"\u003eexample@example.com\u003c/a\u003e\u003c/p\u003e"},{"lineNumber":249,"author":{"gitId":"gerhean"},"content":"                        \u003c/td\u003e"},{"lineNumber":250,"author":{"gitId":"gerhean"},"content":"                    \u003c/tr\u003e"},{"lineNumber":251,"author":{"gitId":"gerhean"},"content":"                    \u003ctr\u003e"},{"lineNumber":252,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e"},{"lineNumber":253,"author":{"gitId":"gerhean"},"content":"                            \u003cdiv\u003e"},{"lineNumber":254,"author":{"gitId":"gerhean"},"content":"                                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":255,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eApplication Date\u003c/p\u003e"},{"lineNumber":256,"author":{"gitId":"gerhean"},"content":"                                \u003c/div\u003e"},{"lineNumber":257,"author":{"gitId":"gerhean"},"content":"                            \u003c/div\u003e"},{"lineNumber":258,"author":{"gitId":"gerhean"},"content":"                        \u003c/td\u003e"},{"lineNumber":259,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003ed/\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":260,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eYes\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":261,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e1\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":262,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eMust be a valid date of the"},{"lineNumber":263,"author":{"gitId":"gerhean"},"content":"                            form \u003ccode\u003eday-month-year\u003c/code\u003e. Whitespace and \u003ccode\u003e/\u003c/code\u003e are also supported"},{"lineNumber":264,"author":{"gitId":"gerhean"},"content":"                            separators. If year is not given, will default to the current year.\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":265,"author":{"gitId":"gerhean"},"content":"                    \u003c/tr\u003e"},{"lineNumber":266,"author":{"gitId":"gerhean"},"content":"                    \u003ctr\u003e"},{"lineNumber":267,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e"},{"lineNumber":268,"author":{"gitId":"gerhean"},"content":"                            \u003cdiv\u003e"},{"lineNumber":269,"author":{"gitId":"gerhean"},"content":"                                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":270,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003ePriority\u003c/p\u003e"},{"lineNumber":271,"author":{"gitId":"gerhean"},"content":"                                \u003c/div\u003e"},{"lineNumber":272,"author":{"gitId":"gerhean"},"content":"                            \u003c/div\u003e"},{"lineNumber":273,"author":{"gitId":"gerhean"},"content":"                        \u003c/td\u003e"},{"lineNumber":274,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003ew/\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":275,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eNo\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":276,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e1\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":277,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eMust be an integer from 0 to"},{"lineNumber":278,"author":{"gitId":"gerhean"},"content":"                            10 (inclusive). If left empty, default to 5.\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":279,"author":{"gitId":"gerhean"},"content":"                    \u003c/tr\u003e"},{"lineNumber":280,"author":{"gitId":"gerhean"},"content":"                    \u003ctr\u003e"},{"lineNumber":281,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e"},{"lineNumber":282,"author":{"gitId":"gerhean"},"content":"                            \u003cdiv\u003e"},{"lineNumber":283,"author":{"gitId":"gerhean"},"content":"                                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":284,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eStatus\u003c/p\u003e"},{"lineNumber":285,"author":{"gitId":"gerhean"},"content":"                                \u003c/div\u003e"},{"lineNumber":286,"author":{"gitId":"gerhean"},"content":"                            \u003c/div\u003e"},{"lineNumber":287,"author":{"gitId":"gerhean"},"content":"                        \u003c/td\u003e"},{"lineNumber":288,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003es/\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":289,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eNo\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":290,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e1\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":291,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003ePossible values listed in \u003ca"},{"lineNumber":292,"author":{"gitId":"gerhean"},"content":"                                href\u003d\"#valid-status\"\u003eSection 3.3, \u0026#8220;Valid status\u0026#8221;\u003c/a\u003e. The first letter of"},{"lineNumber":293,"author":{"gitId":"gerhean"},"content":"                            the Status can be"},{"lineNumber":294,"author":{"gitId":"gerhean"},"content":"                            used to input the respective Status values.\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":295,"author":{"gitId":"gerhean"},"content":"                    \u003c/tr\u003e"},{"lineNumber":296,"author":{"gitId":"gerhean"},"content":"                    \u003ctr\u003e"},{"lineNumber":297,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e"},{"lineNumber":298,"author":{"gitId":"gerhean"},"content":"                            \u003cdiv\u003e"},{"lineNumber":299,"author":{"gitId":"gerhean"},"content":"                                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":300,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eInterviews\u003c/p\u003e"},{"lineNumber":301,"author":{"gitId":"gerhean"},"content":"                                \u003c/div\u003e"},{"lineNumber":302,"author":{"gitId":"gerhean"},"content":"                            \u003c/div\u003e"},{"lineNumber":303,"author":{"gitId":"gerhean"},"content":"                        \u003c/td\u003e"},{"lineNumber":304,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eNot applicable\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":305,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eYes\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":306,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eNo limits\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":307,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eSee below, \u003ca"},{"lineNumber":308,"author":{"gitId":"gerhean"},"content":"                                href\u003d\"#interview\"\u003eSection 3.4, \u0026#8220;Structure of interview\u0026#8221;\u003c/a\u003e\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":309,"author":{"gitId":"gerhean"},"content":"                    \u003c/tr\u003e"},{"lineNumber":310,"author":{"gitId":"gerhean"},"content":"                    \u003c/tbody\u003e"},{"lineNumber":311,"author":{"gitId":"gerhean"},"content":"                \u003c/table\u003e"},{"lineNumber":312,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":313,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"sect2\"\u003e"},{"lineNumber":314,"author":{"gitId":"gerhean"},"content":"                \u003ch3 id\u003d\"valid-status\"\u003e\u003ca class\u003d\"link\" href\u003d\"#valid-status\"\u003e3.3. Valid status\u003c/a\u003e\u003c/h3\u003e"},{"lineNumber":315,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":316,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eThe following are the valid statuses for internship application, listed in sort order:\u003c/p\u003e"},{"lineNumber":317,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":318,"author":{"gitId":"gerhean"},"content":"                \u003ctable class\u003d\"tableblock frame-all grid-all spread\"\u003e"},{"lineNumber":319,"author":{"gitId":"gerhean"},"content":"                    \u003ccolgroup\u003e"},{"lineNumber":320,"author":{"gitId":"gerhean"},"content":"                        \u003ccol style\u003d\"width: 5.8823%;\"\u003e"},{"lineNumber":321,"author":{"gitId":"gerhean"},"content":"                        \u003ccol style\u003d\"width: 11.7647%;\"\u003e"},{"lineNumber":322,"author":{"gitId":"gerhean"},"content":"                        \u003ccol style\u003d\"width: 82.353%;\"\u003e"},{"lineNumber":323,"author":{"gitId":"gerhean"},"content":"                    \u003c/colgroup\u003e"},{"lineNumber":324,"author":{"gitId":"gerhean"},"content":"                    \u003ctbody\u003e"},{"lineNumber":325,"author":{"gitId":"gerhean"},"content":"                    \u003ctr\u003e"},{"lineNumber":326,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e1.\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":327,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003ewishlist\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":328,"author":{"gitId":"gerhean"},"content":"                        \u003c/td\u003e"},{"lineNumber":329,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eAn internship application"},{"lineNumber":330,"author":{"gitId":"gerhean"},"content":"                            that you are planning to apply for.\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":331,"author":{"gitId":"gerhean"},"content":"                    \u003c/tr\u003e"},{"lineNumber":332,"author":{"gitId":"gerhean"},"content":"                    \u003ctr\u003e"},{"lineNumber":333,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e2.\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":334,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003eapplied\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":335,"author":{"gitId":"gerhean"},"content":"                        \u003c/td\u003e"},{"lineNumber":336,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eAn internship application"},{"lineNumber":337,"author":{"gitId":"gerhean"},"content":"                            that you have already applied for.\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":338,"author":{"gitId":"gerhean"},"content":"                    \u003c/tr\u003e"},{"lineNumber":339,"author":{"gitId":"gerhean"},"content":"                    \u003ctr\u003e"},{"lineNumber":340,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e3.\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":341,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003einterview\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":342,"author":{"gitId":"gerhean"},"content":"                        \u003c/td\u003e"},{"lineNumber":343,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eAn internship application"},{"lineNumber":344,"author":{"gitId":"gerhean"},"content":"                            that you have applied to, and have been invited to an interview.\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":345,"author":{"gitId":"gerhean"},"content":"                    \u003c/tr\u003e"},{"lineNumber":346,"author":{"gitId":"gerhean"},"content":"                    \u003ctr\u003e"},{"lineNumber":347,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e4.\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":348,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003eoffered\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":349,"author":{"gitId":"gerhean"},"content":"                        \u003c/td\u003e"},{"lineNumber":350,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eAn internship application"},{"lineNumber":351,"author":{"gitId":"gerhean"},"content":"                            that you have received a job offer for.\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":352,"author":{"gitId":"gerhean"},"content":"                    \u003c/tr\u003e"},{"lineNumber":353,"author":{"gitId":"gerhean"},"content":"                    \u003ctr\u003e"},{"lineNumber":354,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e5.\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":355,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003erejected\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":356,"author":{"gitId":"gerhean"},"content":"                        \u003c/td\u003e"},{"lineNumber":357,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eAn internship application"},{"lineNumber":358,"author":{"gitId":"gerhean"},"content":"                            that you have been rejected for.\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":359,"author":{"gitId":"gerhean"},"content":"                    \u003c/tr\u003e"},{"lineNumber":360,"author":{"gitId":"gerhean"},"content":"                    \u003ctr\u003e"},{"lineNumber":361,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e6.\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":362,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003eghosted\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":363,"author":{"gitId":"gerhean"},"content":"                        \u003c/td\u003e"},{"lineNumber":364,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eAn internship application"},{"lineNumber":365,"author":{"gitId":"gerhean"},"content":"                            that you have heard no reply from for a long time.\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":366,"author":{"gitId":"gerhean"},"content":"                    \u003c/tr\u003e"},{"lineNumber":367,"author":{"gitId":"gerhean"},"content":"                    \u003c/tbody\u003e"},{"lineNumber":368,"author":{"gitId":"gerhean"},"content":"                \u003c/table\u003e"},{"lineNumber":369,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":370,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"sect2\"\u003e"},{"lineNumber":371,"author":{"gitId":"gerhean"},"content":"                \u003ch3 id\u003d\"interview\"\u003e\u003ca class\u003d\"link\" href\u003d\"#interview\"\u003e3.4. Structure of interview\u003c/a\u003e\u003c/h3\u003e"},{"lineNumber":372,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":373,"author":{"gitId":"gerhean"},"content":"                    \u003cul\u003e"},{"lineNumber":374,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":375,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003eInterview\u003c/code\u003e represents an interview that you have been given by the company"},{"lineNumber":376,"author":{"gitId":"gerhean"},"content":"                                you are applying to."},{"lineNumber":377,"author":{"gitId":"gerhean"},"content":"                                It exists within an \u003ccode\u003eInternshipApplication\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":378,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":379,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":380,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003eCurrently there are two types of \u003ccode\u003eInterview\u003c/code\u003e provided by the Internship Diary:"},{"lineNumber":381,"author":{"gitId":"gerhean"},"content":"                            \u003c/p\u003e"},{"lineNumber":382,"author":{"gitId":"gerhean"},"content":"                            \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":383,"author":{"gitId":"gerhean"},"content":"                                \u003cul\u003e"},{"lineNumber":384,"author":{"gitId":"gerhean"},"content":"                                    \u003cli\u003e"},{"lineNumber":385,"author":{"gitId":"gerhean"},"content":"                                        \u003cp\u003eOnline Interview\u0026#8201;\u0026#8212;\u0026#8201;No address is needed.\u003c/p\u003e"},{"lineNumber":386,"author":{"gitId":"gerhean"},"content":"                                    \u003c/li\u003e"},{"lineNumber":387,"author":{"gitId":"gerhean"},"content":"                                    \u003cli\u003e"},{"lineNumber":388,"author":{"gitId":"gerhean"},"content":"                                        \u003cp\u003eOffline Interview\u0026#8201;\u0026#8212;\u0026#8201;Address must be provided when interview"},{"lineNumber":389,"author":{"gitId":"gerhean"},"content":"                                            is added or modified from online to offline.\u003c/p\u003e"},{"lineNumber":390,"author":{"gitId":"gerhean"},"content":"                                    \u003c/li\u003e"},{"lineNumber":391,"author":{"gitId":"gerhean"},"content":"                                \u003c/ul\u003e"},{"lineNumber":392,"author":{"gitId":"gerhean"},"content":"                            \u003c/div\u003e"},{"lineNumber":393,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":394,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":395,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003eYou can specify what type of interview you want to add by using the"},{"lineNumber":396,"author":{"gitId":"gerhean"},"content":"                                \u003ccode\u003eo/IS_ONLINE\u003c/code\u003e prefix.\u003c/p\u003e"},{"lineNumber":397,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":398,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":399,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003eIn order to facilitate your tracking of interviews, there are no restriction to what"},{"lineNumber":400,"author":{"gitId":"gerhean"},"content":"                                \u003ccode\u003eInternshipApplication\u003c/code\u003e"},{"lineNumber":401,"author":{"gitId":"gerhean"},"content":"                                you can add your interview to.\u003cbr\u003e"},{"lineNumber":402,"author":{"gitId":"gerhean"},"content":"                                Therefore, it is possible for you to add an interview to an"},{"lineNumber":403,"author":{"gitId":"gerhean"},"content":"                                \u003ccode\u003eInternshipApplication\u003c/code\u003e with any status.\u003c/p\u003e"},{"lineNumber":404,"author":{"gitId":"gerhean"},"content":"                            \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":405,"author":{"gitId":"gerhean"},"content":"                                \u003cul\u003e"},{"lineNumber":406,"author":{"gitId":"gerhean"},"content":"                                    \u003cli\u003e"},{"lineNumber":407,"author":{"gitId":"gerhean"},"content":"                                        \u003cp\u003eThis is so that just in case you forgot to record an interview after you"},{"lineNumber":408,"author":{"gitId":"gerhean"},"content":"                                            already got offered or rejected,"},{"lineNumber":409,"author":{"gitId":"gerhean"},"content":"                                            you could still add it into the Internship Diary for your personal"},{"lineNumber":410,"author":{"gitId":"gerhean"},"content":"                                            tracking.\u003c/p\u003e"},{"lineNumber":411,"author":{"gitId":"gerhean"},"content":"                                    \u003c/li\u003e"},{"lineNumber":412,"author":{"gitId":"gerhean"},"content":"                                    \u003cli\u003e"},{"lineNumber":413,"author":{"gitId":"gerhean"},"content":"                                        \u003cp\u003eIn v2.0, we will create a prompt on whether you want to automatically change"},{"lineNumber":414,"author":{"gitId":"gerhean"},"content":"                                            your \u003ccode\u003eInternshipApplication\u003c/code\u003e status"},{"lineNumber":415,"author":{"gitId":"gerhean"},"content":"                                            to \u0027interview\u0027.\u003c/p\u003e"},{"lineNumber":416,"author":{"gitId":"gerhean"},"content":"                                    \u003c/li\u003e"},{"lineNumber":417,"author":{"gitId":"gerhean"},"content":"                                \u003c/ul\u003e"},{"lineNumber":418,"author":{"gitId":"gerhean"},"content":"                            \u003c/div\u003e"},{"lineNumber":419,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":420,"author":{"gitId":"gerhean"},"content":"                    \u003c/ul\u003e"},{"lineNumber":421,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":422,"author":{"gitId":"gerhean"},"content":"                \u003ctable class\u003d\"tableblock frame-all grid-all spread\"\u003e"},{"lineNumber":423,"author":{"gitId":"gerhean"},"content":"                    \u003ccolgroup\u003e"},{"lineNumber":424,"author":{"gitId":"gerhean"},"content":"                        \u003ccol style\u003d\"width: 11.1111%;\"\u003e"},{"lineNumber":425,"author":{"gitId":"gerhean"},"content":"                        \u003ccol style\u003d\"width: 11.1111%;\"\u003e"},{"lineNumber":426,"author":{"gitId":"gerhean"},"content":"                        \u003ccol style\u003d\"width: 11.1111%;\"\u003e"},{"lineNumber":427,"author":{"gitId":"gerhean"},"content":"                        \u003ccol style\u003d\"width: 11.1111%;\"\u003e"},{"lineNumber":428,"author":{"gitId":"gerhean"},"content":"                        \u003ccol style\u003d\"width: 55.5556%;\"\u003e"},{"lineNumber":429,"author":{"gitId":"gerhean"},"content":"                    \u003c/colgroup\u003e"},{"lineNumber":430,"author":{"gitId":"gerhean"},"content":"                    \u003cthead\u003e"},{"lineNumber":431,"author":{"gitId":"gerhean"},"content":"                    \u003ctr\u003e"},{"lineNumber":432,"author":{"gitId":"gerhean"},"content":"                        \u003cth class\u003d\"tableblock halign-left valign-top\"\u003e\u003cstrong\u003eField\u003c/strong\u003e\u003c/th\u003e"},{"lineNumber":433,"author":{"gitId":"gerhean"},"content":"                        \u003cth class\u003d\"tableblock halign-left valign-top\"\u003e\u003cstrong\u003ePrefix\u003c/strong\u003e\u003c/th\u003e"},{"lineNumber":434,"author":{"gitId":"gerhean"},"content":"                        \u003cth class\u003d\"tableblock halign-left valign-top\"\u003eCan Be Empty?\u003c/th\u003e"},{"lineNumber":435,"author":{"gitId":"gerhean"},"content":"                        \u003cth class\u003d\"tableblock halign-left valign-top\"\u003eMax Number of Values\u003c/th\u003e"},{"lineNumber":436,"author":{"gitId":"gerhean"},"content":"                        \u003cth class\u003d\"tableblock halign-left valign-top\"\u003eRemarks\u003c/th\u003e"},{"lineNumber":437,"author":{"gitId":"gerhean"},"content":"                    \u003c/tr\u003e"},{"lineNumber":438,"author":{"gitId":"gerhean"},"content":"                    \u003c/thead\u003e"},{"lineNumber":439,"author":{"gitId":"gerhean"},"content":"                    \u003ctbody\u003e"},{"lineNumber":440,"author":{"gitId":"gerhean"},"content":"                    \u003ctr\u003e"},{"lineNumber":441,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e"},{"lineNumber":442,"author":{"gitId":"gerhean"},"content":"                            \u003cdiv\u003e"},{"lineNumber":443,"author":{"gitId":"gerhean"},"content":"                                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":444,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eisOnline\u003c/p\u003e"},{"lineNumber":445,"author":{"gitId":"gerhean"},"content":"                                \u003c/div\u003e"},{"lineNumber":446,"author":{"gitId":"gerhean"},"content":"                            \u003c/div\u003e"},{"lineNumber":447,"author":{"gitId":"gerhean"},"content":"                        \u003c/td\u003e"},{"lineNumber":448,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eo/\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":449,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eNo\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":450,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e1\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":451,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eCan only be"},{"lineNumber":452,"author":{"gitId":"gerhean"},"content":"                            \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":453,"author":{"gitId":"gerhean"},"content":"                    \u003c/tr\u003e"},{"lineNumber":454,"author":{"gitId":"gerhean"},"content":"                    \u003ctr\u003e"},{"lineNumber":455,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e"},{"lineNumber":456,"author":{"gitId":"gerhean"},"content":"                            \u003cdiv\u003e"},{"lineNumber":457,"author":{"gitId":"gerhean"},"content":"                                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":458,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eInterview Date\u003c/p\u003e"},{"lineNumber":459,"author":{"gitId":"gerhean"},"content":"                                \u003c/div\u003e"},{"lineNumber":460,"author":{"gitId":"gerhean"},"content":"                            \u003c/div\u003e"},{"lineNumber":461,"author":{"gitId":"gerhean"},"content":"                        \u003c/td\u003e"},{"lineNumber":462,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003ed/\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":463,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eNo\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":464,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e1\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":465,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eMust be a valid date of the"},{"lineNumber":466,"author":{"gitId":"gerhean"},"content":"                            form \u003ccode\u003eday-month-year\u003c/code\u003e. Whitespace and \u003ccode\u003e/\u003c/code\u003e are also supported"},{"lineNumber":467,"author":{"gitId":"gerhean"},"content":"                            separators. If year is not given, will default to the current year.\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":468,"author":{"gitId":"gerhean"},"content":"                    \u003c/tr\u003e"},{"lineNumber":469,"author":{"gitId":"gerhean"},"content":"                    \u003ctr\u003e"},{"lineNumber":470,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e"},{"lineNumber":471,"author":{"gitId":"gerhean"},"content":"                            \u003cdiv\u003e"},{"lineNumber":472,"author":{"gitId":"gerhean"},"content":"                                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":473,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eInterview Address\u003c/p\u003e"},{"lineNumber":474,"author":{"gitId":"gerhean"},"content":"                                \u003c/div\u003e"},{"lineNumber":475,"author":{"gitId":"gerhean"},"content":"                            \u003c/div\u003e"},{"lineNumber":476,"author":{"gitId":"gerhean"},"content":"                        \u003c/td\u003e"},{"lineNumber":477,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003ea/\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":478,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eonline: yes offline:"},{"lineNumber":479,"author":{"gitId":"gerhean"},"content":"                            compulsory\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":480,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e1\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":481,"author":{"gitId":"gerhean"},"content":"                        \u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eNo restrictions on"},{"lineNumber":482,"author":{"gitId":"gerhean"},"content":"                            input.\u003c/p\u003e\u003c/td\u003e"},{"lineNumber":483,"author":{"gitId":"gerhean"},"content":"                    \u003c/tr\u003e"},{"lineNumber":484,"author":{"gitId":"gerhean"},"content":"                    \u003c/tbody\u003e"},{"lineNumber":485,"author":{"gitId":"gerhean"},"content":"                \u003c/table\u003e"},{"lineNumber":486,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":487,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"sect2\"\u003e"},{"lineNumber":488,"author":{"gitId":"gerhean"},"content":"                \u003ch3 id\u003d\"command-format\"\u003e\u003ca class\u003d\"link\" href\u003d\"#command-format\"\u003e3.5. Command format\u003c/a\u003e\u003c/h3\u003e"},{"lineNumber":489,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":490,"author":{"gitId":"gerhean"},"content":"                    \u003cul\u003e"},{"lineNumber":491,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":492,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003eWords in \u003ccode\u003eUPPER_CASE\u003c/code\u003e are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":493,"author":{"gitId":"gerhean"},"content":"                                (e.g. in \u003ccode\u003eadd n/COMPANY_NAME\u003c/code\u003e, \u003ccode\u003eCOMPANY_NAME\u003c/code\u003e is a parameter which"},{"lineNumber":494,"author":{"gitId":"gerhean"},"content":"                                can be used as \u003ccode\u003eadd c/Google\u003c/code\u003e)\u003c/p\u003e"},{"lineNumber":495,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":496,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":497,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003eItems in square brackets are optional.\u003cbr\u003e"},{"lineNumber":498,"author":{"gitId":"gerhean"},"content":"                                (e.g \u003ccode\u003ec/COMPANY_NAME [w/PRIORITY]\u003c/code\u003e can be used as \u003ccode\u003ec/Google w/5\u003c/code\u003e"},{"lineNumber":499,"author":{"gitId":"gerhean"},"content":"                                or as \u003ccode\u003ec/Google\u003c/code\u003e)\u003c/p\u003e"},{"lineNumber":500,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":501,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":502,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003eItems with \u003ccode\u003e…\u003c/code\u003e​ after them can be used multiple times including zero"},{"lineNumber":503,"author":{"gitId":"gerhean"},"content":"                                times.\u003cbr\u003e"},{"lineNumber":504,"author":{"gitId":"gerhean"},"content":"                                (e.g. \u003ccode\u003edelete INDEX, [INDEX],\u0026#8230;\u0026#8203;\u003c/code\u003e can be used as \u003ccode\u003edelete"},{"lineNumber":505,"author":{"gitId":"gerhean"},"content":"                                    1\u003c/code\u003e or \u003ccode\u003edelete 1, 2, 3\u003c/code\u003e)\u003c/p\u003e"},{"lineNumber":506,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":507,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":508,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003eParameters can be entered in any order.\u003cbr\u003e"},{"lineNumber":509,"author":{"gitId":"gerhean"},"content":"                                (e.g. if the command specifies \u003ccode\u003es/STATUS r/ROLE\u003c/code\u003e, \u003ccode\u003er/designer"},{"lineNumber":510,"author":{"gitId":"gerhean"},"content":"                                    s/applied\u003c/code\u003e is also acceptable)\u003c/p\u003e"},{"lineNumber":511,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":512,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":513,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003eAn input consisting of only spaces is considered empty.\u003c/p\u003e"},{"lineNumber":514,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":515,"author":{"gitId":"gerhean"},"content":"                    \u003c/ul\u003e"},{"lineNumber":516,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":517,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":518,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"sect2\"\u003e"},{"lineNumber":519,"author":{"gitId":"gerhean"},"content":"                \u003ch3 id\u003d\"viewing-command-history\"\u003e\u003ca class\u003d\"link\" href\u003d\"#viewing-command-history\"\u003e3.6. Viewing command"},{"lineNumber":520,"author":{"gitId":"gerhean"},"content":"                    history\u003c/a\u003e\u003c/h3\u003e"},{"lineNumber":521,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":522,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eUse the \u003ccode\u003eup\u003c/code\u003e and \u003ccode\u003edown\u003c/code\u003e arrow keys while the command box is being focused"},{"lineNumber":523,"author":{"gitId":"gerhean"},"content":"                        to scroll through your command history.\u003c/p\u003e"},{"lineNumber":524,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":525,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":526,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"sect2\"\u003e"},{"lineNumber":527,"author":{"gitId":"gerhean"},"content":"                \u003ch3 id\u003d\"other-important-information\"\u003e\u003ca class\u003d\"link\" href\u003d\"#other-important-information\"\u003e3.7. Other"},{"lineNumber":528,"author":{"gitId":"gerhean"},"content":"                    important information\u003c/a\u003e\u003c/h3\u003e"},{"lineNumber":529,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"sect3\"\u003e"},{"lineNumber":530,"author":{"gitId":"gerhean"},"content":"                    \u003ch4 id\u003d\"index-of-an-internship-application\"\u003e\u003ca class\u003d\"link\""},{"lineNumber":531,"author":{"gitId":"gerhean"},"content":"                                                                   href\u003d\"#index-of-an-internship-application\"\u003e3.7.1."},{"lineNumber":532,"author":{"gitId":"gerhean"},"content":"                        Index of an internship application\u003c/a\u003e\u003c/h4\u003e"},{"lineNumber":533,"author":{"gitId":"gerhean"},"content":"                    \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":534,"author":{"gitId":"gerhean"},"content":"                        \u003cul\u003e"},{"lineNumber":535,"author":{"gitId":"gerhean"},"content":"                            \u003cli\u003e"},{"lineNumber":536,"author":{"gitId":"gerhean"},"content":"                                \u003cp\u003eWe will use \u003ccode\u003eINDEX\u003c/code\u003e to refer to a particular internship application.\u003c/p\u003e"},{"lineNumber":537,"author":{"gitId":"gerhean"},"content":"                                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":538,"author":{"gitId":"gerhean"},"content":"                                    \u003cul\u003e"},{"lineNumber":539,"author":{"gitId":"gerhean"},"content":"                                        \u003cli\u003e"},{"lineNumber":540,"author":{"gitId":"gerhean"},"content":"                                            \u003cp\u003e\u003ccode\u003eINDEX\u003c/code\u003e can be found on the left side of an internship"},{"lineNumber":541,"author":{"gitId":"gerhean"},"content":"                                                application card.\u003c/p\u003e"},{"lineNumber":542,"author":{"gitId":"gerhean"},"content":"                                        \u003c/li\u003e"},{"lineNumber":543,"author":{"gitId":"gerhean"},"content":"                                        \u003cli\u003e"},{"lineNumber":544,"author":{"gitId":"gerhean"},"content":"                                            \u003cp\u003e\u003ccode\u003eINDEX\u003c/code\u003e will start from \u003cstrong\u003e1\u003c/strong\u003e (inclusive).\u003c/p\u003e"},{"lineNumber":545,"author":{"gitId":"gerhean"},"content":"                                        \u003c/li\u003e"},{"lineNumber":546,"author":{"gitId":"gerhean"},"content":"                                        \u003cli\u003e"},{"lineNumber":547,"author":{"gitId":"gerhean"},"content":"                                            \u003cp\u003e\u003ccode\u003eINDEX\u003c/code\u003e is not unique to a particular internship application\u0026#8201;\u0026#8212;\u0026#8201;it"},{"lineNumber":548,"author":{"gitId":"gerhean"},"content":"                                                will change as the list is updated.\u003c/p\u003e"},{"lineNumber":549,"author":{"gitId":"gerhean"},"content":"                                        \u003c/li\u003e"},{"lineNumber":550,"author":{"gitId":"gerhean"},"content":"                                        \u003cli\u003e"},{"lineNumber":551,"author":{"gitId":"gerhean"},"content":"                                            \u003cp\u003e\u003ccode\u003eINDEX\u003c/code\u003e only serves as a reference for you to choose the"},{"lineNumber":552,"author":{"gitId":"gerhean"},"content":"                                                correct internship application.\u003c/p\u003e"},{"lineNumber":553,"author":{"gitId":"gerhean"},"content":"                                        \u003c/li\u003e"},{"lineNumber":554,"author":{"gitId":"gerhean"},"content":"                                    \u003c/ul\u003e"},{"lineNumber":555,"author":{"gitId":"gerhean"},"content":"                                \u003c/div\u003e"},{"lineNumber":556,"author":{"gitId":"gerhean"},"content":"                            \u003c/li\u003e"},{"lineNumber":557,"author":{"gitId":"gerhean"},"content":"                        \u003c/ul\u003e"},{"lineNumber":558,"author":{"gitId":"gerhean"},"content":"                    \u003c/div\u003e"},{"lineNumber":559,"author":{"gitId":"gerhean"},"content":"                    \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":560,"author":{"gitId":"gerhean"},"content":"                        \u003cul\u003e"},{"lineNumber":561,"author":{"gitId":"gerhean"},"content":"                            \u003cli\u003e"},{"lineNumber":562,"author":{"gitId":"gerhean"},"content":"                                \u003cp\u003eFor any command that uses \u003ccode\u003eINDEX\u003c/code\u003e:\u003c/p\u003e"},{"lineNumber":563,"author":{"gitId":"gerhean"},"content":"                                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":564,"author":{"gitId":"gerhean"},"content":"                                    \u003cul\u003e"},{"lineNumber":565,"author":{"gitId":"gerhean"},"content":"                                        \u003cli\u003e"},{"lineNumber":566,"author":{"gitId":"gerhean"},"content":"                                            \u003cp\u003e\u003ccode\u003eINDEX\u003c/code\u003e must be among those displayed in the current list.\u003c/p\u003e"},{"lineNumber":567,"author":{"gitId":"gerhean"},"content":"                                            \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":568,"author":{"gitId":"gerhean"},"content":"                                                \u003cul\u003e"},{"lineNumber":569,"author":{"gitId":"gerhean"},"content":"                                                    \u003cli\u003e"},{"lineNumber":570,"author":{"gitId":"gerhean"},"content":"                                                        \u003cp\u003eFor example, if the current list displays \u003ccode\u003eINDEX\u003c/code\u003e"},{"lineNumber":571,"author":{"gitId":"gerhean"},"content":"                                                            \u003cstrong\u003e1 to 10\u003c/strong\u003e, \u003ccode\u003eINDEX\u003c/code\u003e 11 will not be"},{"lineNumber":572,"author":{"gitId":"gerhean"},"content":"                                                            considered valid.\u003c/p\u003e"},{"lineNumber":573,"author":{"gitId":"gerhean"},"content":"                                                    \u003c/li\u003e"},{"lineNumber":574,"author":{"gitId":"gerhean"},"content":"                                                \u003c/ul\u003e"},{"lineNumber":575,"author":{"gitId":"gerhean"},"content":"                                            \u003c/div\u003e"},{"lineNumber":576,"author":{"gitId":"gerhean"},"content":"                                        \u003c/li\u003e"},{"lineNumber":577,"author":{"gitId":"gerhean"},"content":"                                    \u003c/ul\u003e"},{"lineNumber":578,"author":{"gitId":"gerhean"},"content":"                                \u003c/div\u003e"},{"lineNumber":579,"author":{"gitId":"gerhean"},"content":"                            \u003c/li\u003e"},{"lineNumber":580,"author":{"gitId":"gerhean"},"content":"                        \u003c/ul\u003e"},{"lineNumber":581,"author":{"gitId":"gerhean"},"content":"                    \u003c/div\u003e"},{"lineNumber":582,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":583,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"sect3\"\u003e"},{"lineNumber":584,"author":{"gitId":"gerhean"},"content":"                    \u003ch4 id\u003d\"multiple-fields\"\u003e\u003ca class\u003d\"link\" href\u003d\"#multiple-fields\"\u003e3.7.2. Multiple fields\u003c/a\u003e\u003c/h4\u003e"},{"lineNumber":585,"author":{"gitId":"gerhean"},"content":"                    \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":586,"author":{"gitId":"gerhean"},"content":"                        \u003cul\u003e"},{"lineNumber":587,"author":{"gitId":"gerhean"},"content":"                            \u003cli\u003e"},{"lineNumber":588,"author":{"gitId":"gerhean"},"content":"                                \u003cp\u003eCommands that contain fields (see: \u003ca href\u003d\"#fields\"\u003eSection 3.2, \u0026#8220;Structure of"},{"lineNumber":589,"author":{"gitId":"gerhean"},"content":"                                    internship application\u0026#8221;\u003c/a\u003e) will be able to take in multiple"},{"lineNumber":590,"author":{"gitId":"gerhean"},"content":"                                    entry of each field (except \u003ccode\u003esort\u003c/code\u003e which only allows one field).\u003c/p\u003e"},{"lineNumber":591,"author":{"gitId":"gerhean"},"content":"                            \u003c/li\u003e"},{"lineNumber":592,"author":{"gitId":"gerhean"},"content":"                            \u003cli\u003e"},{"lineNumber":593,"author":{"gitId":"gerhean"},"content":"                                \u003cp\u003eHowever, when multiple fields are inputted, eg. \u003ccode\u003ec/Google c/Facebook\u003c/code\u003e,"},{"lineNumber":594,"author":{"gitId":"gerhean"},"content":"                                    only the last field will be recognised"},{"lineNumber":595,"author":{"gitId":"gerhean"},"content":"                                    by the application. In the example above, only \u003ccode\u003ec/Facebook\u003c/code\u003e will be"},{"lineNumber":596,"author":{"gitId":"gerhean"},"content":"                                    registered, \u003ccode\u003ec/Google\u003c/code\u003e"},{"lineNumber":597,"author":{"gitId":"gerhean"},"content":"                                    will be ignored by the application.\u003c/p\u003e"},{"lineNumber":598,"author":{"gitId":"gerhean"},"content":"                            \u003c/li\u003e"},{"lineNumber":599,"author":{"gitId":"gerhean"},"content":"                        \u003c/ul\u003e"},{"lineNumber":600,"author":{"gitId":"gerhean"},"content":"                    \u003c/div\u003e"},{"lineNumber":601,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":602,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"sect3\"\u003e"},{"lineNumber":603,"author":{"gitId":"gerhean"},"content":"                    \u003ch4 id\u003d\"command-availability\"\u003e\u003ca class\u003d\"link\" href\u003d\"#command-availability\"\u003e3.7.3. Command"},{"lineNumber":604,"author":{"gitId":"gerhean"},"content":"                        availability\u003c/a\u003e\u003c/h4\u003e"},{"lineNumber":605,"author":{"gitId":"gerhean"},"content":"                    \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":606,"author":{"gitId":"gerhean"},"content":"                        \u003cul\u003e"},{"lineNumber":607,"author":{"gitId":"gerhean"},"content":"                            \u003cli\u003e"},{"lineNumber":608,"author":{"gitId":"gerhean"},"content":"                                \u003cp\u003eCommands will work on both \u003cstrong\u003emain list\u003c/strong\u003e and \u003cstrong\u003earchival"},{"lineNumber":609,"author":{"gitId":"gerhean"},"content":"                                    list\u003c/strong\u003e.\u003c/p\u003e"},{"lineNumber":610,"author":{"gitId":"gerhean"},"content":"                                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":611,"author":{"gitId":"gerhean"},"content":"                                    \u003cul\u003e"},{"lineNumber":612,"author":{"gitId":"gerhean"},"content":"                                        \u003cli\u003e"},{"lineNumber":613,"author":{"gitId":"gerhean"},"content":"                                            \u003cp\u003eThe exceptions are: \u003ccode\u003eArchive\u003c/code\u003e, \u003ccode\u003eUnarchive\u003c/code\u003e, \u003ccode\u003eReminder\u003c/code\u003e"},{"lineNumber":614,"author":{"gitId":"gerhean"},"content":"                                            \u003c/p\u003e"},{"lineNumber":615,"author":{"gitId":"gerhean"},"content":"                                        \u003c/li\u003e"},{"lineNumber":616,"author":{"gitId":"gerhean"},"content":"                                    \u003c/ul\u003e"},{"lineNumber":617,"author":{"gitId":"gerhean"},"content":"                                \u003c/div\u003e"},{"lineNumber":618,"author":{"gitId":"gerhean"},"content":"                            \u003c/li\u003e"},{"lineNumber":619,"author":{"gitId":"gerhean"},"content":"                        \u003c/ul\u003e"},{"lineNumber":620,"author":{"gitId":"gerhean"},"content":"                    \u003c/div\u003e"},{"lineNumber":621,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":622,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"sect3\"\u003e"},{"lineNumber":623,"author":{"gitId":"gerhean"},"content":"                    \u003ch4 id\u003d\"colored-internship-applications\"\u003e\u003ca class\u003d\"link\" href\u003d\"#colored-internship-applications\"\u003e3.7.4."},{"lineNumber":624,"author":{"gitId":"gerhean"},"content":"                        Colored internship applications\u003c/a\u003e\u003c/h4\u003e"},{"lineNumber":625,"author":{"gitId":"gerhean"},"content":"                    \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":626,"author":{"gitId":"gerhean"},"content":"                        \u003cul\u003e"},{"lineNumber":627,"author":{"gitId":"gerhean"},"content":"                            \u003cli\u003e"},{"lineNumber":628,"author":{"gitId":"gerhean"},"content":"                                \u003cp\u003eSome internship applications in the list may be colored green or red. This is what"},{"lineNumber":629,"author":{"gitId":"gerhean"},"content":"                                    each color means:\u003c/p\u003e"},{"lineNumber":630,"author":{"gitId":"gerhean"},"content":"                                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":631,"author":{"gitId":"gerhean"},"content":"                                    \u003cul\u003e"},{"lineNumber":632,"author":{"gitId":"gerhean"},"content":"                                        \u003cli\u003e"},{"lineNumber":633,"author":{"gitId":"gerhean"},"content":"                                            \u003cp\u003eInternship applications colored green indicates that there is an upcoming"},{"lineNumber":634,"author":{"gitId":"gerhean"},"content":"                                                application deadline or interviews for that internship application.\u003c/p\u003e"},{"lineNumber":635,"author":{"gitId":"gerhean"},"content":"                                        \u003c/li\u003e"},{"lineNumber":636,"author":{"gitId":"gerhean"},"content":"                                        \u003cli\u003e"},{"lineNumber":637,"author":{"gitId":"gerhean"},"content":"                                            \u003cp\u003eInternship applications colored red indicates that the internship"},{"lineNumber":638,"author":{"gitId":"gerhean"},"content":"                                                application\u0026#8217;s status is \u003ccode\u003eghosted\u003c/code\u003e and you might want to"},{"lineNumber":639,"author":{"gitId":"gerhean"},"content":"                                                take action to keep the list relevant.\u003c/p\u003e"},{"lineNumber":640,"author":{"gitId":"gerhean"},"content":"                                        \u003c/li\u003e"},{"lineNumber":641,"author":{"gitId":"gerhean"},"content":"                                    \u003c/ul\u003e"},{"lineNumber":642,"author":{"gitId":"gerhean"},"content":"                                \u003c/div\u003e"},{"lineNumber":643,"author":{"gitId":"gerhean"},"content":"                            \u003c/li\u003e"},{"lineNumber":644,"author":{"gitId":"gerhean"},"content":"                        \u003c/ul\u003e"},{"lineNumber":645,"author":{"gitId":"gerhean"},"content":"                    \u003c/div\u003e"},{"lineNumber":646,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":647,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":648,"author":{"gitId":"gerhean"},"content":"        \u003c/div\u003e"},{"lineNumber":649,"author":{"gitId":"gerhean"},"content":"    \u003c/div\u003e"},{"lineNumber":650,"author":{"gitId":"gerhean"},"content":"    \u003cdiv class\u003d\"sect1\"\u003e"},{"lineNumber":651,"author":{"gitId":"gerhean"},"content":"        \u003ch2 id\u003d\"Commands\"\u003e\u003ca class\u003d\"link\" href\u003d\"#Commands\"\u003e4. Commands\u003c/a\u003e\u003c/h2\u003e"},{"lineNumber":652,"author":{"gitId":"gerhean"},"content":"        \u003cdiv class\u003d\"sectionbody\"\u003e"},{"lineNumber":653,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"sect2\"\u003e"},{"lineNumber":654,"author":{"gitId":"gerhean"},"content":"                \u003ch3 id\u003d\"viewing-offline-user-guide-code-help-code\"\u003e\u003ca class\u003d\"link\""},{"lineNumber":655,"author":{"gitId":"gerhean"},"content":"                                                                      href\u003d\"#viewing-offline-user-guide-code-help-code\"\u003e4.1."},{"lineNumber":656,"author":{"gitId":"gerhean"},"content":"                    Viewing offline user guide: \u003ccode\u003ehelp\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"},{"lineNumber":657,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":658,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eFormat: \u003ccode\u003ehelp\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":659,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":660,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":661,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"sect2\"\u003e"},{"lineNumber":662,"author":{"gitId":"gerhean"},"content":"                \u003ch3 id\u003d\"viewing-unarchived-internship-applications-code-list-code\"\u003e\u003ca class\u003d\"link\""},{"lineNumber":663,"author":{"gitId":"gerhean"},"content":"                                                                                      href\u003d\"#viewing-unarchived-internship-applications-code-list-code\"\u003e4.2."},{"lineNumber":664,"author":{"gitId":"gerhean"},"content":"                    Viewing unarchived internship applications: \u003ccode\u003elist\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"},{"lineNumber":665,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":666,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eDisplays \u003cstrong\u003eunarchived\u003c/strong\u003e internship applications. This is known as your \u003cstrong\u003emain"},{"lineNumber":667,"author":{"gitId":"gerhean"},"content":"                        list\u003c/strong\u003e.\u003c/p\u003e"},{"lineNumber":668,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":669,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":670,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eFormat: \u003ccode\u003elist\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":671,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":672,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":673,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"sect2\"\u003e"},{"lineNumber":674,"author":{"gitId":"gerhean"},"content":"                \u003ch3 id\u003d\"viewing-archived-internship-applications-code-archival-code\"\u003e\u003ca class\u003d\"link\""},{"lineNumber":675,"author":{"gitId":"gerhean"},"content":"                                                                                        href\u003d\"#viewing-archived-internship-applications-code-archival-code\"\u003e4.3."},{"lineNumber":676,"author":{"gitId":"gerhean"},"content":"                    Viewing archived internship applications: \u003ccode\u003earchival\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"},{"lineNumber":677,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":678,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eDisplays \u003cstrong\u003earchived\u003c/strong\u003e internship applications. This is known as your \u003cstrong\u003earchival"},{"lineNumber":679,"author":{"gitId":"gerhean"},"content":"                        list\u003c/strong\u003e.\u003c/p\u003e"},{"lineNumber":680,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":681,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":682,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eFormat: \u003ccode\u003earchival\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":683,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":684,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":685,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"sect2\"\u003e"},{"lineNumber":686,"author":{"gitId":"gerhean"},"content":"                \u003ch3 id\u003d\"selecting-an-internship-application-to-display-code-select-code\"\u003e\u003ca class\u003d\"link\""},{"lineNumber":687,"author":{"gitId":"gerhean"},"content":"                                                                                            href\u003d\"#selecting-an-internship-application-to-display-code-select-code\"\u003e4.4."},{"lineNumber":688,"author":{"gitId":"gerhean"},"content":"                    Selecting an internship application to display: \u003ccode\u003eselect\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"},{"lineNumber":689,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":690,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eSelects an internship application to display on the right panel of the internship diary.\u003c/p\u003e"},{"lineNumber":691,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":692,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":693,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eOnly one internship application may be selected at any point in time.\u003c/p\u003e"},{"lineNumber":694,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":695,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"admonitionblock tip\"\u003e"},{"lineNumber":696,"author":{"gitId":"gerhean"},"content":"                    \u003ctable\u003e"},{"lineNumber":697,"author":{"gitId":"gerhean"},"content":"                        \u003ctr\u003e"},{"lineNumber":698,"author":{"gitId":"gerhean"},"content":"                            \u003ctd class\u003d\"icon\"\u003e"},{"lineNumber":699,"author":{"gitId":"gerhean"},"content":"                                \u003ci class\u003d\"fa icon-tip\" title\u003d\"Tip\"\u003e\u003c/i\u003e"},{"lineNumber":700,"author":{"gitId":"gerhean"},"content":"                            \u003c/td\u003e"},{"lineNumber":701,"author":{"gitId":"gerhean"},"content":"                            \u003ctd class\u003d\"content\"\u003e"},{"lineNumber":702,"author":{"gitId":"gerhean"},"content":"                                Alternatively, you may use your mouse to click on a specific internship application on"},{"lineNumber":703,"author":{"gitId":"gerhean"},"content":"                                the left panel of the internship diary."},{"lineNumber":704,"author":{"gitId":"gerhean"},"content":"                            \u003c/td\u003e"},{"lineNumber":705,"author":{"gitId":"gerhean"},"content":"                        \u003c/tr\u003e"},{"lineNumber":706,"author":{"gitId":"gerhean"},"content":"                    \u003c/table\u003e"},{"lineNumber":707,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":708,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":709,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eFormat: \u003ccode\u003eselect INDEX\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":710,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":711,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":712,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eExample(s):\u003c/p\u003e"},{"lineNumber":713,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":714,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":715,"author":{"gitId":"gerhean"},"content":"                    \u003cul\u003e"},{"lineNumber":716,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":717,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003eselect 1\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":718,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":719,"author":{"gitId":"gerhean"},"content":"                    \u003c/ul\u003e"},{"lineNumber":720,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":721,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":722,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"sect2\"\u003e"},{"lineNumber":723,"author":{"gitId":"gerhean"},"content":"                \u003ch3 id\u003d\"adding-an-internship-application-code-add-code\"\u003e\u003ca class\u003d\"link\""},{"lineNumber":724,"author":{"gitId":"gerhean"},"content":"                                                                           href\u003d\"#adding-an-internship-application-code-add-code\"\u003e4.5."},{"lineNumber":725,"author":{"gitId":"gerhean"},"content":"                    Adding an internship application: \u003ccode\u003eadd\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"},{"lineNumber":726,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":727,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eAdds an internship application to the current list.\u003c/p\u003e"},{"lineNumber":728,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":729,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":730,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eFormat: \u003ccode\u003eadd c/COMPANY r/ROLE d/DATE s/STATUS [p/PHONE] [e/EMAIL] [a/ADDRESS]"},{"lineNumber":731,"author":{"gitId":"gerhean"},"content":"                        [w/PRIORITY]\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":732,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":733,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":734,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eRefer to \u003ca href\u003d\"#fields\"\u003eSection 3.2, \u0026#8220;Structure of internship application\u0026#8221;\u003c/a\u003e for"},{"lineNumber":735,"author":{"gitId":"gerhean"},"content":"                        details about the input constraints.\u003c/p\u003e"},{"lineNumber":736,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":737,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":738,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eExamples:\u003c/p\u003e"},{"lineNumber":739,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":740,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":741,"author":{"gitId":"gerhean"},"content":"                    \u003cul\u003e"},{"lineNumber":742,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":743,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003eadd c/Microsoft r/software engineer d/01 01 2020 s/rejected\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":744,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":745,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":746,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003eadd c/Google r/Software Engineer d/20 02 2020 s/applied p/91234567"},{"lineNumber":747,"author":{"gitId":"gerhean"},"content":"                                e/google@google.com a/123 Orchard Road\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":748,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":749,"author":{"gitId":"gerhean"},"content":"                    \u003c/ul\u003e"},{"lineNumber":750,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":751,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":752,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"sect2\"\u003e"},{"lineNumber":753,"author":{"gitId":"gerhean"},"content":"                \u003ch3 id\u003d\"deleting-internship-application-code-delete-code\"\u003e\u003ca class\u003d\"link\""},{"lineNumber":754,"author":{"gitId":"gerhean"},"content":"                                                                             href\u003d\"#deleting-internship-application-code-delete-code\"\u003e4.6."},{"lineNumber":755,"author":{"gitId":"gerhean"},"content":"                    Deleting internship application: \u003ccode\u003edelete\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"},{"lineNumber":756,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":757,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eDeletes internship application from the current list.\u003cbr\u003e\u003c/p\u003e"},{"lineNumber":758,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":759,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":760,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eFormats:\u003c/p\u003e"},{"lineNumber":761,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":762,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":763,"author":{"gitId":"gerhean"},"content":"                    \u003cul\u003e"},{"lineNumber":764,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":765,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003edelete INDEX\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":766,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":767,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":768,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003edelete INDEX, [INDEX],\u0026#8230;\u0026#8203;\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":769,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":770,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":771,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003edelete s/STATUS [STATUS]\u0026#8230;\u0026#8203;\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":772,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":773,"author":{"gitId":"gerhean"},"content":"                    \u003c/ul\u003e"},{"lineNumber":774,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":775,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"sidebarblock\"\u003e"},{"lineNumber":776,"author":{"gitId":"gerhean"},"content":"                    \u003cdiv class\u003d\"content\"\u003e"},{"lineNumber":777,"author":{"gitId":"gerhean"},"content":"                        \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":778,"author":{"gitId":"gerhean"},"content":"                            \u003cul\u003e"},{"lineNumber":779,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e"},{"lineNumber":780,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eDeleting by \u003ccode\u003eINDEX\u003c/code\u003e:\u003c/p\u003e"},{"lineNumber":781,"author":{"gitId":"gerhean"},"content":"                                    \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":782,"author":{"gitId":"gerhean"},"content":"                                        \u003cul\u003e"},{"lineNumber":783,"author":{"gitId":"gerhean"},"content":"                                            \u003cli\u003e"},{"lineNumber":784,"author":{"gitId":"gerhean"},"content":"                                                \u003cp\u003eDeletes the internship application at \u003ccode\u003eINDEX\u003c/code\u003e.\u003c/p\u003e"},{"lineNumber":785,"author":{"gitId":"gerhean"},"content":"                                            \u003c/li\u003e"},{"lineNumber":786,"author":{"gitId":"gerhean"},"content":"                                            \u003cli\u003e"},{"lineNumber":787,"author":{"gitId":"gerhean"},"content":"                                                \u003cp\u003e\u003ccode\u003eINDEX\u003c/code\u003e may be entered in any order.\u003c/p\u003e"},{"lineNumber":788,"author":{"gitId":"gerhean"},"content":"                                                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":789,"author":{"gitId":"gerhean"},"content":"                                                    \u003cul\u003e"},{"lineNumber":790,"author":{"gitId":"gerhean"},"content":"                                                        \u003cli\u003e"},{"lineNumber":791,"author":{"gitId":"gerhean"},"content":"                                                            \u003cp\u003ee.g. \u003ccode\u003edelete 3, 1, 2\u003c/code\u003e.\u003c/p\u003e"},{"lineNumber":792,"author":{"gitId":"gerhean"},"content":"                                                        \u003c/li\u003e"},{"lineNumber":793,"author":{"gitId":"gerhean"},"content":"                                                    \u003c/ul\u003e"},{"lineNumber":794,"author":{"gitId":"gerhean"},"content":"                                                \u003c/div\u003e"},{"lineNumber":795,"author":{"gitId":"gerhean"},"content":"                                            \u003c/li\u003e"},{"lineNumber":796,"author":{"gitId":"gerhean"},"content":"                                            \u003cli\u003e"},{"lineNumber":797,"author":{"gitId":"gerhean"},"content":"                                                \u003cp\u003eDuplicated \u003ccode\u003eINDEX\u003c/code\u003e will be ignored.\u003c/p\u003e"},{"lineNumber":798,"author":{"gitId":"gerhean"},"content":"                                                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":799,"author":{"gitId":"gerhean"},"content":"                                                    \u003cul\u003e"},{"lineNumber":800,"author":{"gitId":"gerhean"},"content":"                                                        \u003cli\u003e"},{"lineNumber":801,"author":{"gitId":"gerhean"},"content":"                                                            \u003cp\u003ee.g. \u003ccode\u003edelete 1, 2, 2\u003c/code\u003e has the same effect as"},{"lineNumber":802,"author":{"gitId":"gerhean"},"content":"                                                                \u003ccode\u003edelete 1, 2\u003c/code\u003e.\u003c/p\u003e"},{"lineNumber":803,"author":{"gitId":"gerhean"},"content":"                                                        \u003c/li\u003e"},{"lineNumber":804,"author":{"gitId":"gerhean"},"content":"                                                    \u003c/ul\u003e"},{"lineNumber":805,"author":{"gitId":"gerhean"},"content":"                                                \u003c/div\u003e"},{"lineNumber":806,"author":{"gitId":"gerhean"},"content":"                                            \u003c/li\u003e"},{"lineNumber":807,"author":{"gitId":"gerhean"},"content":"                                        \u003c/ul\u003e"},{"lineNumber":808,"author":{"gitId":"gerhean"},"content":"                                    \u003c/div\u003e"},{"lineNumber":809,"author":{"gitId":"gerhean"},"content":"                                \u003c/li\u003e"},{"lineNumber":810,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e"},{"lineNumber":811,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eDeleting by \u003ccode\u003eSTATUS\u003c/code\u003e:\u003c/p\u003e"},{"lineNumber":812,"author":{"gitId":"gerhean"},"content":"                                    \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":813,"author":{"gitId":"gerhean"},"content":"                                        \u003cul\u003e"},{"lineNumber":814,"author":{"gitId":"gerhean"},"content":"                                            \u003cli\u003e"},{"lineNumber":815,"author":{"gitId":"gerhean"},"content":"                                                \u003cp\u003eThere must be at least one valid \u003ccode\u003eSTATUS\u003c/code\u003e.\u003c/p\u003e"},{"lineNumber":816,"author":{"gitId":"gerhean"},"content":"                                            \u003c/li\u003e"},{"lineNumber":817,"author":{"gitId":"gerhean"},"content":"                                            \u003cli\u003e"},{"lineNumber":818,"author":{"gitId":"gerhean"},"content":"                                                \u003cp\u003eThe command will execute as long as there is a valid"},{"lineNumber":819,"author":{"gitId":"gerhean"},"content":"                                                    \u003ccode\u003eSTATUS\u003c/code\u003e\u0026#8201;\u0026#8212;\u0026#8201;it will ignore other invalid"},{"lineNumber":820,"author":{"gitId":"gerhean"},"content":"                                                    inputs. If there is no internship application with the"},{"lineNumber":821,"author":{"gitId":"gerhean"},"content":"                                                    specified \u003ccode\u003eSTATUS\u003c/code\u003e, then the feedback box will not"},{"lineNumber":822,"author":{"gitId":"gerhean"},"content":"                                                    display any internship application information (as there is no"},{"lineNumber":823,"author":{"gitId":"gerhean"},"content":"                                                    internship application to act upon).\u003c/p\u003e"},{"lineNumber":824,"author":{"gitId":"gerhean"},"content":"                                                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":825,"author":{"gitId":"gerhean"},"content":"                                                    \u003cul\u003e"},{"lineNumber":826,"author":{"gitId":"gerhean"},"content":"                                                        \u003cli\u003e"},{"lineNumber":827,"author":{"gitId":"gerhean"},"content":"                                                            \u003cp\u003ee.g. the command will delete internship application(s)"},{"lineNumber":828,"author":{"gitId":"gerhean"},"content":"                                                                with status \u003ccode\u003erejected\u003c/code\u003e for \u003ccode\u003edelete s/"},{"lineNumber":829,"author":{"gitId":"gerhean"},"content":"                                                                    somethinginvalid rejected\u003c/code\u003e.\u003c/p\u003e"},{"lineNumber":830,"author":{"gitId":"gerhean"},"content":"                                                        \u003c/li\u003e"},{"lineNumber":831,"author":{"gitId":"gerhean"},"content":"                                                        \u003cli\u003e"},{"lineNumber":832,"author":{"gitId":"gerhean"},"content":"                                                            \u003cp\u003ee.g. the command will delete internship application(s)"},{"lineNumber":833,"author":{"gitId":"gerhean"},"content":"                                                                with status \u003ccode\u003eapplied\u003c/code\u003e or"},{"lineNumber":834,"author":{"gitId":"gerhean"},"content":"                                                                \u003ccode\u003ewishlist\u003c/code\u003e for \u003ccode\u003edelete s/applied"},{"lineNumber":835,"author":{"gitId":"gerhean"},"content":"                                                                    somethinginvalid wishlist\u003c/code\u003e.\u003c/p\u003e"},{"lineNumber":836,"author":{"gitId":"gerhean"},"content":"                                                        \u003c/li\u003e"},{"lineNumber":837,"author":{"gitId":"gerhean"},"content":"                                                    \u003c/ul\u003e"},{"lineNumber":838,"author":{"gitId":"gerhean"},"content":"                                                \u003c/div\u003e"},{"lineNumber":839,"author":{"gitId":"gerhean"},"content":"                                            \u003c/li\u003e"},{"lineNumber":840,"author":{"gitId":"gerhean"},"content":"                                        \u003c/ul\u003e"},{"lineNumber":841,"author":{"gitId":"gerhean"},"content":"                                    \u003c/div\u003e"},{"lineNumber":842,"author":{"gitId":"gerhean"},"content":"                                \u003c/li\u003e"},{"lineNumber":843,"author":{"gitId":"gerhean"},"content":"                            \u003c/ul\u003e"},{"lineNumber":844,"author":{"gitId":"gerhean"},"content":"                        \u003c/div\u003e"},{"lineNumber":845,"author":{"gitId":"gerhean"},"content":"                    \u003c/div\u003e"},{"lineNumber":846,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":847,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":848,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eExample(s):\u003c/p\u003e"},{"lineNumber":849,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":850,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":851,"author":{"gitId":"gerhean"},"content":"                    \u003cul\u003e"},{"lineNumber":852,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":853,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003elist\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":854,"author":{"gitId":"gerhean"},"content":"                                \u003ccode\u003edelete 2\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":855,"author":{"gitId":"gerhean"},"content":"                                Deletes the 2nd internship application from the main list.\u003c/p\u003e"},{"lineNumber":856,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":857,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":858,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003elist\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":859,"author":{"gitId":"gerhean"},"content":"                                \u003ccode\u003edelete 1, 2, 3\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":860,"author":{"gitId":"gerhean"},"content":"                                Deletes the 1st, 2nd, and 3rd internship applications from the main list.\u003c/p\u003e"},{"lineNumber":861,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":862,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":863,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003earchival\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":864,"author":{"gitId":"gerhean"},"content":"                                \u003ccode\u003edelete s/applied\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":865,"author":{"gitId":"gerhean"},"content":"                                Deletes all the internship application(s) with the \u003ccode\u003eapplied\u003c/code\u003e status from the"},{"lineNumber":866,"author":{"gitId":"gerhean"},"content":"                                archival list.\u003c/p\u003e"},{"lineNumber":867,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":868,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":869,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003earchival\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":870,"author":{"gitId":"gerhean"},"content":"                                \u003ccode\u003edelete s/applied rejected\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":871,"author":{"gitId":"gerhean"},"content":"                                Deletes all the internship application(s) with the \u003ccode\u003eapplied\u003c/code\u003e or \u003ccode\u003erejected\u003c/code\u003e"},{"lineNumber":872,"author":{"gitId":"gerhean"},"content":"                                status from the archival list.\u003c/p\u003e"},{"lineNumber":873,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":874,"author":{"gitId":"gerhean"},"content":"                    \u003c/ul\u003e"},{"lineNumber":875,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":876,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":877,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"sect2\"\u003e"},{"lineNumber":878,"author":{"gitId":"gerhean"},"content":"                \u003ch3 id\u003d\"archiving-internship-application-code-archive-code\"\u003e\u003ca class\u003d\"link\""},{"lineNumber":879,"author":{"gitId":"gerhean"},"content":"                                                                               href\u003d\"#archiving-internship-application-code-archive-code\"\u003e4.7."},{"lineNumber":880,"author":{"gitId":"gerhean"},"content":"                    Archiving internship application: \u003ccode\u003earchive\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"},{"lineNumber":881,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":882,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eMoves internship application from the \u003cstrong\u003emain list\u003c/strong\u003e to the \u003cstrong\u003earchival"},{"lineNumber":883,"author":{"gitId":"gerhean"},"content":"                        list\u003c/strong\u003e.\u003cbr\u003e\u003c/p\u003e"},{"lineNumber":884,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":885,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":886,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eFormats:\u003c/p\u003e"},{"lineNumber":887,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":888,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":889,"author":{"gitId":"gerhean"},"content":"                    \u003cul\u003e"},{"lineNumber":890,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":891,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003earchive INDEX\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":892,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":893,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":894,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003earchive INDEX, [INDEX],\u0026#8230;\u0026#8203;\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":895,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":896,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":897,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003earchive s/STATUS [STATUS]\u0026#8230;\u0026#8203;\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":898,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":899,"author":{"gitId":"gerhean"},"content":"                    \u003c/ul\u003e"},{"lineNumber":900,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":901,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"sidebarblock\"\u003e"},{"lineNumber":902,"author":{"gitId":"gerhean"},"content":"                    \u003cdiv class\u003d\"content\"\u003e"},{"lineNumber":903,"author":{"gitId":"gerhean"},"content":"                        \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":904,"author":{"gitId":"gerhean"},"content":"                            \u003cul\u003e"},{"lineNumber":905,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e"},{"lineNumber":906,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eArchiving by \u003ccode\u003eINDEX\u003c/code\u003e:\u003c/p\u003e"},{"lineNumber":907,"author":{"gitId":"gerhean"},"content":"                                    \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":908,"author":{"gitId":"gerhean"},"content":"                                        \u003cul\u003e"},{"lineNumber":909,"author":{"gitId":"gerhean"},"content":"                                            \u003cli\u003e"},{"lineNumber":910,"author":{"gitId":"gerhean"},"content":"                                                \u003cp\u003eArchives the internship application at \u003ccode\u003eINDEX\u003c/code\u003e.\u003c/p\u003e"},{"lineNumber":911,"author":{"gitId":"gerhean"},"content":"                                            \u003c/li\u003e"},{"lineNumber":912,"author":{"gitId":"gerhean"},"content":"                                            \u003cli\u003e"},{"lineNumber":913,"author":{"gitId":"gerhean"},"content":"                                                \u003cp\u003e\u003ccode\u003eINDEX\u003c/code\u003e may be entered in any order.\u003c/p\u003e"},{"lineNumber":914,"author":{"gitId":"gerhean"},"content":"                                                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":915,"author":{"gitId":"gerhean"},"content":"                                                    \u003cul\u003e"},{"lineNumber":916,"author":{"gitId":"gerhean"},"content":"                                                        \u003cli\u003e"},{"lineNumber":917,"author":{"gitId":"gerhean"},"content":"                                                            \u003cp\u003ee.g. \u003ccode\u003earchive 3, 1, 2\u003c/code\u003e.\u003c/p\u003e"},{"lineNumber":918,"author":{"gitId":"gerhean"},"content":"                                                        \u003c/li\u003e"},{"lineNumber":919,"author":{"gitId":"gerhean"},"content":"                                                    \u003c/ul\u003e"},{"lineNumber":920,"author":{"gitId":"gerhean"},"content":"                                                \u003c/div\u003e"},{"lineNumber":921,"author":{"gitId":"gerhean"},"content":"                                            \u003c/li\u003e"},{"lineNumber":922,"author":{"gitId":"gerhean"},"content":"                                            \u003cli\u003e"},{"lineNumber":923,"author":{"gitId":"gerhean"},"content":"                                                \u003cp\u003eDuplicated \u003ccode\u003eINDEX\u003c/code\u003e will be ignored.\u003c/p\u003e"},{"lineNumber":924,"author":{"gitId":"gerhean"},"content":"                                                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":925,"author":{"gitId":"gerhean"},"content":"                                                    \u003cul\u003e"},{"lineNumber":926,"author":{"gitId":"gerhean"},"content":"                                                        \u003cli\u003e"},{"lineNumber":927,"author":{"gitId":"gerhean"},"content":"                                                            \u003cp\u003ee.g. \u003ccode\u003earchive 1, 2, 2\u003c/code\u003e has the same effect as"},{"lineNumber":928,"author":{"gitId":"gerhean"},"content":"                                                                \u003ccode\u003earchive 1, 2\u003c/code\u003e.\u003c/p\u003e"},{"lineNumber":929,"author":{"gitId":"gerhean"},"content":"                                                        \u003c/li\u003e"},{"lineNumber":930,"author":{"gitId":"gerhean"},"content":"                                                    \u003c/ul\u003e"},{"lineNumber":931,"author":{"gitId":"gerhean"},"content":"                                                \u003c/div\u003e"},{"lineNumber":932,"author":{"gitId":"gerhean"},"content":"                                            \u003c/li\u003e"},{"lineNumber":933,"author":{"gitId":"gerhean"},"content":"                                        \u003c/ul\u003e"},{"lineNumber":934,"author":{"gitId":"gerhean"},"content":"                                    \u003c/div\u003e"},{"lineNumber":935,"author":{"gitId":"gerhean"},"content":"                                \u003c/li\u003e"},{"lineNumber":936,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e"},{"lineNumber":937,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eArchiving by \u003ccode\u003eSTATUS\u003c/code\u003e:\u003c/p\u003e"},{"lineNumber":938,"author":{"gitId":"gerhean"},"content":"                                    \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":939,"author":{"gitId":"gerhean"},"content":"                                        \u003cul\u003e"},{"lineNumber":940,"author":{"gitId":"gerhean"},"content":"                                            \u003cli\u003e"},{"lineNumber":941,"author":{"gitId":"gerhean"},"content":"                                                \u003cp\u003eThere must be at least one valid \u003ccode\u003eSTATUS\u003c/code\u003e.\u003c/p\u003e"},{"lineNumber":942,"author":{"gitId":"gerhean"},"content":"                                            \u003c/li\u003e"},{"lineNumber":943,"author":{"gitId":"gerhean"},"content":"                                            \u003cli\u003e"},{"lineNumber":944,"author":{"gitId":"gerhean"},"content":"                                                \u003cp\u003eThe command will execute as long as there is a valid"},{"lineNumber":945,"author":{"gitId":"gerhean"},"content":"                                                    \u003ccode\u003eSTATUS\u003c/code\u003e\u0026#8201;\u0026#8212;\u0026#8201;it will ignore other invalid"},{"lineNumber":946,"author":{"gitId":"gerhean"},"content":"                                                    inputs. If there is no internship application with the"},{"lineNumber":947,"author":{"gitId":"gerhean"},"content":"                                                    specified \u003ccode\u003eSTATUS\u003c/code\u003e, then the feedback box will not"},{"lineNumber":948,"author":{"gitId":"gerhean"},"content":"                                                    display any internship application information (as there is no"},{"lineNumber":949,"author":{"gitId":"gerhean"},"content":"                                                    internship application to act upon).\u003c/p\u003e"},{"lineNumber":950,"author":{"gitId":"gerhean"},"content":"                                                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":951,"author":{"gitId":"gerhean"},"content":"                                                    \u003cul\u003e"},{"lineNumber":952,"author":{"gitId":"gerhean"},"content":"                                                        \u003cli\u003e"},{"lineNumber":953,"author":{"gitId":"gerhean"},"content":"                                                            \u003cp\u003ee.g. the command will archive internship application(s)"},{"lineNumber":954,"author":{"gitId":"gerhean"},"content":"                                                                with status \u003ccode\u003erejected\u003c/code\u003e for \u003ccode\u003earchive s/"},{"lineNumber":955,"author":{"gitId":"gerhean"},"content":"                                                                    somethinginvalid rejected\u003c/code\u003e.\u003c/p\u003e"},{"lineNumber":956,"author":{"gitId":"gerhean"},"content":"                                                        \u003c/li\u003e"},{"lineNumber":957,"author":{"gitId":"gerhean"},"content":"                                                        \u003cli\u003e"},{"lineNumber":958,"author":{"gitId":"gerhean"},"content":"                                                            \u003cp\u003ee.g. the command will archive internship application(s)"},{"lineNumber":959,"author":{"gitId":"gerhean"},"content":"                                                                with status \u003ccode\u003eapplied\u003c/code\u003e or"},{"lineNumber":960,"author":{"gitId":"gerhean"},"content":"                                                                \u003ccode\u003ewishlist\u003c/code\u003e for \u003ccode\u003earchive s/applied"},{"lineNumber":961,"author":{"gitId":"gerhean"},"content":"                                                                    somethinginvalid wishlist\u003c/code\u003e.\u003c/p\u003e"},{"lineNumber":962,"author":{"gitId":"gerhean"},"content":"                                                        \u003c/li\u003e"},{"lineNumber":963,"author":{"gitId":"gerhean"},"content":"                                                    \u003c/ul\u003e"},{"lineNumber":964,"author":{"gitId":"gerhean"},"content":"                                                \u003c/div\u003e"},{"lineNumber":965,"author":{"gitId":"gerhean"},"content":"                                            \u003c/li\u003e"},{"lineNumber":966,"author":{"gitId":"gerhean"},"content":"                                        \u003c/ul\u003e"},{"lineNumber":967,"author":{"gitId":"gerhean"},"content":"                                    \u003c/div\u003e"},{"lineNumber":968,"author":{"gitId":"gerhean"},"content":"                                \u003c/li\u003e"},{"lineNumber":969,"author":{"gitId":"gerhean"},"content":"                            \u003c/ul\u003e"},{"lineNumber":970,"author":{"gitId":"gerhean"},"content":"                        \u003c/div\u003e"},{"lineNumber":971,"author":{"gitId":"gerhean"},"content":"                    \u003c/div\u003e"},{"lineNumber":972,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":973,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":974,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eExample(s):\u003c/p\u003e"},{"lineNumber":975,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":976,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":977,"author":{"gitId":"gerhean"},"content":"                    \u003cul\u003e"},{"lineNumber":978,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":979,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003elist\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":980,"author":{"gitId":"gerhean"},"content":"                                \u003ccode\u003earchive 2\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":981,"author":{"gitId":"gerhean"},"content":"                                Archives the 2nd internship application in the main list.\u003c/p\u003e"},{"lineNumber":982,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":983,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":984,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003elist\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":985,"author":{"gitId":"gerhean"},"content":"                                \u003ccode\u003earchive 1, 2, 3\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":986,"author":{"gitId":"gerhean"},"content":"                                Archives the 1st, 2nd, and 3rd internship application in the main list.\u003c/p\u003e"},{"lineNumber":987,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":988,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":989,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003elist\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":990,"author":{"gitId":"gerhean"},"content":"                                \u003ccode\u003earchive s/applied\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":991,"author":{"gitId":"gerhean"},"content":"                                Archives all the internship application(s) with the \u003ccode\u003eapplied\u003c/code\u003e status in the"},{"lineNumber":992,"author":{"gitId":"gerhean"},"content":"                                main list.\u003c/p\u003e"},{"lineNumber":993,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":994,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":995,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003elist\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":996,"author":{"gitId":"gerhean"},"content":"                                \u003ccode\u003earchive s/applied rejected\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":997,"author":{"gitId":"gerhean"},"content":"                                Archives all the internship application(s) with the \u003ccode\u003eapplied\u003c/code\u003e or \u003ccode\u003erejected\u003c/code\u003e"},{"lineNumber":998,"author":{"gitId":"gerhean"},"content":"                                status in the main list.\u003c/p\u003e"},{"lineNumber":999,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":1000,"author":{"gitId":"gerhean"},"content":"                    \u003c/ul\u003e"},{"lineNumber":1001,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1002,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":1003,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"sect2\"\u003e"},{"lineNumber":1004,"author":{"gitId":"gerhean"},"content":"                \u003ch3 id\u003d\"unarchiving-internship-application-code-unarchive-code\"\u003e\u003ca class\u003d\"link\""},{"lineNumber":1005,"author":{"gitId":"gerhean"},"content":"                                                                                   href\u003d\"#unarchiving-internship-application-code-unarchive-code\"\u003e4.8."},{"lineNumber":1006,"author":{"gitId":"gerhean"},"content":"                    Unarchiving internship application: \u003ccode\u003eunarchive\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"},{"lineNumber":1007,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":1008,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eMoves internship application from the \u003cstrong\u003earchival list\u003c/strong\u003e to the \u003cstrong\u003emain"},{"lineNumber":1009,"author":{"gitId":"gerhean"},"content":"                        list\u003c/strong\u003e.\u003cbr\u003e\u003c/p\u003e"},{"lineNumber":1010,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1011,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":1012,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eFormats:\u003c/p\u003e"},{"lineNumber":1013,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1014,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1015,"author":{"gitId":"gerhean"},"content":"                    \u003cul\u003e"},{"lineNumber":1016,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":1017,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003eunarchive INDEX\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1018,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":1019,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":1020,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003eunarchive INDEX, [INDEX],\u0026#8230;\u0026#8203;\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1021,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":1022,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":1023,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003eunarchive s/STATUS [STATUS]\u0026#8230;\u0026#8203;\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1024,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":1025,"author":{"gitId":"gerhean"},"content":"                    \u003c/ul\u003e"},{"lineNumber":1026,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1027,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"sidebarblock\"\u003e"},{"lineNumber":1028,"author":{"gitId":"gerhean"},"content":"                    \u003cdiv class\u003d\"content\"\u003e"},{"lineNumber":1029,"author":{"gitId":"gerhean"},"content":"                        \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1030,"author":{"gitId":"gerhean"},"content":"                            \u003cul\u003e"},{"lineNumber":1031,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e"},{"lineNumber":1032,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eUnarchiving by \u003ccode\u003eINDEX\u003c/code\u003e:\u003c/p\u003e"},{"lineNumber":1033,"author":{"gitId":"gerhean"},"content":"                                    \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1034,"author":{"gitId":"gerhean"},"content":"                                        \u003cul\u003e"},{"lineNumber":1035,"author":{"gitId":"gerhean"},"content":"                                            \u003cli\u003e"},{"lineNumber":1036,"author":{"gitId":"gerhean"},"content":"                                                \u003cp\u003eUnarchives the internship application at \u003ccode\u003eINDEX\u003c/code\u003e.\u003c/p\u003e"},{"lineNumber":1037,"author":{"gitId":"gerhean"},"content":"                                            \u003c/li\u003e"},{"lineNumber":1038,"author":{"gitId":"gerhean"},"content":"                                            \u003cli\u003e"},{"lineNumber":1039,"author":{"gitId":"gerhean"},"content":"                                                \u003cp\u003e\u003ccode\u003eINDEX\u003c/code\u003e may be entered in any order.\u003c/p\u003e"},{"lineNumber":1040,"author":{"gitId":"gerhean"},"content":"                                                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1041,"author":{"gitId":"gerhean"},"content":"                                                    \u003cul\u003e"},{"lineNumber":1042,"author":{"gitId":"gerhean"},"content":"                                                        \u003cli\u003e"},{"lineNumber":1043,"author":{"gitId":"gerhean"},"content":"                                                            \u003cp\u003ee.g. \u003ccode\u003eunarchive 3, 1, 2\u003c/code\u003e.\u003c/p\u003e"},{"lineNumber":1044,"author":{"gitId":"gerhean"},"content":"                                                        \u003c/li\u003e"},{"lineNumber":1045,"author":{"gitId":"gerhean"},"content":"                                                    \u003c/ul\u003e"},{"lineNumber":1046,"author":{"gitId":"gerhean"},"content":"                                                \u003c/div\u003e"},{"lineNumber":1047,"author":{"gitId":"gerhean"},"content":"                                            \u003c/li\u003e"},{"lineNumber":1048,"author":{"gitId":"gerhean"},"content":"                                            \u003cli\u003e"},{"lineNumber":1049,"author":{"gitId":"gerhean"},"content":"                                                \u003cp\u003eDuplicated \u003ccode\u003eINDEX\u003c/code\u003e will be ignored.\u003c/p\u003e"},{"lineNumber":1050,"author":{"gitId":"gerhean"},"content":"                                                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1051,"author":{"gitId":"gerhean"},"content":"                                                    \u003cul\u003e"},{"lineNumber":1052,"author":{"gitId":"gerhean"},"content":"                                                        \u003cli\u003e"},{"lineNumber":1053,"author":{"gitId":"gerhean"},"content":"                                                            \u003cp\u003ee.g. \u003ccode\u003eunarchive 1, 2, 2\u003c/code\u003e has the same effect"},{"lineNumber":1054,"author":{"gitId":"gerhean"},"content":"                                                                as \u003ccode\u003eunarchive 1, 2\u003c/code\u003e.\u003c/p\u003e"},{"lineNumber":1055,"author":{"gitId":"gerhean"},"content":"                                                        \u003c/li\u003e"},{"lineNumber":1056,"author":{"gitId":"gerhean"},"content":"                                                    \u003c/ul\u003e"},{"lineNumber":1057,"author":{"gitId":"gerhean"},"content":"                                                \u003c/div\u003e"},{"lineNumber":1058,"author":{"gitId":"gerhean"},"content":"                                            \u003c/li\u003e"},{"lineNumber":1059,"author":{"gitId":"gerhean"},"content":"                                        \u003c/ul\u003e"},{"lineNumber":1060,"author":{"gitId":"gerhean"},"content":"                                    \u003c/div\u003e"},{"lineNumber":1061,"author":{"gitId":"gerhean"},"content":"                                \u003c/li\u003e"},{"lineNumber":1062,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e"},{"lineNumber":1063,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eUnarchiving by \u003ccode\u003eSTATUS\u003c/code\u003e:\u003c/p\u003e"},{"lineNumber":1064,"author":{"gitId":"gerhean"},"content":"                                    \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1065,"author":{"gitId":"gerhean"},"content":"                                        \u003cul\u003e"},{"lineNumber":1066,"author":{"gitId":"gerhean"},"content":"                                            \u003cli\u003e"},{"lineNumber":1067,"author":{"gitId":"gerhean"},"content":"                                                \u003cp\u003eThere must be at least one valid \u003ccode\u003eSTATUS\u003c/code\u003e.\u003c/p\u003e"},{"lineNumber":1068,"author":{"gitId":"gerhean"},"content":"                                            \u003c/li\u003e"},{"lineNumber":1069,"author":{"gitId":"gerhean"},"content":"                                            \u003cli\u003e"},{"lineNumber":1070,"author":{"gitId":"gerhean"},"content":"                                                \u003cp\u003eThe command will execute as long as there is a valid"},{"lineNumber":1071,"author":{"gitId":"gerhean"},"content":"                                                    \u003ccode\u003eSTATUS\u003c/code\u003e\u0026#8201;\u0026#8212;\u0026#8201;it will ignore other invalid"},{"lineNumber":1072,"author":{"gitId":"gerhean"},"content":"                                                    inputs. If there is no internship application with the"},{"lineNumber":1073,"author":{"gitId":"gerhean"},"content":"                                                    specified \u003ccode\u003eSTATUS\u003c/code\u003e, then the feedback box will not"},{"lineNumber":1074,"author":{"gitId":"gerhean"},"content":"                                                    display any internship application information (as there is no"},{"lineNumber":1075,"author":{"gitId":"gerhean"},"content":"                                                    internship application to act upon).\u003c/p\u003e"},{"lineNumber":1076,"author":{"gitId":"gerhean"},"content":"                                                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1077,"author":{"gitId":"gerhean"},"content":"                                                    \u003cul\u003e"},{"lineNumber":1078,"author":{"gitId":"gerhean"},"content":"                                                        \u003cli\u003e"},{"lineNumber":1079,"author":{"gitId":"gerhean"},"content":"                                                            \u003cp\u003ee.g. the command will unarchive internship application(s)"},{"lineNumber":1080,"author":{"gitId":"gerhean"},"content":"                                                                with status \u003ccode\u003erejected\u003c/code\u003e for \u003ccode\u003eunarchive s/"},{"lineNumber":1081,"author":{"gitId":"gerhean"},"content":"                                                                    somethinginvalid rejected\u003c/code\u003e.\u003c/p\u003e"},{"lineNumber":1082,"author":{"gitId":"gerhean"},"content":"                                                        \u003c/li\u003e"},{"lineNumber":1083,"author":{"gitId":"gerhean"},"content":"                                                        \u003cli\u003e"},{"lineNumber":1084,"author":{"gitId":"gerhean"},"content":"                                                            \u003cp\u003ee.g. the command will unarchive internship application(s)"},{"lineNumber":1085,"author":{"gitId":"gerhean"},"content":"                                                                with status \u003ccode\u003eapplied\u003c/code\u003e or"},{"lineNumber":1086,"author":{"gitId":"gerhean"},"content":"                                                                \u003ccode\u003ewishlist\u003c/code\u003e for \u003ccode\u003eunarchive s/applied"},{"lineNumber":1087,"author":{"gitId":"gerhean"},"content":"                                                                    somethinginvalid wishlist\u003c/code\u003e.\u003c/p\u003e"},{"lineNumber":1088,"author":{"gitId":"gerhean"},"content":"                                                        \u003c/li\u003e"},{"lineNumber":1089,"author":{"gitId":"gerhean"},"content":"                                                    \u003c/ul\u003e"},{"lineNumber":1090,"author":{"gitId":"gerhean"},"content":"                                                \u003c/div\u003e"},{"lineNumber":1091,"author":{"gitId":"gerhean"},"content":"                                            \u003c/li\u003e"},{"lineNumber":1092,"author":{"gitId":"gerhean"},"content":"                                        \u003c/ul\u003e"},{"lineNumber":1093,"author":{"gitId":"gerhean"},"content":"                                    \u003c/div\u003e"},{"lineNumber":1094,"author":{"gitId":"gerhean"},"content":"                                \u003c/li\u003e"},{"lineNumber":1095,"author":{"gitId":"gerhean"},"content":"                            \u003c/ul\u003e"},{"lineNumber":1096,"author":{"gitId":"gerhean"},"content":"                        \u003c/div\u003e"},{"lineNumber":1097,"author":{"gitId":"gerhean"},"content":"                    \u003c/div\u003e"},{"lineNumber":1098,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1099,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":1100,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eExample(s):\u003c/p\u003e"},{"lineNumber":1101,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1102,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1103,"author":{"gitId":"gerhean"},"content":"                    \u003cul\u003e"},{"lineNumber":1104,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":1105,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003earchival\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":1106,"author":{"gitId":"gerhean"},"content":"                                \u003ccode\u003eunarchive 2\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":1107,"author":{"gitId":"gerhean"},"content":"                                Unarchives the 2nd internship application in the archival list.\u003c/p\u003e"},{"lineNumber":1108,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":1109,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":1110,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003earchival\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":1111,"author":{"gitId":"gerhean"},"content":"                                \u003ccode\u003eunarchive 1, 2, 3\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":1112,"author":{"gitId":"gerhean"},"content":"                                Unarchives the 1st, 2nd, and 3rd internship application in the archival list.\u003c/p\u003e"},{"lineNumber":1113,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":1114,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":1115,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003earchival\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":1116,"author":{"gitId":"gerhean"},"content":"                                \u003ccode\u003eunarchive s/applied\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":1117,"author":{"gitId":"gerhean"},"content":"                                Unarchives all the internship application(s) with the \u003ccode\u003eapplied\u003c/code\u003e status in the"},{"lineNumber":1118,"author":{"gitId":"gerhean"},"content":"                                archival list.\u003c/p\u003e"},{"lineNumber":1119,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":1120,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":1121,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003earchival\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":1122,"author":{"gitId":"gerhean"},"content":"                                \u003ccode\u003eunarchive s/applied rejected\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":1123,"author":{"gitId":"gerhean"},"content":"                                Unarchives all the internship application(s) with the \u003ccode\u003eapplied\u003c/code\u003e or \u003ccode\u003erejected\u003c/code\u003e"},{"lineNumber":1124,"author":{"gitId":"gerhean"},"content":"                                status in the archival list.\u003c/p\u003e"},{"lineNumber":1125,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":1126,"author":{"gitId":"gerhean"},"content":"                    \u003c/ul\u003e"},{"lineNumber":1127,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1128,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":1129,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"sect2\"\u003e"},{"lineNumber":1130,"author":{"gitId":"gerhean"},"content":"                \u003ch3 id\u003d\"editing-an-internship-application-code-edit-code\"\u003e\u003ca class\u003d\"link\""},{"lineNumber":1131,"author":{"gitId":"gerhean"},"content":"                                                                             href\u003d\"#editing-an-internship-application-code-edit-code\"\u003e4.9."},{"lineNumber":1132,"author":{"gitId":"gerhean"},"content":"                    Editing an internship application: \u003ccode\u003eedit\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"},{"lineNumber":1133,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":1134,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eEdits an internship application in the internship diary.\u003cbr\u003e"},{"lineNumber":1135,"author":{"gitId":"gerhean"},"content":"                        Format: \u003ccode\u003eedit INDEX [c/COMPANY] [r/ROLE] [d/DATE] [s/STATUS] [p/PHONE] [e/EMAIL]"},{"lineNumber":1136,"author":{"gitId":"gerhean"},"content":"                            [a/ADDRESS] [w/PRIORITY]​\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1137,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1138,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"sidebarblock\"\u003e"},{"lineNumber":1139,"author":{"gitId":"gerhean"},"content":"                    \u003cdiv class\u003d\"content\"\u003e"},{"lineNumber":1140,"author":{"gitId":"gerhean"},"content":"                        \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1141,"author":{"gitId":"gerhean"},"content":"                            \u003cul\u003e"},{"lineNumber":1142,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e"},{"lineNumber":1143,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eEdits the internship application at the specified \u003ccode\u003eINDEX\u003c/code\u003e.\u003c/p\u003e"},{"lineNumber":1144,"author":{"gitId":"gerhean"},"content":"                                \u003c/li\u003e"},{"lineNumber":1145,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e"},{"lineNumber":1146,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eAt least one of the optional fields must be provided.\u003c/p\u003e"},{"lineNumber":1147,"author":{"gitId":"gerhean"},"content":"                                \u003c/li\u003e"},{"lineNumber":1148,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e"},{"lineNumber":1149,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eExisting values will be updated to the input values.\u003c/p\u003e"},{"lineNumber":1150,"author":{"gitId":"gerhean"},"content":"                                \u003c/li\u003e"},{"lineNumber":1151,"author":{"gitId":"gerhean"},"content":"                            \u003c/ul\u003e"},{"lineNumber":1152,"author":{"gitId":"gerhean"},"content":"                        \u003c/div\u003e"},{"lineNumber":1153,"author":{"gitId":"gerhean"},"content":"                    \u003c/div\u003e"},{"lineNumber":1154,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1155,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":1156,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eExamples:\u003c/p\u003e"},{"lineNumber":1157,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1158,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1159,"author":{"gitId":"gerhean"},"content":"                    \u003cul\u003e"},{"lineNumber":1160,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":1161,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003eedit 1 s/applied r/Product Management\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":1162,"author":{"gitId":"gerhean"},"content":"                                Edits the status and role of the internship application to be \u003ccode\u003eapplied\u003c/code\u003e and"},{"lineNumber":1163,"author":{"gitId":"gerhean"},"content":"                                \u003ccode\u003eProduct Management\u003c/code\u003e respectively.\u003c/p\u003e"},{"lineNumber":1164,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":1165,"author":{"gitId":"gerhean"},"content":"                    \u003c/ul\u003e"},{"lineNumber":1166,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1167,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":1168,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"sect2\"\u003e"},{"lineNumber":1169,"author":{"gitId":"gerhean"},"content":"                \u003ch3 id\u003d\"locating-internship-applications-code-find-code\"\u003e\u003ca class\u003d\"link\""},{"lineNumber":1170,"author":{"gitId":"gerhean"},"content":"                                                                            href\u003d\"#locating-internship-applications-code-find-code\"\u003e4.10."},{"lineNumber":1171,"author":{"gitId":"gerhean"},"content":"                    Locating internship applications: \u003ccode\u003efind\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"},{"lineNumber":1172,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":1173,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eFinds all internship application(s) with the specified fields containing any of the given"},{"lineNumber":1174,"author":{"gitId":"gerhean"},"content":"                        keywords.\u003c/p\u003e"},{"lineNumber":1175,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1176,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"admonitionblock tip\"\u003e"},{"lineNumber":1177,"author":{"gitId":"gerhean"},"content":"                    \u003ctable\u003e"},{"lineNumber":1178,"author":{"gitId":"gerhean"},"content":"                        \u003ctr\u003e"},{"lineNumber":1179,"author":{"gitId":"gerhean"},"content":"                            \u003ctd class\u003d\"icon\"\u003e"},{"lineNumber":1180,"author":{"gitId":"gerhean"},"content":"                                \u003ci class\u003d\"fa icon-tip\" title\u003d\"Tip\"\u003e\u003c/i\u003e"},{"lineNumber":1181,"author":{"gitId":"gerhean"},"content":"                            \u003c/td\u003e"},{"lineNumber":1182,"author":{"gitId":"gerhean"},"content":"                            \u003ctd class\u003d\"content\"\u003e"},{"lineNumber":1183,"author":{"gitId":"gerhean"},"content":"                                The find parameters will appear at the bottom left of the internship diary"},{"lineNumber":1184,"author":{"gitId":"gerhean"},"content":"                            \u003c/td\u003e"},{"lineNumber":1185,"author":{"gitId":"gerhean"},"content":"                        \u003c/tr\u003e"},{"lineNumber":1186,"author":{"gitId":"gerhean"},"content":"                    \u003c/table\u003e"},{"lineNumber":1187,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1188,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":1189,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eFormat: \u003ccode\u003efind [KEYWORDS] [c/COMPANY] [r/ROLE] [a/ADDRESS] [p/PHONE] [e/EMAIL] [d/DATE]"},{"lineNumber":1190,"author":{"gitId":"gerhean"},"content":"                        [w/PRIORITY] [s/STATUS]\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1191,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1192,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"sidebarblock\"\u003e"},{"lineNumber":1193,"author":{"gitId":"gerhean"},"content":"                    \u003cdiv class\u003d\"content\"\u003e"},{"lineNumber":1194,"author":{"gitId":"gerhean"},"content":"                        \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1195,"author":{"gitId":"gerhean"},"content":"                            \u003cul\u003e"},{"lineNumber":1196,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e"},{"lineNumber":1197,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eAt least one of the optional parameter must be provided.\u003c/p\u003e"},{"lineNumber":1198,"author":{"gitId":"gerhean"},"content":"                                \u003c/li\u003e"},{"lineNumber":1199,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e"},{"lineNumber":1200,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eIf \u003ccode\u003e[KEYWORDS]\u003c/code\u003e is provided, find will look for matches in any field"},{"lineNumber":1201,"author":{"gitId":"gerhean"},"content":"                                        except for application date based on \u003ccode\u003eKEYWORDS\u003c/code\u003e (i.e. \u003ccode\u003eOR\u003c/code\u003e"},{"lineNumber":1202,"author":{"gitId":"gerhean"},"content":"                                        search), regardless of whether other fields are specified.\u003c/p\u003e"},{"lineNumber":1203,"author":{"gitId":"gerhean"},"content":"                                \u003c/li\u003e"},{"lineNumber":1204,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e"},{"lineNumber":1205,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eWhen fields are specified without [KEYWORD], only applications where all the"},{"lineNumber":1206,"author":{"gitId":"gerhean"},"content":"                                        specified fields match are returned (i.e. \u003ccode\u003eAND\u003c/code\u003e search)."},{"lineNumber":1207,"author":{"gitId":"gerhean"},"content":"                                        e.g. \u003ccode\u003efind c/google r/software engineer\u003c/code\u003e will return application with"},{"lineNumber":1208,"author":{"gitId":"gerhean"},"content":"                                        company being \u003ccode\u003eGoogle\u003c/code\u003e and role"},{"lineNumber":1209,"author":{"gitId":"gerhean"},"content":"                                        being \u003ccode\u003eSoftware Engineer\u003c/code\u003e but not company that is"},{"lineNumber":1210,"author":{"gitId":"gerhean"},"content":"                                        \u003ccode\u003eFacebook\u003c/code\u003e and role being \u003ccode\u003eSoftware Engineer\u003c/code\u003e.\u003c/p\u003e"},{"lineNumber":1211,"author":{"gitId":"gerhean"},"content":"                                \u003c/li\u003e"},{"lineNumber":1212,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e"},{"lineNumber":1213,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eThe search is case insensitive. e.g \u003ccode\u003egoogle\u003c/code\u003e will match"},{"lineNumber":1214,"author":{"gitId":"gerhean"},"content":"                                        \u003ccode\u003eGoogle\u003c/code\u003e.\u003c/p\u003e"},{"lineNumber":1215,"author":{"gitId":"gerhean"},"content":"                                \u003c/li\u003e"},{"lineNumber":1216,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e"},{"lineNumber":1217,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eThe order of the keywords does not matter. e.g. \u003ccode\u003eAI Singapore\u003c/code\u003e will"},{"lineNumber":1218,"author":{"gitId":"gerhean"},"content":"                                        match \u003ccode\u003eSingapore AI\u003c/code\u003e.\u003c/p\u003e"},{"lineNumber":1219,"author":{"gitId":"gerhean"},"content":"                                \u003c/li\u003e"},{"lineNumber":1220,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e"},{"lineNumber":1221,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eCompanies matching at least one keyword will be returned (i.e. \u003ccode\u003eOR\u003c/code\u003e"},{"lineNumber":1222,"author":{"gitId":"gerhean"},"content":"                                        search). e.g. \u003ccode\u003eAI Singapore\u003c/code\u003e will return \u003ccode\u003eAISingapore\u003c/code\u003e,"},{"lineNumber":1223,"author":{"gitId":"gerhean"},"content":"                                        \u003ccode\u003eAI Malaysia\u003c/code\u003e.\u003c/p\u003e"},{"lineNumber":1224,"author":{"gitId":"gerhean"},"content":"                                \u003c/li\u003e"},{"lineNumber":1225,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e"},{"lineNumber":1226,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003ePartial words will be matched e.g. \u003ccode\u003efind a/Singapore\u003c/code\u003e will match"},{"lineNumber":1227,"author":{"gitId":"gerhean"},"content":"                                        internship application with address field named \u003ccode\u003eSingapores\u003c/code\u003e.\u003c/p\u003e"},{"lineNumber":1228,"author":{"gitId":"gerhean"},"content":"                                \u003c/li\u003e"},{"lineNumber":1229,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e"},{"lineNumber":1230,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eConsecutive find command calls will not stack on the resulting list from the"},{"lineNumber":1231,"author":{"gitId":"gerhean"},"content":"                                        preceding find command. It is always performed on either the main list or"},{"lineNumber":1232,"author":{"gitId":"gerhean"},"content":"                                        archival list (shown on the bottom left of the program window).\u003c/p\u003e"},{"lineNumber":1233,"author":{"gitId":"gerhean"},"content":"                                \u003c/li\u003e"},{"lineNumber":1234,"author":{"gitId":"gerhean"},"content":"                            \u003c/ul\u003e"},{"lineNumber":1235,"author":{"gitId":"gerhean"},"content":"                        \u003c/div\u003e"},{"lineNumber":1236,"author":{"gitId":"gerhean"},"content":"                    \u003c/div\u003e"},{"lineNumber":1237,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1238,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":1239,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eExample(s):\u003c/p\u003e"},{"lineNumber":1240,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1241,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1242,"author":{"gitId":"gerhean"},"content":"                    \u003cul\u003e"},{"lineNumber":1243,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":1244,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003efind Google\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":1245,"author":{"gitId":"gerhean"},"content":"                                Lists internship application(s) with company \u003ccode\u003eGoogle\u003c/code\u003e OR with email \u003ccode\u003ealice@google.com\u003c/code\u003e."},{"lineNumber":1246,"author":{"gitId":"gerhean"},"content":"                            \u003c/p\u003e"},{"lineNumber":1247,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":1248,"author":{"gitId":"gerhean"},"content":"                    \u003c/ul\u003e"},{"lineNumber":1249,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1250,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1251,"author":{"gitId":"gerhean"},"content":"                    \u003cul\u003e"},{"lineNumber":1252,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":1253,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003efind c/Google s/applied\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":1254,"author":{"gitId":"gerhean"},"content":"                                Lists internship application(s) with company \u003ccode\u003eGoogle\u003c/code\u003e AND status \u003ccode\u003eapplied\u003c/code\u003e."},{"lineNumber":1255,"author":{"gitId":"gerhean"},"content":"                            \u003c/p\u003e"},{"lineNumber":1256,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":1257,"author":{"gitId":"gerhean"},"content":"                    \u003c/ul\u003e"},{"lineNumber":1258,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1259,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":1260,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"sect2\"\u003e"},{"lineNumber":1261,"author":{"gitId":"gerhean"},"content":"                \u003ch3 id\u003d\"sorting-internship-companies-by-field-code-sort-code\"\u003e\u003ca class\u003d\"link\""},{"lineNumber":1262,"author":{"gitId":"gerhean"},"content":"                                                                                 href\u003d\"#sorting-internship-companies-by-field-code-sort-code\"\u003e4.11."},{"lineNumber":1263,"author":{"gitId":"gerhean"},"content":"                    Sorting internship companies by field: \u003ccode\u003esort\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"},{"lineNumber":1264,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":1265,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eSort displayed internship companies based on a given FIELD.\u003c/p\u003e"},{"lineNumber":1266,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1267,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"admonitionblock tip\"\u003e"},{"lineNumber":1268,"author":{"gitId":"gerhean"},"content":"                    \u003ctable\u003e"},{"lineNumber":1269,"author":{"gitId":"gerhean"},"content":"                        \u003ctr\u003e"},{"lineNumber":1270,"author":{"gitId":"gerhean"},"content":"                            \u003ctd class\u003d\"icon\"\u003e"},{"lineNumber":1271,"author":{"gitId":"gerhean"},"content":"                                \u003ci class\u003d\"fa icon-tip\" title\u003d\"Tip\"\u003e\u003c/i\u003e"},{"lineNumber":1272,"author":{"gitId":"gerhean"},"content":"                            \u003c/td\u003e"},{"lineNumber":1273,"author":{"gitId":"gerhean"},"content":"                            \u003ctd class\u003d\"content\"\u003e"},{"lineNumber":1274,"author":{"gitId":"gerhean"},"content":"                                The sort parameters will appear at the bottom left of the internship diary"},{"lineNumber":1275,"author":{"gitId":"gerhean"},"content":"                            \u003c/td\u003e"},{"lineNumber":1276,"author":{"gitId":"gerhean"},"content":"                        \u003c/tr\u003e"},{"lineNumber":1277,"author":{"gitId":"gerhean"},"content":"                    \u003c/table\u003e"},{"lineNumber":1278,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1279,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":1280,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eType \u003ccode\u003ereverse\u003c/code\u003e before \u003ccode\u003eFIELD\u003c/code\u003e to sort in the reverse order.\u003c/p\u003e"},{"lineNumber":1281,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1282,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":1283,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eFormat: \u003ccode\u003esort [reverse] FIELD\u003c/code\u003e.\u003c/p\u003e"},{"lineNumber":1284,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1285,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":1286,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eAvailable values for \u003ccode\u003eFIELD\u003c/code\u003e:\u003cbr\u003e"},{"lineNumber":1287,"author":{"gitId":"gerhean"},"content":"                        \u003ccode\u003ec/\u003c/code\u003e: Sorts by company name (Dictionary Order).\u003cbr\u003e"},{"lineNumber":1288,"author":{"gitId":"gerhean"},"content":"                        \u003ccode\u003ed/\u003c/code\u003e: Sorts by application date (Chronological Order).\u003cbr\u003e"},{"lineNumber":1289,"author":{"gitId":"gerhean"},"content":"                        \u003ccode\u003er/\u003c/code\u003e: Sorts by role (Dictionary Order).\u003cbr\u003e"},{"lineNumber":1290,"author":{"gitId":"gerhean"},"content":"                        \u003ccode\u003es/\u003c/code\u003e: Sorts by status (Refer to \u003ca href\u003d\"#valid-status\"\u003eSection 3.3, \u0026#8220;Valid"},{"lineNumber":1291,"author":{"gitId":"gerhean"},"content":"                            status\u0026#8221;\u003c/a\u003e).\u003cbr\u003e"},{"lineNumber":1292,"author":{"gitId":"gerhean"},"content":"                        \u003ccode\u003ew/\u003c/code\u003e: Sorts by priority level (Ascending Order).\u003cbr\u003e\u003c/p\u003e"},{"lineNumber":1293,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1294,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"sidebarblock\"\u003e"},{"lineNumber":1295,"author":{"gitId":"gerhean"},"content":"                    \u003cdiv class\u003d\"content\"\u003e"},{"lineNumber":1296,"author":{"gitId":"gerhean"},"content":"                        \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1297,"author":{"gitId":"gerhean"},"content":"                            \u003cul\u003e"},{"lineNumber":1298,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e"},{"lineNumber":1299,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eSort displayed internship companies based on a given FIELD\u003c/p\u003e"},{"lineNumber":1300,"author":{"gitId":"gerhean"},"content":"                                \u003c/li\u003e"},{"lineNumber":1301,"author":{"gitId":"gerhean"},"content":"                            \u003c/ul\u003e"},{"lineNumber":1302,"author":{"gitId":"gerhean"},"content":"                        \u003c/div\u003e"},{"lineNumber":1303,"author":{"gitId":"gerhean"},"content":"                    \u003c/div\u003e"},{"lineNumber":1304,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1305,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":1306,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eExamples:\u003c/p\u003e"},{"lineNumber":1307,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1308,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1309,"author":{"gitId":"gerhean"},"content":"                    \u003cul\u003e"},{"lineNumber":1310,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":1311,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003eSort c/\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":1312,"author":{"gitId":"gerhean"},"content":"                                Returns a list of currently displayed companies sorted by company name.\u003c/p\u003e"},{"lineNumber":1313,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":1314,"author":{"gitId":"gerhean"},"content":"                    \u003c/ul\u003e"},{"lineNumber":1315,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1316,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":1317,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"sect2\"\u003e"},{"lineNumber":1318,"author":{"gitId":"gerhean"},"content":"                \u003ch3 id\u003d\"modifying-an-interview-in-an-internship-application-code-interview-code\"\u003e\u003ca class\u003d\"link\""},{"lineNumber":1319,"author":{"gitId":"gerhean"},"content":"                                                                                                    href\u003d\"#modifying-an-interview-in-an-internship-application-code-interview-code\"\u003e4.12."},{"lineNumber":1320,"author":{"gitId":"gerhean"},"content":"                    Modifying an interview in an internship application: \u003ccode\u003einterview\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"},{"lineNumber":1321,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":1322,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eAdd, list, edit or delete interviews within an internship application\u003cbr\u003e\u003c/p\u003e"},{"lineNumber":1323,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1324,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"admonitionblock tip\"\u003e"},{"lineNumber":1325,"author":{"gitId":"gerhean"},"content":"                    \u003ctable\u003e"},{"lineNumber":1326,"author":{"gitId":"gerhean"},"content":"                        \u003ctr\u003e"},{"lineNumber":1327,"author":{"gitId":"gerhean"},"content":"                            \u003ctd class\u003d\"icon\"\u003e"},{"lineNumber":1328,"author":{"gitId":"gerhean"},"content":"                                \u003ci class\u003d\"fa icon-tip\" title\u003d\"Tip\"\u003e\u003c/i\u003e"},{"lineNumber":1329,"author":{"gitId":"gerhean"},"content":"                            \u003c/td\u003e"},{"lineNumber":1330,"author":{"gitId":"gerhean"},"content":"                            \u003ctd class\u003d\"content\"\u003e"},{"lineNumber":1331,"author":{"gitId":"gerhean"},"content":"                                An interview must contain a date and a boolean (true or false) that represents whether"},{"lineNumber":1332,"author":{"gitId":"gerhean"},"content":"                                an interview is conducted online or not.\u003cbr\u003e"},{"lineNumber":1333,"author":{"gitId":"gerhean"},"content":"                                If the interview is not conducted online, an additional address field must be provided."},{"lineNumber":1334,"author":{"gitId":"gerhean"},"content":"                                See \u003ca href\u003d\"#interview\"\u003eSection 3.4, \u0026#8220;Structure of interview\u0026#8221;\u003c/a\u003e for more"},{"lineNumber":1335,"author":{"gitId":"gerhean"},"content":"                                information."},{"lineNumber":1336,"author":{"gitId":"gerhean"},"content":"                            \u003c/td\u003e"},{"lineNumber":1337,"author":{"gitId":"gerhean"},"content":"                        \u003c/tr\u003e"},{"lineNumber":1338,"author":{"gitId":"gerhean"},"content":"                    \u003c/table\u003e"},{"lineNumber":1339,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1340,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":1341,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eFormat:\u003c/p\u003e"},{"lineNumber":1342,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1343,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1344,"author":{"gitId":"gerhean"},"content":"                    \u003cul\u003e"},{"lineNumber":1345,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":1346,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003eOverview\u003cbr\u003e"},{"lineNumber":1347,"author":{"gitId":"gerhean"},"content":"                                \u003ccode\u003einterview INTERNSHIP_INDEX COMMAND_WORD [INTERVIEW_INDEX] [a/ADDRESS] [d/DATE]"},{"lineNumber":1348,"author":{"gitId":"gerhean"},"content":"                                    [o/IS_ONLINE]\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1349,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":1350,"author":{"gitId":"gerhean"},"content":"                    \u003c/ul\u003e"},{"lineNumber":1351,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1352,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"sidebarblock\"\u003e"},{"lineNumber":1353,"author":{"gitId":"gerhean"},"content":"                    \u003cdiv class\u003d\"content\"\u003e"},{"lineNumber":1354,"author":{"gitId":"gerhean"},"content":"                        \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1355,"author":{"gitId":"gerhean"},"content":"                            \u003cul\u003e"},{"lineNumber":1356,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e"},{"lineNumber":1357,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eA \u003ccode\u003eCOMMAND_WORD\u003c/code\u003e can be: \u003ccode\u003eadd list edit delete\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":1358,"author":{"gitId":"gerhean"},"content":"                                        The command will behave identically to their internship application counterparts"},{"lineNumber":1359,"author":{"gitId":"gerhean"},"content":"                                    \u003c/p\u003e"},{"lineNumber":1360,"author":{"gitId":"gerhean"},"content":"                                    \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1361,"author":{"gitId":"gerhean"},"content":"                                        \u003cul\u003e"},{"lineNumber":1362,"author":{"gitId":"gerhean"},"content":"                                            \u003cli\u003e"},{"lineNumber":1363,"author":{"gitId":"gerhean"},"content":"                                                \u003cp\u003e\u003ccode\u003elist\u003c/code\u003e is currently functionally similar to"},{"lineNumber":1364,"author":{"gitId":"gerhean"},"content":"                                                    \u003ccode\u003eselect\u003c/code\u003e, additional features will be added in v2.0.\u003c/p\u003e"},{"lineNumber":1365,"author":{"gitId":"gerhean"},"content":"                                            \u003c/li\u003e"},{"lineNumber":1366,"author":{"gitId":"gerhean"},"content":"                                        \u003c/ul\u003e"},{"lineNumber":1367,"author":{"gitId":"gerhean"},"content":"                                    \u003c/div\u003e"},{"lineNumber":1368,"author":{"gitId":"gerhean"},"content":"                                \u003c/li\u003e"},{"lineNumber":1369,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e"},{"lineNumber":1370,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eThe \u003ccode\u003eINTERNSHIP_INDEX\u003c/code\u003e corresponds to the index of the internship in"},{"lineNumber":1371,"author":{"gitId":"gerhean"},"content":"                                        the displayed internship list."},{"lineNumber":1372,"author":{"gitId":"gerhean"},"content":"                                        Whereas the \u003ccode\u003eINTERVIEW_INDEX\u003c/code\u003e corresponds to the index of the"},{"lineNumber":1373,"author":{"gitId":"gerhean"},"content":"                                        interview in the interview list.\u003c/p\u003e"},{"lineNumber":1374,"author":{"gitId":"gerhean"},"content":"                                \u003c/li\u003e"},{"lineNumber":1375,"author":{"gitId":"gerhean"},"content":"                            \u003c/ul\u003e"},{"lineNumber":1376,"author":{"gitId":"gerhean"},"content":"                        \u003c/div\u003e"},{"lineNumber":1377,"author":{"gitId":"gerhean"},"content":"                    \u003c/div\u003e"},{"lineNumber":1378,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1379,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1380,"author":{"gitId":"gerhean"},"content":"                    \u003cul\u003e"},{"lineNumber":1381,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":1382,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003eSpecific format of each \u003ccode\u003eCOMMAND_WORD\u003c/code\u003e:\u003c/p\u003e"},{"lineNumber":1383,"author":{"gitId":"gerhean"},"content":"                            \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1384,"author":{"gitId":"gerhean"},"content":"                                \u003cul\u003e"},{"lineNumber":1385,"author":{"gitId":"gerhean"},"content":"                                    \u003cli\u003e"},{"lineNumber":1386,"author":{"gitId":"gerhean"},"content":"                                        \u003cp\u003eAdd interview\u003cbr\u003e"},{"lineNumber":1387,"author":{"gitId":"gerhean"},"content":"                                            \u003ccode\u003einterview INTERNSHIP_INDEX add d/DATE o/IS_ONLINE"},{"lineNumber":1388,"author":{"gitId":"gerhean"},"content":"                                                [a/ADDRESS]\u003c/code\u003e\u003cbr\u003e\u003c/p\u003e"},{"lineNumber":1389,"author":{"gitId":"gerhean"},"content":"                                        \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1390,"author":{"gitId":"gerhean"},"content":"                                            \u003cul\u003e"},{"lineNumber":1391,"author":{"gitId":"gerhean"},"content":"                                                \u003cli\u003e"},{"lineNumber":1392,"author":{"gitId":"gerhean"},"content":"                                                    \u003cp\u003eAddress field \u003ccode\u003ea/ADDRESS\u003c/code\u003e is listed as optional here"},{"lineNumber":1393,"author":{"gitId":"gerhean"},"content":"                                                        as online interview do not require an address but offline"},{"lineNumber":1394,"author":{"gitId":"gerhean"},"content":"                                                        interview does.\u003c/p\u003e"},{"lineNumber":1395,"author":{"gitId":"gerhean"},"content":"                                                \u003c/li\u003e"},{"lineNumber":1396,"author":{"gitId":"gerhean"},"content":"                                            \u003c/ul\u003e"},{"lineNumber":1397,"author":{"gitId":"gerhean"},"content":"                                        \u003c/div\u003e"},{"lineNumber":1398,"author":{"gitId":"gerhean"},"content":"                                    \u003c/li\u003e"},{"lineNumber":1399,"author":{"gitId":"gerhean"},"content":"                                    \u003cli\u003e"},{"lineNumber":1400,"author":{"gitId":"gerhean"},"content":"                                        \u003cp\u003eList interview\u003cbr\u003e"},{"lineNumber":1401,"author":{"gitId":"gerhean"},"content":"                                            \u003ccode\u003einterview INTERNSHIP_INDEX list\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1402,"author":{"gitId":"gerhean"},"content":"                                    \u003c/li\u003e"},{"lineNumber":1403,"author":{"gitId":"gerhean"},"content":"                                    \u003cli\u003e"},{"lineNumber":1404,"author":{"gitId":"gerhean"},"content":"                                        \u003cp\u003eEdit interview\u003cbr\u003e"},{"lineNumber":1405,"author":{"gitId":"gerhean"},"content":"                                            \u003ccode\u003einterview INTERNSHIP_INDEX edit INTERVIEW_INDEX [a/ADDRESS] [d/DATE]"},{"lineNumber":1406,"author":{"gitId":"gerhean"},"content":"                                                [o/IS_ONLINE]\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1407,"author":{"gitId":"gerhean"},"content":"                                        \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1408,"author":{"gitId":"gerhean"},"content":"                                            \u003cul\u003e"},{"lineNumber":1409,"author":{"gitId":"gerhean"},"content":"                                                \u003cli\u003e"},{"lineNumber":1410,"author":{"gitId":"gerhean"},"content":"                                                    \u003cp\u003eIf you are editing an online interview into an offline interview,"},{"lineNumber":1411,"author":{"gitId":"gerhean"},"content":"                                                        Address field \u003ccode\u003ea/ADDRESS\u003c/code\u003e is a requirement.\u003c/p\u003e"},{"lineNumber":1412,"author":{"gitId":"gerhean"},"content":"                                                \u003c/li\u003e"},{"lineNumber":1413,"author":{"gitId":"gerhean"},"content":"                                            \u003c/ul\u003e"},{"lineNumber":1414,"author":{"gitId":"gerhean"},"content":"                                        \u003c/div\u003e"},{"lineNumber":1415,"author":{"gitId":"gerhean"},"content":"                                    \u003c/li\u003e"},{"lineNumber":1416,"author":{"gitId":"gerhean"},"content":"                                    \u003cli\u003e"},{"lineNumber":1417,"author":{"gitId":"gerhean"},"content":"                                        \u003cp\u003eDelete interview\u003cbr\u003e"},{"lineNumber":1418,"author":{"gitId":"gerhean"},"content":"                                            \u003ccode\u003einterview INTERNSHIP_INDEX delete INTERVIEW_INDEX\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1419,"author":{"gitId":"gerhean"},"content":"                                    \u003c/li\u003e"},{"lineNumber":1420,"author":{"gitId":"gerhean"},"content":"                                \u003c/ul\u003e"},{"lineNumber":1421,"author":{"gitId":"gerhean"},"content":"                            \u003c/div\u003e"},{"lineNumber":1422,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":1423,"author":{"gitId":"gerhean"},"content":"                    \u003c/ul\u003e"},{"lineNumber":1424,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1425,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":1426,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eExamples:\u003c/p\u003e"},{"lineNumber":1427,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1428,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1429,"author":{"gitId":"gerhean"},"content":"                    \u003cul\u003e"},{"lineNumber":1430,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":1431,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003elist\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":1432,"author":{"gitId":"gerhean"},"content":"                                \u003ccode\u003einterview 2 list\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":1433,"author":{"gitId":"gerhean"},"content":"                                Lists all interviews in the 2nd internship application in the list\u003c/p\u003e"},{"lineNumber":1434,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":1435,"author":{"gitId":"gerhean"},"content":"                    \u003c/ul\u003e"},{"lineNumber":1436,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1437,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1438,"author":{"gitId":"gerhean"},"content":"                    \u003cul\u003e"},{"lineNumber":1439,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":1440,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003einterview 2 add o/false d/05 02 2020 a/Raffles City #02-22\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":1441,"author":{"gitId":"gerhean"},"content":"                                Adds an interview to the 2nd internship application in the list.\u003c/p\u003e"},{"lineNumber":1442,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":1443,"author":{"gitId":"gerhean"},"content":"                    \u003c/ul\u003e"},{"lineNumber":1444,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1445,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1446,"author":{"gitId":"gerhean"},"content":"                    \u003cul\u003e"},{"lineNumber":1447,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":1448,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003einterview 2 list\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":1449,"author":{"gitId":"gerhean"},"content":"                                \u003ccode\u003einterview 2 edit 1 d/05 05 2020\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":1450,"author":{"gitId":"gerhean"},"content":"                                Edits the date of the 1st interview in the 2nd internship application in the list to"},{"lineNumber":1451,"author":{"gitId":"gerhean"},"content":"                                \u003ccode\u003e05 05 2020\u003c/code\u003e.\u003c/p\u003e"},{"lineNumber":1452,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":1453,"author":{"gitId":"gerhean"},"content":"                    \u003c/ul\u003e"},{"lineNumber":1454,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1455,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1456,"author":{"gitId":"gerhean"},"content":"                    \u003cul\u003e"},{"lineNumber":1457,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":1458,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003e\u003ccode\u003einterview 2 list\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":1459,"author":{"gitId":"gerhean"},"content":"                                \u003ccode\u003einterview 2 delete 3\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":1460,"author":{"gitId":"gerhean"},"content":"                                Deletes the 3rd interview in the 2nd internship application in the list.\u003c/p\u003e"},{"lineNumber":1461,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":1462,"author":{"gitId":"gerhean"},"content":"                    \u003c/ul\u003e"},{"lineNumber":1463,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1464,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":1465,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"sect2\"\u003e"},{"lineNumber":1466,"author":{"gitId":"gerhean"},"content":"                \u003ch3 id\u003d\"getting-applications-due-or-have-interviews-in-7-days-code-reminder-code\"\u003e\u003ca class\u003d\"link\""},{"lineNumber":1467,"author":{"gitId":"gerhean"},"content":"                                                                                                     href\u003d\"#getting-applications-due-or-have-interviews-in-7-days-code-reminder-code\"\u003e4.13."},{"lineNumber":1468,"author":{"gitId":"gerhean"},"content":"                    Getting applications due or have interviews in 7 days: \u003ccode\u003ereminder\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"},{"lineNumber":1469,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":1470,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eDisplays all internship application(s) that:\u003c/p\u003e"},{"lineNumber":1471,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1472,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1473,"author":{"gitId":"gerhean"},"content":"                    \u003cul\u003e"},{"lineNumber":1474,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":1475,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003ehave status \u003ccode\u003ewishlist\u003c/code\u003e and need to be submitted in 7 days\u003c/p\u003e"},{"lineNumber":1476,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":1477,"author":{"gitId":"gerhean"},"content":"                        \u003cli\u003e"},{"lineNumber":1478,"author":{"gitId":"gerhean"},"content":"                            \u003cp\u003ehave status \u003ccode\u003einterview\u003c/code\u003e and interviews scheduled in 7 days\u003c/p\u003e"},{"lineNumber":1479,"author":{"gitId":"gerhean"},"content":"                        \u003c/li\u003e"},{"lineNumber":1480,"author":{"gitId":"gerhean"},"content":"                    \u003c/ul\u003e"},{"lineNumber":1481,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1482,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":1483,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eThe applications will be displayed in order of earliest application date or scheduled interview"},{"lineNumber":1484,"author":{"gitId":"gerhean"},"content":"                        date followed by those with later dates.\u003c/p\u003e"},{"lineNumber":1485,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1486,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":1487,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eThis command helps to remind you of applications which you might want to focus on first, so that"},{"lineNumber":1488,"author":{"gitId":"gerhean"},"content":"                        you do not miss submission deadlines or any upcoming interviews.\u003c/p\u003e"},{"lineNumber":1489,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1490,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":1491,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eFormat: \u003ccode\u003ereminder\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1492,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1493,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"admonitionblock tip\"\u003e"},{"lineNumber":1494,"author":{"gitId":"gerhean"},"content":"                    \u003ctable\u003e"},{"lineNumber":1495,"author":{"gitId":"gerhean"},"content":"                        \u003ctr\u003e"},{"lineNumber":1496,"author":{"gitId":"gerhean"},"content":"                            \u003ctd class\u003d\"icon\"\u003e"},{"lineNumber":1497,"author":{"gitId":"gerhean"},"content":"                                \u003ci class\u003d\"fa icon-tip\" title\u003d\"Tip\"\u003e\u003c/i\u003e"},{"lineNumber":1498,"author":{"gitId":"gerhean"},"content":"                            \u003c/td\u003e"},{"lineNumber":1499,"author":{"gitId":"gerhean"},"content":"                            \u003ctd class\u003d\"content\"\u003e"},{"lineNumber":1500,"author":{"gitId":"gerhean"},"content":"                                \u003ccode\u003ereminder\u003c/code\u003e can be used anytime, but it does not work on archived"},{"lineNumber":1501,"author":{"gitId":"gerhean"},"content":"                                applications."},{"lineNumber":1502,"author":{"gitId":"gerhean"},"content":"                            \u003c/td\u003e"},{"lineNumber":1503,"author":{"gitId":"gerhean"},"content":"                        \u003c/tr\u003e"},{"lineNumber":1504,"author":{"gitId":"gerhean"},"content":"                    \u003c/table\u003e"},{"lineNumber":1505,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1506,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"admonitionblock tip\"\u003e"},{"lineNumber":1507,"author":{"gitId":"gerhean"},"content":"                    \u003ctable\u003e"},{"lineNumber":1508,"author":{"gitId":"gerhean"},"content":"                        \u003ctr\u003e"},{"lineNumber":1509,"author":{"gitId":"gerhean"},"content":"                            \u003ctd class\u003d\"icon\"\u003e"},{"lineNumber":1510,"author":{"gitId":"gerhean"},"content":"                                \u003ci class\u003d\"fa icon-tip\" title\u003d\"Tip\"\u003e\u003c/i\u003e"},{"lineNumber":1511,"author":{"gitId":"gerhean"},"content":"                            \u003c/td\u003e"},{"lineNumber":1512,"author":{"gitId":"gerhean"},"content":"                            \u003ctd class\u003d\"content\"\u003e"},{"lineNumber":1513,"author":{"gitId":"gerhean"},"content":"                                Any command after \u003ccode\u003ereminder\u003c/code\u003e will be ignored.\u003cbr\u003e"},{"lineNumber":1514,"author":{"gitId":"gerhean"},"content":"                                e.g. \u003ccode\u003ereminder dummy variable\u003c/code\u003e be just be treated as \u003ccode\u003ereminder\u003c/code\u003e"},{"lineNumber":1515,"author":{"gitId":"gerhean"},"content":"                            \u003c/td\u003e"},{"lineNumber":1516,"author":{"gitId":"gerhean"},"content":"                        \u003c/tr\u003e"},{"lineNumber":1517,"author":{"gitId":"gerhean"},"content":"                    \u003c/table\u003e"},{"lineNumber":1518,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1519,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":1520,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"sect2\"\u003e"},{"lineNumber":1521,"author":{"gitId":"gerhean"},"content":"                \u003ch3 id\u003d\"clearing-all-entries-code-clear-code\"\u003e\u003ca class\u003d\"link\""},{"lineNumber":1522,"author":{"gitId":"gerhean"},"content":"                                                                 href\u003d\"#clearing-all-entries-code-clear-code\"\u003e4.14."},{"lineNumber":1523,"author":{"gitId":"gerhean"},"content":"                    Clearing all entries: \u003ccode\u003eclear\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"},{"lineNumber":1524,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":1525,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eClears all entries from the Internship Diary.\u003cbr\u003e"},{"lineNumber":1526,"author":{"gitId":"gerhean"},"content":"                        Format: \u003ccode\u003eclear\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1527,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1528,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":1529,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"sect2\"\u003e"},{"lineNumber":1530,"author":{"gitId":"gerhean"},"content":"                \u003ch3 id\u003d\"retrieving-statistics-code-stats-code\"\u003e\u003ca class\u003d\"link\""},{"lineNumber":1531,"author":{"gitId":"gerhean"},"content":"                                                                  href\u003d\"#retrieving-statistics-code-stats-code\"\u003e4.15."},{"lineNumber":1532,"author":{"gitId":"gerhean"},"content":"                    Retrieving statistics: \u003ccode\u003estats\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"},{"lineNumber":1533,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":1534,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eDisplays the statistics about your internship application(s) on the current list.\u003c/p\u003e"},{"lineNumber":1535,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1536,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":1537,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eIt will open a separate window that contains a bar chart and a pie chart.\u003c/p\u003e"},{"lineNumber":1538,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1539,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":1540,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eThe statistics will dynamically update as you modify the current list (e.g. switching between"},{"lineNumber":1541,"author":{"gitId":"gerhean"},"content":"                        main and archival list).\u003c/p\u003e"},{"lineNumber":1542,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1543,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":1544,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eFormat: \u003ccode\u003estats\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1545,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1546,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"sidebarblock\"\u003e"},{"lineNumber":1547,"author":{"gitId":"gerhean"},"content":"                    \u003cdiv class\u003d\"content\"\u003e"},{"lineNumber":1548,"author":{"gitId":"gerhean"},"content":"                        \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1549,"author":{"gitId":"gerhean"},"content":"                            \u003cul\u003e"},{"lineNumber":1550,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e"},{"lineNumber":1551,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eThe bar chart showcases:\u003c/p\u003e"},{"lineNumber":1552,"author":{"gitId":"gerhean"},"content":"                                    \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1553,"author":{"gitId":"gerhean"},"content":"                                        \u003cul\u003e"},{"lineNumber":1554,"author":{"gitId":"gerhean"},"content":"                                            \u003cli\u003e"},{"lineNumber":1555,"author":{"gitId":"gerhean"},"content":"                                                \u003cp\u003ethe count of internship application(s) under each \u003ccode\u003eSTATUS\u003c/code\u003e"},{"lineNumber":1556,"author":{"gitId":"gerhean"},"content":"                                                \u003c/p\u003e"},{"lineNumber":1557,"author":{"gitId":"gerhean"},"content":"                                            \u003c/li\u003e"},{"lineNumber":1558,"author":{"gitId":"gerhean"},"content":"                                        \u003c/ul\u003e"},{"lineNumber":1559,"author":{"gitId":"gerhean"},"content":"                                    \u003c/div\u003e"},{"lineNumber":1560,"author":{"gitId":"gerhean"},"content":"                                \u003c/li\u003e"},{"lineNumber":1561,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e"},{"lineNumber":1562,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eThe pie chart showcases:\u003c/p\u003e"},{"lineNumber":1563,"author":{"gitId":"gerhean"},"content":"                                    \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1564,"author":{"gitId":"gerhean"},"content":"                                        \u003cul\u003e"},{"lineNumber":1565,"author":{"gitId":"gerhean"},"content":"                                            \u003cli\u003e"},{"lineNumber":1566,"author":{"gitId":"gerhean"},"content":"                                                \u003cp\u003ethe percentage of internship application(s) under each"},{"lineNumber":1567,"author":{"gitId":"gerhean"},"content":"                                                    \u003ccode\u003eSTATUS\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1568,"author":{"gitId":"gerhean"},"content":"                                            \u003c/li\u003e"},{"lineNumber":1569,"author":{"gitId":"gerhean"},"content":"                                            \u003cli\u003e"},{"lineNumber":1570,"author":{"gitId":"gerhean"},"content":"                                                \u003cp\u003epercentages are rounded off to two decimal places\u003c/p\u003e"},{"lineNumber":1571,"author":{"gitId":"gerhean"},"content":"                                            \u003c/li\u003e"},{"lineNumber":1572,"author":{"gitId":"gerhean"},"content":"                                        \u003c/ul\u003e"},{"lineNumber":1573,"author":{"gitId":"gerhean"},"content":"                                    \u003c/div\u003e"},{"lineNumber":1574,"author":{"gitId":"gerhean"},"content":"                                \u003c/li\u003e"},{"lineNumber":1575,"author":{"gitId":"gerhean"},"content":"                            \u003c/ul\u003e"},{"lineNumber":1576,"author":{"gitId":"gerhean"},"content":"                        \u003c/div\u003e"},{"lineNumber":1577,"author":{"gitId":"gerhean"},"content":"                    \u003c/div\u003e"},{"lineNumber":1578,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1579,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"admonitionblock tip\"\u003e"},{"lineNumber":1580,"author":{"gitId":"gerhean"},"content":"                    \u003ctable\u003e"},{"lineNumber":1581,"author":{"gitId":"gerhean"},"content":"                        \u003ctr\u003e"},{"lineNumber":1582,"author":{"gitId":"gerhean"},"content":"                            \u003ctd class\u003d\"icon\"\u003e"},{"lineNumber":1583,"author":{"gitId":"gerhean"},"content":"                                \u003ci class\u003d\"fa icon-tip\" title\u003d\"Tip\"\u003e\u003c/i\u003e"},{"lineNumber":1584,"author":{"gitId":"gerhean"},"content":"                            \u003c/td\u003e"},{"lineNumber":1585,"author":{"gitId":"gerhean"},"content":"                            \u003ctd class\u003d\"content\"\u003e"},{"lineNumber":1586,"author":{"gitId":"gerhean"},"content":"                                Alternatively, you may use your mouse to click on \"Statistics\" and then \"View"},{"lineNumber":1587,"author":{"gitId":"gerhean"},"content":"                                Statistics\" to bring up the statistics window."},{"lineNumber":1588,"author":{"gitId":"gerhean"},"content":"                            \u003c/td\u003e"},{"lineNumber":1589,"author":{"gitId":"gerhean"},"content":"                        \u003c/tr\u003e"},{"lineNumber":1590,"author":{"gitId":"gerhean"},"content":"                    \u003c/table\u003e"},{"lineNumber":1591,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1592,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":1593,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"sect2\"\u003e"},{"lineNumber":1594,"author":{"gitId":"gerhean"},"content":"                \u003ch3 id\u003d\"exiting-the-program-code-exit-code\"\u003e\u003ca class\u003d\"link\" href\u003d\"#exiting-the-program-code-exit-code\"\u003e4.16."},{"lineNumber":1595,"author":{"gitId":"gerhean"},"content":"                    Exiting the program: \u003ccode\u003eexit\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"},{"lineNumber":1596,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":1597,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eExits the program.\u003cbr\u003e"},{"lineNumber":1598,"author":{"gitId":"gerhean"},"content":"                        Format: \u003ccode\u003eexit\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1599,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1600,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":1601,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"sect2\"\u003e"},{"lineNumber":1602,"author":{"gitId":"gerhean"},"content":"                \u003ch3 id\u003d\"saving-the-data\"\u003e\u003ca class\u003d\"link\" href\u003d\"#saving-the-data\"\u003e4.17. Saving the data\u003c/a\u003e\u003c/h3\u003e"},{"lineNumber":1603,"author":{"gitId":"gerhean"},"content":"                \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":1604,"author":{"gitId":"gerhean"},"content":"                    \u003cp\u003eInternship Diary is saved in the hard disk automatically after any command that changes the data.\u003cbr\u003e"},{"lineNumber":1605,"author":{"gitId":"gerhean"},"content":"                        There is no need to save manually.\u003c/p\u003e"},{"lineNumber":1606,"author":{"gitId":"gerhean"},"content":"                \u003c/div\u003e"},{"lineNumber":1607,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":1608,"author":{"gitId":"gerhean"},"content":"        \u003c/div\u003e"},{"lineNumber":1609,"author":{"gitId":"gerhean"},"content":"    \u003c/div\u003e"},{"lineNumber":1610,"author":{"gitId":"gerhean"},"content":"    \u003cdiv class\u003d\"sect1\"\u003e"},{"lineNumber":1611,"author":{"gitId":"gerhean"},"content":"        \u003ch2 id\u003d\"faq\"\u003e\u003ca class\u003d\"link\" href\u003d\"#faq\"\u003e5. FAQ\u003c/a\u003e\u003c/h2\u003e"},{"lineNumber":1612,"author":{"gitId":"gerhean"},"content":"        \u003cdiv class\u003d\"sectionbody\"\u003e"},{"lineNumber":1613,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":1614,"author":{"gitId":"gerhean"},"content":"                \u003cp\u003e\u003cstrong\u003eQ\u003c/strong\u003e: How do I transfer my data to another Computer?\u003cbr\u003e"},{"lineNumber":1615,"author":{"gitId":"gerhean"},"content":"                    \u003cstrong\u003eA\u003c/strong\u003e: Install the app in the other computer and overwrite the empty data file it"},{"lineNumber":1616,"author":{"gitId":"gerhean"},"content":"                    creates with the file that contains the data of your previous Internship Diary folder.\u003c/p\u003e"},{"lineNumber":1617,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":1618,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"paragraph\"\u003e"},{"lineNumber":1619,"author":{"gitId":"gerhean"},"content":"                \u003cp\u003e\u003cstrong\u003eQ\u003c/strong\u003e: What happens if I directly change the data stored in the hard drive?\u003cbr\u003e"},{"lineNumber":1620,"author":{"gitId":"gerhean"},"content":"                    \u003cstrong\u003eA\u003c/strong\u003e: The application cannot guarantee the integrity of your data if you tamper with"},{"lineNumber":1621,"author":{"gitId":"gerhean"},"content":"                    the file in the storage.\u003c/p\u003e"},{"lineNumber":1622,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":1623,"author":{"gitId":"gerhean"},"content":"        \u003c/div\u003e"},{"lineNumber":1624,"author":{"gitId":"gerhean"},"content":"    \u003c/div\u003e"},{"lineNumber":1625,"author":{"gitId":"gerhean"},"content":"    \u003cdiv class\u003d\"sect1\"\u003e"},{"lineNumber":1626,"author":{"gitId":"gerhean"},"content":"        \u003ch2 id\u003d\"command-summary\"\u003e\u003ca class\u003d\"link\" href\u003d\"#command-summary\"\u003e6. Command Summary\u003c/a\u003e\u003c/h2\u003e"},{"lineNumber":1627,"author":{"gitId":"gerhean"},"content":"        \u003cdiv class\u003d\"sectionbody\"\u003e"},{"lineNumber":1628,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1629,"author":{"gitId":"gerhean"},"content":"                \u003cul\u003e"},{"lineNumber":1630,"author":{"gitId":"gerhean"},"content":"                    \u003cli\u003e"},{"lineNumber":1631,"author":{"gitId":"gerhean"},"content":"                        \u003cp\u003e\u003cstrong\u003eHelp\u003c/strong\u003e : \u003ccode\u003ehelp\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1632,"author":{"gitId":"gerhean"},"content":"                    \u003c/li\u003e"},{"lineNumber":1633,"author":{"gitId":"gerhean"},"content":"                    \u003cli\u003e"},{"lineNumber":1634,"author":{"gitId":"gerhean"},"content":"                        \u003cp\u003e\u003cstrong\u003eList\u003c/strong\u003e : \u003ccode\u003elist\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1635,"author":{"gitId":"gerhean"},"content":"                    \u003c/li\u003e"},{"lineNumber":1636,"author":{"gitId":"gerhean"},"content":"                    \u003cli\u003e"},{"lineNumber":1637,"author":{"gitId":"gerhean"},"content":"                        \u003cp\u003e\u003cstrong\u003eArchival\u003c/strong\u003e : \u003ccode\u003earchival\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1638,"author":{"gitId":"gerhean"},"content":"                    \u003c/li\u003e"},{"lineNumber":1639,"author":{"gitId":"gerhean"},"content":"                    \u003cli\u003e"},{"lineNumber":1640,"author":{"gitId":"gerhean"},"content":"                        \u003cp\u003e\u003cstrong\u003eSelect\u003c/strong\u003e : \u003ccode\u003eselect INDEX\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1641,"author":{"gitId":"gerhean"},"content":"                    \u003c/li\u003e"},{"lineNumber":1642,"author":{"gitId":"gerhean"},"content":"                    \u003cli\u003e"},{"lineNumber":1643,"author":{"gitId":"gerhean"},"content":"                        \u003cp\u003e\u003cstrong\u003eAdd\u003c/strong\u003e \u003ccode\u003eadd c/COMPANY r/ROLE d/DATE s/STATUS [p/PHONE] [e/EMAIL]"},{"lineNumber":1644,"author":{"gitId":"gerhean"},"content":"                            [a/ADDRESS] [w/PRIORITY]​\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":1645,"author":{"gitId":"gerhean"},"content":"                            e.g. \u003ccode\u003eadd c/Google r/Software engineer s/wishlist d/10 10 2010\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1646,"author":{"gitId":"gerhean"},"content":"                    \u003c/li\u003e"},{"lineNumber":1647,"author":{"gitId":"gerhean"},"content":"                    \u003cli\u003e"},{"lineNumber":1648,"author":{"gitId":"gerhean"},"content":"                        \u003cp\u003e\u003cstrong\u003eDelete\u003c/strong\u003e : \u003ccode\u003edelete INDEX\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":1649,"author":{"gitId":"gerhean"},"content":"                            e.g. \u003ccode\u003edelete 1\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1650,"author":{"gitId":"gerhean"},"content":"                    \u003c/li\u003e"},{"lineNumber":1651,"author":{"gitId":"gerhean"},"content":"                    \u003cli\u003e"},{"lineNumber":1652,"author":{"gitId":"gerhean"},"content":"                        \u003cp\u003e\u003cstrong\u003eArchive\u003c/strong\u003e : \u003ccode\u003earchive INDEX\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":1653,"author":{"gitId":"gerhean"},"content":"                            e.g. \u003ccode\u003earchive 1\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1654,"author":{"gitId":"gerhean"},"content":"                    \u003c/li\u003e"},{"lineNumber":1655,"author":{"gitId":"gerhean"},"content":"                    \u003cli\u003e"},{"lineNumber":1656,"author":{"gitId":"gerhean"},"content":"                        \u003cp\u003e\u003cstrong\u003eUnarchive\u003c/strong\u003e : \u003ccode\u003eunarchive INDEX\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":1657,"author":{"gitId":"gerhean"},"content":"                            e.g. \u003ccode\u003eunarchive 1\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1658,"author":{"gitId":"gerhean"},"content":"                    \u003c/li\u003e"},{"lineNumber":1659,"author":{"gitId":"gerhean"},"content":"                    \u003cli\u003e"},{"lineNumber":1660,"author":{"gitId":"gerhean"},"content":"                        \u003cp\u003e\u003cstrong\u003eEdit\u003c/strong\u003e : \u003ccode\u003eedit INDEX [c/COMPANY] [r/ROLE] [d/DATE] [s/STATUS] [p/PHONE]"},{"lineNumber":1661,"author":{"gitId":"gerhean"},"content":"                            [e/EMAIL] [a/ADDRESS] [w/PRIORITY]\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":1662,"author":{"gitId":"gerhean"},"content":"                            e.g. \u003ccode\u003eedit 2 c/Google s/applied\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1663,"author":{"gitId":"gerhean"},"content":"                    \u003c/li\u003e"},{"lineNumber":1664,"author":{"gitId":"gerhean"},"content":"                    \u003cli\u003e"},{"lineNumber":1665,"author":{"gitId":"gerhean"},"content":"                        \u003cp\u003e\u003cstrong\u003eFind\u003c/strong\u003e : \u003ccode\u003efind [KEYWORDS] [c/COMPANY] [r/ROLE] [a/ADDRESS] [p/PHONE]"},{"lineNumber":1666,"author":{"gitId":"gerhean"},"content":"                            [e/EMAIL] [d/DATE] [w/PRIORITY] [s/STATUS]\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":1667,"author":{"gitId":"gerhean"},"content":"                            e.g. \u003ccode\u003efind c/google r/engineer\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1668,"author":{"gitId":"gerhean"},"content":"                    \u003c/li\u003e"},{"lineNumber":1669,"author":{"gitId":"gerhean"},"content":"                    \u003cli\u003e"},{"lineNumber":1670,"author":{"gitId":"gerhean"},"content":"                        \u003cp\u003e\u003cstrong\u003eSort\u003c/strong\u003e : \u003ccode\u003esort FIELD\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":1671,"author":{"gitId":"gerhean"},"content":"                            e.g. \u003ccode\u003esort c/\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1672,"author":{"gitId":"gerhean"},"content":"                    \u003c/li\u003e"},{"lineNumber":1673,"author":{"gitId":"gerhean"},"content":"                    \u003cli\u003e"},{"lineNumber":1674,"author":{"gitId":"gerhean"},"content":"                        \u003cp\u003e\u003cstrong\u003eInterview\u003c/strong\u003e :\u003c/p\u003e"},{"lineNumber":1675,"author":{"gitId":"gerhean"},"content":"                        \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1676,"author":{"gitId":"gerhean"},"content":"                            \u003cul\u003e"},{"lineNumber":1677,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e"},{"lineNumber":1678,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eAdd:"},{"lineNumber":1679,"author":{"gitId":"gerhean"},"content":"                                        \u003ccode\u003einterview INTERNSHIP_INDEX add d/DATE o/IS_ONLINE [a/ADDRESS]\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":1680,"author":{"gitId":"gerhean"},"content":"                                        e.g. \u003ccode\u003einterview 1 add d/20 12 2020 o/true\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1681,"author":{"gitId":"gerhean"},"content":"                                \u003c/li\u003e"},{"lineNumber":1682,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e"},{"lineNumber":1683,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eList:"},{"lineNumber":1684,"author":{"gitId":"gerhean"},"content":"                                        \u003ccode\u003einterview INTERNSHIP_INDEX list\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":1685,"author":{"gitId":"gerhean"},"content":"                                        e.g. \u003ccode\u003einterview 1 list\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1686,"author":{"gitId":"gerhean"},"content":"                                \u003c/li\u003e"},{"lineNumber":1687,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e"},{"lineNumber":1688,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eEdit:"},{"lineNumber":1689,"author":{"gitId":"gerhean"},"content":"                                        \u003ccode\u003einterview INTERNSHIP_INDEX edit INTERVIEW_INDEX [a/ADDRESS] [d/DATE]"},{"lineNumber":1690,"author":{"gitId":"gerhean"},"content":"                                            [o/IS_ONLINE]\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":1691,"author":{"gitId":"gerhean"},"content":"                                        e.g. \u003ccode\u003einterview 1 edit 1 d/10 10 2020\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1692,"author":{"gitId":"gerhean"},"content":"                                \u003c/li\u003e"},{"lineNumber":1693,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e"},{"lineNumber":1694,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eDelete:"},{"lineNumber":1695,"author":{"gitId":"gerhean"},"content":"                                        \u003ccode\u003einterview INTERNSHIP_INDEX delete INTERVIEW_INDEX\u003c/code\u003e\u003cbr\u003e"},{"lineNumber":1696,"author":{"gitId":"gerhean"},"content":"                                        e.g. \u003ccode\u003einterview 1 delete 1\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1697,"author":{"gitId":"gerhean"},"content":"                                \u003c/li\u003e"},{"lineNumber":1698,"author":{"gitId":"gerhean"},"content":"                            \u003c/ul\u003e"},{"lineNumber":1699,"author":{"gitId":"gerhean"},"content":"                        \u003c/div\u003e"},{"lineNumber":1700,"author":{"gitId":"gerhean"},"content":"                    \u003c/li\u003e"},{"lineNumber":1701,"author":{"gitId":"gerhean"},"content":"                    \u003cli\u003e"},{"lineNumber":1702,"author":{"gitId":"gerhean"},"content":"                        \u003cp\u003e\u003cstrong\u003eReminder\u003c/strong\u003e : \u003ccode\u003ereminder\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1703,"author":{"gitId":"gerhean"},"content":"                    \u003c/li\u003e"},{"lineNumber":1704,"author":{"gitId":"gerhean"},"content":"                    \u003cli\u003e"},{"lineNumber":1705,"author":{"gitId":"gerhean"},"content":"                        \u003cp\u003e\u003cstrong\u003eClear\u003c/strong\u003e : \u003ccode\u003eclear\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1706,"author":{"gitId":"gerhean"},"content":"                    \u003c/li\u003e"},{"lineNumber":1707,"author":{"gitId":"gerhean"},"content":"                    \u003cli\u003e"},{"lineNumber":1708,"author":{"gitId":"gerhean"},"content":"                        \u003cp\u003e\u003cstrong\u003eStatistics\u003c/strong\u003e : \u003ccode\u003estats\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1709,"author":{"gitId":"gerhean"},"content":"                    \u003c/li\u003e"},{"lineNumber":1710,"author":{"gitId":"gerhean"},"content":"                    \u003cli\u003e"},{"lineNumber":1711,"author":{"gitId":"gerhean"},"content":"                        \u003cp\u003e\u003cstrong\u003eExit\u003c/strong\u003e : \u003ccode\u003eexit\u003c/code\u003e\u003c/p\u003e"},{"lineNumber":1712,"author":{"gitId":"gerhean"},"content":"                    \u003c/li\u003e"},{"lineNumber":1713,"author":{"gitId":"gerhean"},"content":"                \u003c/ul\u003e"},{"lineNumber":1714,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":1715,"author":{"gitId":"gerhean"},"content":"        \u003c/div\u003e"},{"lineNumber":1716,"author":{"gitId":"gerhean"},"content":"    \u003c/div\u003e"},{"lineNumber":1717,"author":{"gitId":"gerhean"},"content":"    \u003cdiv class\u003d\"sect1\"\u003e"},{"lineNumber":1718,"author":{"gitId":"gerhean"},"content":"        \u003ch2 id\u003d\"glossary\"\u003e\u003ca class\u003d\"link\" href\u003d\"#glossary\"\u003e7. Glossary\u003c/a\u003e\u003c/h2\u003e"},{"lineNumber":1719,"author":{"gitId":"gerhean"},"content":"        \u003cdiv class\u003d\"sectionbody\"\u003e"},{"lineNumber":1720,"author":{"gitId":"gerhean"},"content":"            \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1721,"author":{"gitId":"gerhean"},"content":"                \u003cul\u003e"},{"lineNumber":1722,"author":{"gitId":"gerhean"},"content":"                    \u003cli\u003e"},{"lineNumber":1723,"author":{"gitId":"gerhean"},"content":"                        \u003cp\u003eAlphanumerical\u003c/p\u003e"},{"lineNumber":1724,"author":{"gitId":"gerhean"},"content":"                        \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1725,"author":{"gitId":"gerhean"},"content":"                            \u003cul\u003e"},{"lineNumber":1726,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e"},{"lineNumber":1727,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eEither a letter of the English language (a-z, A-Z) or a Roman numeral (0-9).\u003c/p\u003e"},{"lineNumber":1728,"author":{"gitId":"gerhean"},"content":"                                \u003c/li\u003e"},{"lineNumber":1729,"author":{"gitId":"gerhean"},"content":"                            \u003c/ul\u003e"},{"lineNumber":1730,"author":{"gitId":"gerhean"},"content":"                        \u003c/div\u003e"},{"lineNumber":1731,"author":{"gitId":"gerhean"},"content":"                    \u003c/li\u003e"},{"lineNumber":1732,"author":{"gitId":"gerhean"},"content":"                    \u003cli\u003e"},{"lineNumber":1733,"author":{"gitId":"gerhean"},"content":"                        \u003cp\u003eChronological order\u003c/p\u003e"},{"lineNumber":1734,"author":{"gitId":"gerhean"},"content":"                        \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1735,"author":{"gitId":"gerhean"},"content":"                            \u003cul\u003e"},{"lineNumber":1736,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e"},{"lineNumber":1737,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eThe order of events in which events which occurred earlier would be placed before"},{"lineNumber":1738,"author":{"gitId":"gerhean"},"content":"                                        events which occurred later.\u003c/p\u003e"},{"lineNumber":1739,"author":{"gitId":"gerhean"},"content":"                                \u003c/li\u003e"},{"lineNumber":1740,"author":{"gitId":"gerhean"},"content":"                            \u003c/ul\u003e"},{"lineNumber":1741,"author":{"gitId":"gerhean"},"content":"                        \u003c/div\u003e"},{"lineNumber":1742,"author":{"gitId":"gerhean"},"content":"                    \u003c/li\u003e"},{"lineNumber":1743,"author":{"gitId":"gerhean"},"content":"                    \u003cli\u003e"},{"lineNumber":1744,"author":{"gitId":"gerhean"},"content":"                        \u003cp\u003eDictionary order:\u003c/p\u003e"},{"lineNumber":1745,"author":{"gitId":"gerhean"},"content":"                        \u003cdiv class\u003d\"ulist\"\u003e"},{"lineNumber":1746,"author":{"gitId":"gerhean"},"content":"                            \u003cul\u003e"},{"lineNumber":1747,"author":{"gitId":"gerhean"},"content":"                                \u003cli\u003e"},{"lineNumber":1748,"author":{"gitId":"gerhean"},"content":"                                    \u003cp\u003eThe order which words would be ordered in a dictionary.\u003c/p\u003e"},{"lineNumber":1749,"author":{"gitId":"gerhean"},"content":"                                \u003c/li\u003e"},{"lineNumber":1750,"author":{"gitId":"gerhean"},"content":"                            \u003c/ul\u003e"},{"lineNumber":1751,"author":{"gitId":"gerhean"},"content":"                        \u003c/div\u003e"},{"lineNumber":1752,"author":{"gitId":"gerhean"},"content":"                    \u003c/li\u003e"},{"lineNumber":1753,"author":{"gitId":"gerhean"},"content":"                \u003c/ul\u003e"},{"lineNumber":1754,"author":{"gitId":"gerhean"},"content":"            \u003c/div\u003e"},{"lineNumber":1755,"author":{"gitId":"gerhean"},"content":"        \u003c/div\u003e"},{"lineNumber":1756,"author":{"gitId":"gerhean"},"content":"    \u003c/div\u003e"},{"lineNumber":1757,"author":{"gitId":"gerhean"},"content":"\u003c/div\u003e"},{"lineNumber":1758,"author":{"gitId":"gerhean"},"content":"\u003cdiv id\u003d\"footer\"\u003e"},{"lineNumber":1759,"author":{"gitId":"gerhean"},"content":"    \u003cdiv class\u003d\"container\"\u003e"},{"lineNumber":1760,"author":{"gitId":"gerhean"},"content":"        \u003cdiv id\u003d\"footer-text\"\u003eLast updated 2020-04-13 03:47:22 UTC\u003c/div\u003e"},{"lineNumber":1761,"author":{"gitId":"gerhean"},"content":"    \u003c/div\u003e"},{"lineNumber":1762,"author":{"gitId":"gerhean"},"content":"\u003c/div\u003e"},{"lineNumber":1763,"author":{"gitId":"gerhean"},"content":"\u003c/body\u003e"},{"lineNumber":1764,"author":{"gitId":"gerhean"},"content":"\u003c/html\u003e"}],"authorContributionMap":{"gerhean":1764}},{"path":"src/main/resources/view/CommandBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"  \u003cTextField fx:id\u003d\"commandTextField\" onKeyPressed\u003d\"#handleKeyPressed\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"gerhean":1,"-":8}},{"path":"src/main/resources/view/ComparatorDisplayFooter.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"  \u003ccolumnConstraints\u003e"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"  \u003c/columnConstraints\u003e"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"  \u003cLabel fx:id\u003d\"comparatorLabel\" /\u003e"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"\u003c/GridPane\u003e"}],"authorContributionMap":{"gerhean":12}},{"path":"src/main/resources/view/HelpWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"\u003c?import javafx.scene.web.WebView?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.stage.Stage?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"\u003cfx:root title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  \u003cicons\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cscene\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003cScene\u003e"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"        \u003cAnchorPane\u003e"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"            \u003cWebView fx:id\u003d\"guideView\" prefHeight\u003d\"450.0\" prefWidth\u003d\"700.0\""},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"                     AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"                     AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"/\u003e"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"        \u003c/AnchorPane\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"gerhean":8,"-":14}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"\u003c?import javafx.stage.Stage?\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Internship Diary\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003cicons\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cImage url\u003d\"@/images/internship_app.jpg\" /\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003c/icons\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \u003cscene\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cScene\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            \u003cstylesheets\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                \u003cURL value\u003d\"@Extensions.css\" /\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            \u003c/stylesheets\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"            \u003cVBox\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                    \u003c/Menu\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                    \u003c/Menu\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Statistics\"\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                        \u003cMenuItem fx:id\u003d\"statisticsMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleStatistics\" text\u003d\"View Statistics\" /\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                    \u003c/Menu\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                \u003c/MenuBar\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                    \u003cpadding\u003e"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                    \u003c/padding\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                \u003c/StackPane\u003e"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"                \u003cSplitPane dividerPositions\u003d\"0.2\" orientation\u003d\"VERTICAL\" VBox.vgrow\u003d\"ALWAYS\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"                           fx:id\u003d\"resultAndInternshipSplitPanePlaceholder\"\u003e"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"                    \u003citems\u003e"},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"                        \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefWidth\u003d\"160.0\"\u003e"},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"                            \u003cchildren\u003e"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":"                                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" minHeight\u003d\"100\" prefHeight\u003d\"100\" prefWidth\u003d\"195.0\" styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                                    \u003cpadding\u003e"},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":"                                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                                    \u003c/padding\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                                \u003c/StackPane\u003e"},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":"                            \u003c/children\u003e"},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":"                        \u003c/AnchorPane\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                        \u003cSplitPane orientation\u003d\"HORIZONTAL\" VBox.vgrow\u003d\"ALWAYS\""},{"lineNumber":59,"author":{"gitId":"-"},"content":"                                   fx:id\u003d\"listAndDetailsSplitPanePlaceholder\"\u003e"},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":"                            \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"160.0\"\u003e"},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":"                                \u003cchildren\u003e"},{"lineNumber":62,"author":{"gitId":"gerhean"},"content":"                                    \u003cVBox fx:id\u003d\"internshipApplicationList\" minWidth\u003d\"340\" prefWidth\u003d\"340\""},{"lineNumber":63,"author":{"gitId":"gerhean"},"content":"                                          styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"0.0\""},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":"                                          AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":"                                          AnchorPane.topAnchor\u003d\"0.0\"\u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                                        \u003cpadding\u003e"},{"lineNumber":67,"author":{"gitId":"gerhean"},"content":"                                            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\"/\u003e"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                                        \u003c/padding\u003e"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                                        \u003cStackPane fx:id\u003d\"internshipApplicationListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                                    \u003c/VBox\u003e"},{"lineNumber":71,"author":{"gitId":"gerhean"},"content":"                                \u003c/children\u003e"},{"lineNumber":72,"author":{"gitId":"gerhean"},"content":"                            \u003c/AnchorPane\u003e"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                            \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"340\""},{"lineNumber":74,"author":{"gitId":"-"},"content":"                                        VBox.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                                \u003cchildren\u003e"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                                    \u003cVBox fx:id\u003d\"internshipApplicationDetail\" minWidth\u003d\"340\" prefWidth\u003d\"340\""},{"lineNumber":77,"author":{"gitId":"-"},"content":"                                          styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"0.0\""},{"lineNumber":78,"author":{"gitId":"-"},"content":"                                          AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""},{"lineNumber":79,"author":{"gitId":"-"},"content":"                                          AnchorPane.topAnchor\u003d\"0.0\"\u003e"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                                        \u003cpadding\u003e"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                                            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\"/\u003e"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                                        \u003c/padding\u003e"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                                        \u003cStackPane fx:id\u003d\"internshipApplicationDetailPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                                    \u003c/VBox\u003e"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                                \u003c/children\u003e"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                            \u003c/AnchorPane\u003e"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                        \u003c/SplitPane\u003e"},{"lineNumber":88,"author":{"gitId":"gerhean"},"content":"                    \u003c/items\u003e"},{"lineNumber":89,"author":{"gitId":"gerhean"},"content":"                \u003c/SplitPane\u003e"},{"lineNumber":90,"author":{"gitId":"gerhean"},"content":"                \u003cHBox\u003e"},{"lineNumber":91,"author":{"gitId":"gerhean"},"content":"                    \u003cchildren\u003e"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                        \u003cStackPane fx:id\u003d\"viewDisplayPlaceholder\" minWidth\u003d\"-Infinity\" style\u003d\"-fx-border-width: 0px 1px 0px 0px; -fx-border-color: white;\" /\u003e"},{"lineNumber":93,"author":{"gitId":"gerhean"},"content":"                        \u003cStackPane fx:id\u003d\"comparatorDisplayPlaceholder\" minWidth\u003d\"-Infinity\" style\u003d\"-fx-border-width: 0px 1px 0px 0px; -fx-border-color: white;\" /\u003e"},{"lineNumber":94,"author":{"gitId":"gerhean"},"content":"                        \u003cStackPane fx:id\u003d\"predicateDisplayPlaceholder\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"},{"lineNumber":95,"author":{"gitId":"gerhean"},"content":"                    \u003c/children\u003e"},{"lineNumber":96,"author":{"gitId":"gerhean"},"content":"                \u003c/HBox\u003e"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                \u003cStackPane fx:id\u003d\"statisticsPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            \u003c/VBox\u003e"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        \u003c/Scene\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    \u003c/scene\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"gerhean":31,"-":71}},{"path":"src/main/resources/view/PredicateDisplayFooter.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"  \u003ccolumnConstraints\u003e"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"  \u003c/columnConstraints\u003e"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"  \u003cLabel fx:id\u003d\"predicateLabel\" /\u003e"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"\u003c/GridPane\u003e"}],"authorContributionMap":{"gerhean":12}},{"path":"src/main/resources/view/ResultDisplay.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextArea?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""},{"lineNumber":7,"author":{"gitId":"-"},"content":"    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\"/\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e"}],"authorContributionMap":{"gerhean":1,"-":8}},{"path":"src/main/resources/view/StatisticsWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.chart.BarChart?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.chart.CategoryAxis?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.chart.NumberAxis?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.chart.PieChart?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.stage.Stage?\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"\u003cfx:root resizable\u003d\"false\" title\u003d\"Internship Diary Statistics\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003cscene\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        \u003cScene\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            \u003cstylesheets\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"                \u003cURL value\u003d\"@Statistics.css\" /\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            \u003c/stylesheets\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            \u003cVBox\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"                \u003cchildren\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"                    \u003cBarChart fx:id\u003d\"internshipApplicationChart\"\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"                        \u003cxAxis\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"                            \u003cCategoryAxis fx:id\u003d\"status\" side\u003d\"BOTTOM\" /\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"                        \u003c/xAxis\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                        \u003cyAxis\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                            \u003cNumberAxis fx:id\u003d\"count\" side\u003d\"LEFT\" /\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                        \u003c/yAxis\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                    \u003c/BarChart\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                    \u003cPieChart fx:id\u003d\"internshipApplicationPie\" /\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                \u003c/children\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                \u003copaqueInsets\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                \u003c/opaqueInsets\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                \u003cpadding\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                \u003c/padding\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            \u003c/VBox\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        \u003c/Scene\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    \u003c/scene\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"gerhean":1,"-":39}},{"path":"src/test/data/JsonInternshipDiaryStorageTest/invalidAndValidInternshipInternshipDiary.json","fileType":"json","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"{"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":"  \"internships\": [ {"},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"    \"company\": \"Valid Company\","},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"    \"role\": \"Fun officer\","},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"    \"address\": \"4th street\","},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"    \"phone\": \"9482424\","},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"    \"applicationDate\": \"11 11 2020\","},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"    \"priority\": \"1\","},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"status\": \"ACTIVE\","},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"interview\": []"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"  }, {"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"    \"company\": \"Company With Invalid Phone Field\","},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"    \"role\": \"Fun officer\","},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"    \"address\": \"4th street\","},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"    \"phone\": \"948asdf2424\","},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"    \"applicationDate\": \"11 11 2020\","},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"    \"priority\": \"1\","},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \"status\": \"ACTIVE\","},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \"interviews\": []"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"  } ]"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":19,"-":4}},{"path":"src/test/data/JsonInternshipDiaryStorageTest/invalidInternshipInternshipDiary.json","fileType":"json","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"{"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":"  \"internships\": [ {"},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"    \"company\": \"Company with inv@lid name\","},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"    \"role\": \"Fun officer\","},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"    \"address\": \"4th street\","},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"    \"phone\": \"9482424\","},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"    \"applicationDate\": \"11 11 2020\","},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"    \"priority\": \"1\","},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"status\": \"ACTIVE\","},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"interviews\": []"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"  } ]"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":11,"-":2}},{"path":"src/test/data/JsonInternshipDiaryStorageTest/notJsonFormatInternshipDiary.json","fileType":"json","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"not json format!"}],"authorContributionMap":{"gerhean":1}},{"path":"src/test/data/JsonSerializableInternshipDiaryTest/duplicateInternshipInternshipDiary.json","fileType":"json","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"{"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":"  \"internships\": [ {"},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"    \"company\": \"Alice Inc\","},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"    \"role\": \"Fun officer\","},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"    \"address\": \"4th street\","},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"    \"phone\": \"9482424\","},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"    \"applicationDate\": \"11 11 2020\","},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"    \"priority\": \"1\","},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"status\": \"APPLIED\","},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"interviews\": [],"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"isArchived\": \"false\","},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"lastStage\": \"WISHLIST\""},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"  }, {"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"    \"company\": \"Alice Inc\","},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"    \"role\": \"Fun officer\","},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"    \"address\": \"4th street\","},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"    \"phone\": \"9482424\","},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"    \"applicationDate\": \"11 11 2020\","},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"    \"priority\": \"2\","},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \"status\": \"REJECTED\","},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \"interviews\": [],"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \"isArchived\": \"false\","},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \"lastStage\": \"APPLIED\""},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"  } ]"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":19,"-":8}},{"path":"src/test/data/JsonSerializableInternshipDiaryTest/invalidInternshipInternshipDiary.json","fileType":"json","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"{"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":"  \"internships\": [ {"},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"    \"company\": \"Alice Inc\","},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"    \"role\": \"Fun officer\","},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"    \"address\": \"4th street\","},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"    \"phone\": \"9482424\","},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"    \"email\": \"invalid@ex@mple!com\","},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"    \"applicationDate\": \"11 11 2020\","},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"    \"priority\": \"1\","},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"status\": \"APPLIED\","},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"interviews\": [],"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"isArchived\": \"false\","},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"lastStage\": \"WISHLIST\""},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"  } ]"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":11,"-":4}},{"path":"src/test/data/JsonSerializableInternshipDiaryTest/typicalInternshipsInternshipDiary.json","fileType":"json","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"_comment\": \"InternshipDiary save file which contains the same Internship Application values as in TypicalInternshipApplications#getTypicalInternshipDiary()\","},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"  \"internships\" : [ {"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"    \"company\": \"Google\","},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"    \"role\": \"Software Engineer\","},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"    \"address\": \"1600 Amphitheatre Parkway\","},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"    \"phone\": \"94351253\","},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"    \"email\": \"larry@google.com\","},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \"applicationDate\": \"23 03 2020\","},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"    \"priority\": \"10\","},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"status\": \"APPLIED\","},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"interviews\": [],"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"isArchived\": \"false\","},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \"lastStage\": \"WISHLIST\""},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"  }, {"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"    \"company\": \"Facebook\","},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"    \"role\": \"Product Management\","},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"    \"address\": \"1 Hacker Way, Menlo Park\","},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"    \"phone\": \"99751354\","},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"    \"email\": \"mark@google.com\","},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \"applicationDate\": \"25 03 2020\","},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"    \"priority\": \"8\","},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \"status\": \"INTERVIEW\","},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \"interviews\": [],"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \"isArchived\": \"false\","},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \"lastStage\": \"APPLIED\""},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"  } ]"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":17,"-":11}},{"path":"src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json","fileType":"json","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"extra\" : \"some value \","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"x\" : 300,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"      \"y\" : 100,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"      \"z\" : 99"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"  \"internshipDiaryFilePath\" : \"internshipdiary.json\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":1,"-":12}},{"path":"src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json","fileType":"json","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      \"x\" : 300,"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"y\" : 100"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"  \"internshipDiaryFilePath\" : \"internshipdiary.json\""},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":1,"-":10}},{"path":"src/test/java/seedu/diary/AppParametersTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class AppParametersTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final ParametersStub parametersStub \u003d new ParametersStub();"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final AppParameters expected \u003d new AppParameters();"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void parse_validConfigPath_success() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"config.json\");"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        expected.setConfigPath(Paths.get(\"config.json\"));"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void parse_nullConfigPath_success() {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", null);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void parse_invalidConfigPath_success() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"a\\0\");"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        expected.setConfigPath(null);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static class ParametersStub extends Application.Parameters {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getRaw() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getUnnamed() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        public Map\u003cString, String\u003e getNamed() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return Collections.unmodifiableMap(namedParameters);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":1,"-":57}},{"path":"src/test/java/seedu/diary/commons/core/ConfigTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class ConfigTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"Preference file Location : preferences.json\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":1,"-":26}},{"path":"src/test/java/seedu/diary/commons/core/VersionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class VersionTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void versionConstructor_correctParameter_valueAsExpected() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(19, 10, 20, true);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(19, version.getMajor());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(10, version.getMinor());"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(20, version.getPatch());"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(true, version.isEarlyAccess());"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void versionToString_validVersion_correctStringRepresentation() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // boundary at 0"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(0, 0, 0, true);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(\"V0.0.0ea\", version.toString());"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // normal values"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        version \u003d new Version(4, 10, 5, false);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(\"V4.10.5\", version.toString());"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // big numbers"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        version \u003d new Version(100, 100, 100, true);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(\"V100.100.100ea\", version.toString());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_compareToIsCorrect() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Version one;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Version another;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // Tests equality"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, true);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        one \u003d new Version(11, 12, 13, false);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        another \u003d new Version(11, 12, 13, false);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Tests different patch"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 5, false);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Tests different minor"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 5, 0, false);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Tests different major"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // Tests high major vs low minor"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, true);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Tests high patch vs low minor"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 10, false);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, false);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // Tests same major minor different patch"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Tests early access vs not early access on same version number"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 0, false);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // Tests early access lower version vs not early access higher version compare by version number first"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Tests early access higher version vs not early access lower version compare by version number first"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, true);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_hashCodeIsCorrect() {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(100, 100, 100, true);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertEquals(100100100, version.hashCode());"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        version \u003d new Version(10, 10, 10, false);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(1010010010, version.hashCode());"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_equalIsCorrect() {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Version one;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Version another;"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        one \u003d new Version(100, 191, 275, true);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        another \u003d new Version(100, 191, 275, true);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void verifyVersionParsedCorrectly(String versionString,"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        int major, int minor, int patch, boolean isEarlyAccess) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":2,"-":133}},{"path":"src/test/java/seedu/diary/commons/core/index/IndexTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.commons.core.index;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class IndexTest {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void createOneBasedIndex() {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        // invalid index"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"        // check equality using the same base"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromOneBased(1).getOneBased());"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromOneBased(5).getOneBased());"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // convert from one-based index to zero-based index"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromOneBased(1).getZeroBased());"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertEquals(4, Index.fromOneBased(5).getZeroBased());"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void createZeroBasedIndex() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // invalid index"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // check equality using the same base"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // convert from zero-based index to one-based index"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromZeroBased(0).getOneBased());"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(6, Index.fromZeroBased(5).getOneBased());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        final Index fifthInternshipApplicationIndex \u003d Index.fromOneBased(5);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"        assertEquals(fifthInternshipApplicationIndex, Index.fromOneBased(5));"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"        assertEquals(fifthInternshipApplicationIndex, Index.fromZeroBased(4));"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"        assertEquals(fifthInternshipApplicationIndex, fifthInternshipApplicationIndex);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(null, fifthInternshipApplicationIndex);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(fifthInternshipApplicationIndex.equals(5.0f));"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":58,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(fifthInternshipApplicationIndex, Index.fromOneBased(1));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":8,"-":52}},{"path":"src/test/java/seedu/diary/commons/util/AppUtilTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class AppUtilTest {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void getImage_exitingImage() {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void checkArgument_true_nothingHappens() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true, \"\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"error message\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":2,"-":34}},{"path":"src/test/java/seedu/diary/commons/util/CollectionUtilTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class CollectionUtilTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void requireAllNonNullVarargs() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // no arguments"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // any non-empty argument list"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(new Object(), new Object());"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"test\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"\");"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // argument lists with just one null at the beginning"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object) null);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, \"\", new Object());"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, new Object(), new Object());"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // argument lists with nulls in the middle"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", null, new Object());"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // argument lists with one null as the last argument"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", new Object(), null);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), new Object(), null);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // null reference"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object[]) null);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // confirms nulls inside lists in the argument list are not considered"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(containingNull, new Object());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void requireAllNonNullCollection() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // lists containing nulls in the front"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // lists containing nulls in the middle"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // lists containing nulls at the end"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // null reference"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // empty list"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Collections.emptyList());"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // list with all non-null elements"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // confirms nulls inside nested lists are not considered"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void isAnyNonNull() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull());"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * if {@code objects} or any element of {@code objects} is null."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Object... objects) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * if {@code collection} or any element of {@code collection} is null."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Object... objects) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        requireAllNonNull(objects);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(collection);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":3,"-":105}},{"path":"src/test/java/seedu/diary/commons/util/ConfigUtilTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.Config;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ConfigUtilTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path tempDir;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void read_null_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e read(null));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(read(\"NonExistentFile.json\").isPresent());"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void read_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"TypicalConfig.json\").get();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"EmptyConfig.json\").get();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new Config(), actual);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private Config getTypicalConfig() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Config config \u003d new Config();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        config.setLogLevel(Level.INFO);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return config;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return ConfigUtil.readConfig(configFilePath);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void save_nullConfig_throwsNullPointerException() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void save_nullFile_throwsNullPointerException() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Config original \u003d getTypicalConfig();"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        original.setLogLevel(Level.FINE);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void save(Config config, String configFileInTestDataFolder) throws IOException {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(config, configFilePath);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return configFileInTestDataFolder !\u003d null"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            : null;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":4,"-":112}},{"path":"src/test/java/seedu/diary/commons/util/DateTimeUtilTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.commons.util;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import java.time.DateTimeException;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"public class DateTimeUtilTest {"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"    public void parseDate_invalidDate_throwsDateTimeParseException() {"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"        // null"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"        String invalidApplicationDate0 \u003d null;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"        // empty string"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"        String invalidApplicationDate1 \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"        // random letters"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"        String invalidApplicationDate2 \u003d \"asdfqawe\";"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"        // No numbers"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"        String invalidApplicationDate3 \u003d \"/ / \";"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"        // Invalid date-like string"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"        String invalidApplicationDate4 \u003d \"12/13/2020\";"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"        // Bad date format"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"        String invalidApplicationDate5 \u003d \"12^12^2020\";"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"        // Extra stuff"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"        String invalidApplicationDate6 \u003d \"12/12/2020 haha\";"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"        // Too much numbers"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"        String invalidApplicationDate7 \u003d \"12/12/12/2020\";"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"        // Invalid leap year"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"        String invalidApplicationDate8 \u003d \"29/2/2019\";"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"        // Invalid 31 days month"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"        String invalidApplicationDate9 \u003d \"31/4/2020\";"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"        assertThrows(NullPointerException.class, () -\u003e DateTimeUtil.parseDate(invalidApplicationDate0));"},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"        assertThrows(DateTimeException.class, () -\u003e DateTimeUtil.parseDate(invalidApplicationDate1));"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"        assertThrows(DateTimeException.class, () -\u003e DateTimeUtil.parseDate(invalidApplicationDate2));"},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"        assertThrows(DateTimeException.class, () -\u003e DateTimeUtil.parseDate(invalidApplicationDate3));"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"        assertThrows(DateTimeException.class, () -\u003e DateTimeUtil.parseDate(invalidApplicationDate4));"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"        assertThrows(DateTimeException.class, () -\u003e DateTimeUtil.parseDate(invalidApplicationDate5));"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"        assertThrows(DateTimeException.class, () -\u003e DateTimeUtil.parseDate(invalidApplicationDate6));"},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"        assertThrows(DateTimeException.class, () -\u003e DateTimeUtil.parseDate(invalidApplicationDate7));"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"        assertThrows(DateTimeException.class, () -\u003e DateTimeUtil.parseDate(invalidApplicationDate8));"},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"        assertThrows(DateTimeException.class, () -\u003e DateTimeUtil.parseDate(invalidApplicationDate9));"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"    public void parseDate_validDate_returnsCorrectDate() {"},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"        int currentYear \u003d LocalDate.now().getYear();"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":"        LocalDate date1 \u003d LocalDate.of(2019, 3, 1);"},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":"        LocalDate date2 \u003d LocalDate.of(currentYear, 4, 2);"},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":55,"author":{"gitId":"gerhean"},"content":"        LocalDate date3 \u003d LocalDate.of(2020, 2, 29);"},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":"        LocalDate date4 \u003d LocalDate.of(2020, 3, 31);"},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":58,"author":{"gitId":"gerhean"},"content":"        // parse correctly"},{"lineNumber":59,"author":{"gitId":"gerhean"},"content":"        assertEquals(DateTimeUtil.parseDate(\"1 3 2019\"), date1);"},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":"        assertEquals(DateTimeUtil.parseDate(\"01 03 2019\"), date1);"},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":"        assertEquals(DateTimeUtil.parseDate(\"1/3-2019\"), date1);"},{"lineNumber":62,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":63,"author":{"gitId":"gerhean"},"content":"        assertEquals(DateTimeUtil.parseDate(\"2/4\"), date2);"},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":"        assertEquals(DateTimeUtil.parseDate(\"29 2 2020\"), date3);"},{"lineNumber":66,"author":{"gitId":"gerhean"},"content":"        assertEquals(DateTimeUtil.parseDate(\"31 3 2020\"), date4);"},{"lineNumber":67,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":68}},{"path":"src/test/java/seedu/diary/commons/util/FileUtilTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class FileUtilTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void isValidPath() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        // valid path"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"        // invalid path"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertFalse(FileUtil.isValidPath(\"a\\0\"));"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // null path -\u003e throws NullPointerException"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":2,"-":21}},{"path":"src/test/java/seedu/diary/commons/util/JsonUtilTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.SerializableTestClass;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.TestUtil;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Tests JSON Read and Write"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonUtilTest {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        serializableTestClass.setTestValues();"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d JsonUtil"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":3,"-":42}},{"path":"src/test/java/seedu/diary/commons/util/StringUtilTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class StringUtilTest {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void isNonZeroUnsignedInteger() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // EP: empty strings"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // EP: not a number"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // EP: zero"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // EP: zero as prefix"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // EP: signed numbers"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // EP: numbers with white space"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // EP: valid numbers, should return true"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for sentence: null"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The four test cases below test one invalid input at a time."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for word:"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     *   - any word"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *   - word containing symbols/numbers"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     *   - word with leading/trailing spaces"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for sentence:"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *   - empty string"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *   - one word"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *   - multiple words"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *   - sentence with extra spaces"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Possible scenarios returning true:"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     *   - matches first word in sentence"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     *   - last word in sentence"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     *   - middle word in sentence"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     *   - matches multiple words"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Possible scenarios returning false:"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     *   - query word matches part of a sentence word"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     *   - sentence word matches part of the query word"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // Empty sentence"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Matches a partial word only"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // Matches multiple words in sentence"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Equivalence Partitions: null, valid throwable object"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void getDetails_exceptionGiven() {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            .contains(\"java.io.FileNotFoundException: file not found\"));"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":2,"-":141}},{"path":"src/test/java/seedu/diary/logic/LogicManagerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.COMPANY_DESC_AMY;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.DATE_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.PRIORITY_DESC_AMY;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.ROLE_DESC_AMY;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.STATUS_DESC_AMY;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInternshipApplications.AMY;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.AddCommand;"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.CommandResult;"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.InitClearCommand;"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.ListCommand;"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.exceptions.CommandException;"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.ClearCommandConfirmationParser;"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.exceptions.ParseException;"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ModelManager;"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ReadOnlyInternshipDiary;"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.UserPrefs;"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"import seedu.diary.storage.JsonInternshipDiaryStorage;"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"import seedu.diary.storage.JsonUserPrefsStorage;"},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"import seedu.diary.storage.StorageManager;"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipApplicationBuilder;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":"        JsonInternshipDiaryStorage internshipDiaryStorage \u003d"},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":"            new JsonInternshipDiaryStorage(temporaryFolder.resolve(\"internshipDiary.json\"));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":"        StorageManager storage \u003d new StorageManager(internshipDiaryStorage, userPrefsStorage);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":79,"author":{"gitId":"gerhean"},"content":"    public void execute_commandChangeParser_parserChanged() throws Exception {"},{"lineNumber":80,"author":{"gitId":"gerhean"},"content":"        String initClearCommand \u003d InitClearCommand.COMMAND_WORD;"},{"lineNumber":81,"author":{"gitId":"gerhean"},"content":"        assertCommandSuccess(initClearCommand, InitClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":82,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":83,"author":{"gitId":"gerhean"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":84,"author":{"gitId":"gerhean"},"content":"        assertParseException(listCommand, ClearCommandConfirmationParser.CANCEL_CLEAR_COMMAND);"},{"lineNumber":85,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":86,"author":{"gitId":"gerhean"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":87,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":91,"author":{"gitId":"gerhean"},"content":"        // Setup LogicManager with JsonInternshipDiaryIoExceptionThrowingStub"},{"lineNumber":92,"author":{"gitId":"gerhean"},"content":"        JsonInternshipDiaryStorage internshipDiaryStorage \u003d"},{"lineNumber":93,"author":{"gitId":"gerhean"},"content":"            new JsonInternshipDiaryIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionInternshipDiary.json\"));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"},{"lineNumber":96,"author":{"gitId":"gerhean"},"content":"        StorageManager storage \u003d new StorageManager(internshipDiaryStorage, userPrefsStorage);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        // Execute add command"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + COMPANY_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            + ADDRESS_DESC_AMY + ROLE_DESC_AMY + DATE_DESC_AMY + PRIORITY_DESC_AMY + STATUS_DESC_AMY;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        InternshipApplication expectedInternshipApplication \u003d new InternshipApplicationBuilder(AMY).build();"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        expectedModel.addInternshipApplication(expectedInternshipApplication);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void getFilteredInternshipApplicationList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredInternshipApplicationList().remove(0));"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":119,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Model expectedModel) throws CommandException, ParseException {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":131,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":140,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":149,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        String expectedMessage) {"},{"lineNumber":154,"author":{"gitId":"gerhean"},"content":"        Model expectedModel \u003d new ModelManager(model.getInternshipDiary(), new UserPrefs());"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":163,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        String expectedMessage, Model expectedModel) {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":174,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitId":"gerhean"},"content":"    private static class JsonInternshipDiaryIoExceptionThrowingStub extends JsonInternshipDiaryStorage {"},{"lineNumber":176,"author":{"gitId":"gerhean"},"content":"        private JsonInternshipDiaryIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":181,"author":{"gitId":"gerhean"},"content":"        public void saveInternshipDiary(ReadOnlyInternshipDiary internshipDiary, Path filePath) throws IOException {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":56,"-":130}},{"path":"src/test/java/seedu/diary/logic/commands/AddCommandIntegrationTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ModelManager;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipApplicationBuilder;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void execute_newInternshipApplication_success() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        InternshipApplication validInternshipApplication \u003d new InternshipApplicationBuilder().build();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getInternshipDiary(), new UserPrefs());"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        expectedModel.addInternshipApplication(validInternshipApplication);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new AddCommand(validInternshipApplication), model,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            String.format(AddCommand.MESSAGE_SUCCESS, validInternshipApplication), expectedModel,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            validInternshipApplication);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void execute_duplicateInternshipApplication_throwsCommandException() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        InternshipApplication internshipInList \u003d model.getInternshipDiary().getDisplayedInternshipList().get(0);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertCommandFailure(new AddCommand(internshipInList), model, AddCommand.MESSAGE_DUPLICATE_INTERNSHIP);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":9,"-":37}},{"path":"src/test/java/seedu/diary/logic/commands/AddCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.beans.PropertyChangeListener;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import java.util.Comparator;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.GuiSettings;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.archival.InternshipApplicationViewType;"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.InternshipDiary;"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ListenerPropertyType;"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ReadOnlyInternshipDiary;"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ReadOnlyUserPrefs;"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.statistics.Statistics;"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipApplicationBuilder;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class AddCommandTest {"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void constructor_nullInternshipApplication_throwsNullPointerException() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void execute_internshipApplicationAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        ModelStubAcceptingInternshipAdded modelStub \u003d new ModelStubAcceptingInternshipAdded();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        InternshipApplication validInternshipApplication \u003d new InternshipApplicationBuilder().build();"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validInternshipApplication).execute(modelStub);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validInternshipApplication),"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            commandResult.getFeedbackToUser());"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"        assertEquals(Collections.singletonList(validInternshipApplication), modelStub.internshipsAdded);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_duplicateInternshipApplication_throwsCommandException() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        InternshipApplication validInternshipApplication \u003d new InternshipApplicationBuilder().build();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validInternshipApplication);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithInternshipApplication(validInternshipApplication);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class,"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            AddCommand.MESSAGE_DUPLICATE_INTERNSHIP, () -\u003e addCommand.execute(modelStub));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        InternshipApplication nus \u003d new InternshipApplicationBuilder().withCompany(\"NUS\").build();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        InternshipApplication ntu \u003d new InternshipApplicationBuilder().withCompany(\"NTU\").build();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        AddCommand addNusCommand \u003d new AddCommand(nus);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        AddCommand addNtuCommand \u003d new AddCommand(ntu);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":68,"author":{"gitId":"gerhean"},"content":"        assertEquals(addNusCommand, addNusCommand);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        AddCommand addNUsCommandCopy \u003d new AddCommand(nus);"},{"lineNumber":72,"author":{"gitId":"gerhean"},"content":"        assertEquals(addNusCommand, addNUsCommandCopy);"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":75,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(1, addNusCommand);"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":78,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(null, addNusCommand);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // different company -\u003e returns false"},{"lineNumber":81,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(addNusCommand, addNtuCommand);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"gerhean"},"content":"    private static class ModelStub implements Model {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        public Path getInternshipDiaryFilePath() {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        public void setInternshipDiaryFilePath(Path internshipDiaryFilePath) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        public void setInternshipDiary(ReadOnlyInternshipDiary internshipDiary) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        public ReadOnlyInternshipDiary getInternshipDiary() {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        public boolean hasInternshipApplication(InternshipApplication internshipApplication) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        public void archiveInternshipApplication(InternshipApplication target) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        public void unarchiveInternshipApplication(InternshipApplication target) {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        public void deleteInternshipApplication(InternshipApplication target) {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        public void addInternshipApplication(InternshipApplication internshipApplication) {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        public void setInternshipApplication(InternshipApplication target, InternshipApplication editedInternship) {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        public ObservableList\u003cInternshipApplication\u003e getAllInternshipApplicationList() {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"gerhean"},"content":"        @Override"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        public ObservableList\u003cInternshipApplication\u003e getFilteredInternshipApplicationList() {"},{"lineNumber":165,"author":{"gitId":"gerhean"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":166,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        public void updateFilteredInternshipApplicationList(Predicate\u003cInternshipApplication\u003e predicate) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"gerhean"},"content":"        @Override"},{"lineNumber":174,"author":{"gitId":"gerhean"},"content":"        public void updateFilteredInternshipApplicationList(Comparator\u003cInternshipApplication\u003e comparator) {"},{"lineNumber":175,"author":{"gitId":"gerhean"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":176,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":177,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        public void viewArchivedInternshipApplicationList() {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        public void viewUnarchivedInternshipApplicationList() {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        public InternshipApplicationViewType getCurrentView() {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"gerhean"},"content":"        @Override"},{"lineNumber":194,"author":{"gitId":"gerhean"},"content":"        public void displayInternshipDetail(InternshipApplication internshipApplication) {"},{"lineNumber":195,"author":{"gitId":"gerhean"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":196,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":197,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":199,"author":{"gitId":"gerhean"},"content":"        public void addPropertyChangeListener(ListenerPropertyType propertyType, PropertyChangeListener l) {"},{"lineNumber":200,"author":{"gitId":"gerhean"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":201,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":202,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        public Statistics getStatistics() {"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":211,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single internship application."},{"lineNumber":212,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitId":"gerhean"},"content":"    private static class ModelStubWithInternshipApplication extends ModelStub {"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        private final InternshipApplication internshipApplication;"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"        ModelStubWithInternshipApplication(InternshipApplication internshipApplication) {"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            requireNonNull(internshipApplication);"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            this.internshipApplication \u003d internshipApplication;"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"        public boolean hasInternshipApplication(InternshipApplication internshipApplication) {"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            requireNonNull(internshipApplication);"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            return this.internshipApplication.isSameInternshipApplication(internshipApplication);"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":228,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the internship application being added."},{"lineNumber":229,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":230,"author":{"gitId":"gerhean"},"content":"    private static class ModelStubAcceptingInternshipAdded extends ModelStub {"},{"lineNumber":231,"author":{"gitId":"gerhean"},"content":"        private final ArrayList\u003cInternshipApplication\u003e internshipsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        public boolean hasInternshipApplication(InternshipApplication internshipApplication) {"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            requireNonNull(internshipApplication);"},{"lineNumber":236,"author":{"gitId":"-"},"content":"            return internshipsAdded.stream().anyMatch(internshipApplication::isSameInternshipApplication);"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        public void addInternshipApplication(InternshipApplication internshipApplication) {"},{"lineNumber":241,"author":{"gitId":"-"},"content":"            requireNonNull(internshipApplication);"},{"lineNumber":242,"author":{"gitId":"-"},"content":"            internshipsAdded.add(internshipApplication);"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        public ReadOnlyInternshipDiary getInternshipDiary() {"},{"lineNumber":247,"author":{"gitId":"-"},"content":"            return new InternshipDiary();"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":45,"-":206}},{"path":"src/test/java/seedu/diary/logic/commands/ArchivalCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.showInternshipApplicationAtIndex;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.InternshipDiary;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ModelManager;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.UserPrefs;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipApplicationBuilder;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code ArchivalCommand}."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ArchivalCommandTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Model expectedModel;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // create archived internship applications"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        InternshipApplication firstInternshipApplicationArchived \u003d new InternshipApplicationBuilder().build();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        firstInternshipApplicationArchived \u003d firstInternshipApplicationArchived.archive();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        InternshipApplication secondInternshipApplicationArchived \u003d new InternshipApplicationBuilder().build();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        secondInternshipApplicationArchived \u003d secondInternshipApplicationArchived.archive();"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // create and load internship diaries"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        InternshipDiary firstInternshipDiary \u003d new InternshipDiary();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        firstInternshipDiary.loadInternshipApplication(firstInternshipApplicationArchived);"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        InternshipDiary secondInternshipDiary \u003d new InternshipDiary();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        secondInternshipDiary.loadInternshipApplication(secondInternshipApplicationArchived);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // create models"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(firstInternshipDiary, new UserPrefs());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        expectedModel \u003d new ModelManager(secondInternshipDiary, new UserPrefs());"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // view is archived internship list"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        model.viewArchivedInternshipApplicationList();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        expectedModel.viewArchivedInternshipApplicationList();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_archivalIsNotFiltered_showsSameArchival() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        model.viewArchivedInternshipApplicationList();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        expectedModel.viewArchivedInternshipApplicationList();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ArchivalCommand(), model, ArchivalCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void execute_archivalIsFiltered_showsEverythingInArchival() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        model.viewArchivedInternshipApplicationList();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        expectedModel.viewArchivedInternshipApplicationList();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        showInternshipApplicationAtIndex(model, INDEX_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ArchivalCommand(), model, ArchivalCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void execute_inMainListView_showsArchivalList() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        expectedModel.viewArchivedInternshipApplicationList();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ArchivalCommand(), model, ArchivalCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":10,"-":61}},{"path":"src/test/java/seedu/diary/logic/commands/ArchiveCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP_APPLICATION;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.Messages;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.UserPrefs;"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model, and Archival Command) and unit tests for"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * {@code ArchiveCommand}."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class ArchiveCommandTest {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    // default view is unarchived internship list (no need to set view)"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void execute_archiveInternshipApplication_success() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ArchiveCommand archiveCommand \u003d new ArchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            archiveCommand.execute(expectedModel);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        InternshipApplication archivedInternshipApplication \u003d"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            expectedModel.getAllInternshipApplicationList().get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(archivedInternshipApplication.isArchived());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void execute_archiveAlreadyArchivedInternshipApplication_throwsException() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        ArchiveCommand archiveCommand \u003d new ArchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            archiveCommand.execute(expectedModel);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        expectedModel.viewArchivedInternshipApplicationList();"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, () -\u003e archiveCommand.execute(expectedModel));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void execute_archiveOneInternshipApplication_archivalViewCorrect() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // model"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ArchiveCommand archiveCommand \u003d new ArchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            archiveCommand.execute(model);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        model.viewArchivedInternshipApplicationList();"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // expected model"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        InternshipApplication ia \u003d expectedModel.getFilteredInternshipApplicationList()"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        expectedModel.archiveInternshipApplication(ia);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        expectedModel.viewArchivedInternshipApplicationList();"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // can\u0027t use assertCommandSuccess because have to change view of internshipDiary after execution of command"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // assertCommandSuccess(archiveCommand, model, expectedMessage, expectedModel);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertEquals(model, expectedModel);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void execute_archiveOneInternshipApplication_listViewCorrect() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // model"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        ArchiveCommand archiveCommand \u003d new ArchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // expected model"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        InternshipApplication ia \u003d expectedModel.getFilteredInternshipApplicationList()"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        expectedModel.archiveInternshipApplication(ia);"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d ia.toString();"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // default view is unarchived so we can use assertCommandSuccess"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertCommandSuccess(archiveCommand, model, expectedMessage, expectedModel);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void execute_invalidIndex_throwsCommandException() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredInternshipApplicationList().size() + 1);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        ArchiveCommand archiveCommand \u003d new ArchiveCommand(outOfBoundIndex);"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertCommandFailure(archiveCommand, model, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        ArchiveCommand archiveFirstCommand \u003d new ArchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        ArchiveCommand archiveSecondCommand \u003d new ArchiveCommand(INDEX_SECOND_INTERNSHIP_APPLICATION);"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertTrue(archiveFirstCommand.equals(archiveFirstCommand));"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        ArchiveCommand archiveFirstCommandCopy \u003d new ArchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertTrue(archiveFirstCommand.equals(archiveFirstCommandCopy));"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertFalse(archiveFirstCommand.equals(1));"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertFalse(archiveFirstCommand.equals(null));"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // different internship application index -\u003e returns false"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertFalse(archiveFirstCommand.equals(archiveSecondCommand));"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":12,"-":122}},{"path":"src/test/java/seedu/diary/logic/commands/ClearCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.InternshipDiary;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ModelManager;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.UserPrefs;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_emptyInternshipDiary_success() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyInternshipDiary_success() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        expectedModel.setInternshipDiary(new InternshipDiary());"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":7,"-":25}},{"path":"src/test/java/seedu/diary/logic/commands/CommandResultTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResultTest {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(commandResult));"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(null));"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(0.5f));"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns false"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"different\")));"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns false"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false)));"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different showStatistics value -\u003e returns false"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false)));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns false"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, true)));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void hashcode() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // same values -\u003e returns same hashcode"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns different hashcode"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns different hashcode"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false).hashCode());"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // different showStatistics value -\u003e returns different hashcode"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false).hashCode());"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns different hashcode"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false, true).hashCode());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":1,"-":61}},{"path":"src/test/java/seedu/diary/logic/commands/CommandTestUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_COMPANY;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_IS_ONLINE;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.interviewsubcommands.InterviewEditCommand;"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.InternshipDiary;"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.diary.model.internship.interview.OnlineInterview;"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.CompanyContainsKeywordsPredicate;"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.EditInternshipDescriptorBuilder;"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.EditInterviewDescriptorBuilder;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":33,"author":{"gitId":"-"},"content":" */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_COMPANY_AMY \u003d \"Amy\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_COMPANY_BOB \u003d \"Bob\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_ROLE_AMY \u003d \"Software Engineer\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_ROLE_BOB \u003d \"Designer\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String VALID_DATE_AMY \u003d \"03 04 2016\";"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String VALID_DATE_BOB \u003d \"01 02 2020\";"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String VALID_PRIORITY_AMY \u003d \"2\";"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String VALID_PRIORITY_BOB \u003d \"1\";"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String VALID_STATUS_AMY \u003d \"WISHLIST\";"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String VALID_STATUS_BOB \u003d \"APPLIED\";"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String VALID_LAST_STAGE_AMY \u003d \"WISHLIST\";"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String VALID_LAST_STAGE_BOB \u003d \"APPLIED\";"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_NUS \u003d \"123 Kent Ridge Road\";"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_ONLINE \u003d OnlineInterview.ADDRESS_NOT_APPLICABLE.toString();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String VALID_DATE_NUS \u003d \"10 10 2010\";"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String VALID_DATE_ONLINE \u003d \"20 02 2020\";"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String VALID_IS_ONLINE_NUS \u003d \"false\";"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String VALID_IS_ONLINE_ONLINE \u003d \"true\";"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String COMPANY_DESC_AMY \u003d \" \" + PREFIX_COMPANY + VALID_COMPANY_AMY;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String COMPANY_DESC_BOB \u003d \" \" + PREFIX_COMPANY + VALID_COMPANY_BOB;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final String ROLE_DESC_AMY \u003d \" \" + PREFIX_ROLE + VALID_ROLE_AMY;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static final String ROLE_DESC_BOB \u003d \" \" + PREFIX_ROLE + VALID_ROLE_BOB;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public static final String DATE_DESC_AMY \u003d \" \" + PREFIX_DATE + VALID_DATE_AMY;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static final String DATE_DESC_BOB \u003d \" \" + PREFIX_DATE + VALID_DATE_BOB;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static final String PRIORITY_DESC_AMY \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_AMY;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final String PRIORITY_DESC_BOB \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_BOB;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final String STATUS_DESC_AMY \u003d \" \" + PREFIX_STATUS + VALID_STATUS_AMY;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public static final String STATUS_DESC_BOB \u003d \" \" + PREFIX_STATUS + VALID_STATUS_BOB;"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_NUS \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_NUS;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_ONLINE \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_ONLINE;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public static final String DATE_DESC_NUS \u003d \" \" + PREFIX_DATE + VALID_DATE_NUS;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public static final String DATE_DESC_ONLINE \u003d \" \" + PREFIX_DATE + VALID_DATE_ONLINE;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public static final String ONLINE_DESC_NUS \u003d \" \" + PREFIX_IS_ONLINE + VALID_IS_ONLINE_NUS;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public static final String ONLINE_DESC_ONLINE \u003d \" \" + PREFIX_IS_ONLINE + VALID_IS_ONLINE_ONLINE;"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static final String INVALID_COMPANY_DESC \u003d \" \" + PREFIX_COMPANY + \"Google\u0026\"; // \u0027\u0026\u0027 not allowed in company"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public static final String INVALID_ROLE_DESC \u003d \" \" + PREFIX_ROLE + \"So\u0026\"; // \u0027\u0026\u0027 not allowed in company"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS + \" \"; // no invalid addresses"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"010420\"; // date format is DD MM YYYY"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public static final String INVALID_PRIORITY_DESC \u003d \" \" + PREFIX_PRIORITY + \"a\"; // only numbers allowed in priority"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public static final String INVALID_STATUS_DESC \u003d \" \" + PREFIX_STATUS + \"Not\"; // \u0027Not\u0027 is not a status"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public static final String INVALID_BOOLEAN_DESC \u003d \" \" + PREFIX_IS_ONLINE + \"n\"; // \u0027n\u0027 is not a boolean"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditInternshipDescriptor DESC_AMY;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditInternshipDescriptor DESC_BOB;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public static final InterviewEditCommand.EditInterviewDescriptor DESC_NUS;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public static final InterviewEditCommand.EditInterviewDescriptor DESC_ONLINE;"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditInternshipDescriptorBuilder().withCompany(VALID_COMPANY_AMY)"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            .withRole(VALID_ROLE_AMY).withApplicationDate(VALID_DATE_AMY).withPriority(VALID_PRIORITY_AMY)"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            .withStatus(VALID_STATUS_AMY).build();"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditInternshipDescriptorBuilder().withCompany(VALID_COMPANY_BOB)"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            .withRole(VALID_ROLE_BOB).withApplicationDate(VALID_DATE_BOB).withPriority(VALID_PRIORITY_BOB)"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            .withStatus(VALID_STATUS_BOB).build();"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        DESC_NUS \u003d new EditInterviewDescriptorBuilder().withAddress(VALID_ADDRESS_NUS)"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            .withInterviewDate(VALID_DATE_NUS).withIsOnline(VALID_IS_ONLINE_NUS).build();"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        DESC_ONLINE \u003d new EditInterviewDescriptorBuilder().withAddress(VALID_ADDRESS_ONLINE)"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            .withInterviewDate(VALID_DATE_ONLINE).withIsOnline(VALID_IS_ONLINE_ONLINE).build();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        Model expectedModel) {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}."},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Model expectedModel) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":146,"author":{"gitId":"gerhean"},"content":"     * Compares to a command that takes in an internship application to display."},{"lineNumber":147,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        Model expectedModel, InternshipApplication internshipApplication) {"},{"lineNumber":150,"author":{"gitId":"gerhean"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     * - the internship diary, filtered internship application list and selected internship application in"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * {@code actualModel} remain unchanged"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // only do so by copying its components."},{"lineNumber":164,"author":{"gitId":"-"},"content":"        InternshipDiary expectedInternshipDiary \u003d new InternshipDiary(actualModel.getInternshipDiary());"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        List\u003cInternshipApplication\u003e expectedFilteredList \u003d"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            new ArrayList\u003c\u003e(actualModel.getFilteredInternshipApplicationList());"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertEquals(expectedInternshipDiary, actualModel.getInternshipDiary());"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredInternshipApplicationList());"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the internship application at the given"},{"lineNumber":175,"author":{"gitId":"-"},"content":"     * {@code targetIndex} in the"},{"lineNumber":176,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s internship diary."},{"lineNumber":177,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    public static void showInternshipApplicationAtIndex(Model model, Index targetIndex) {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredInternshipApplicationList().size());"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"        InternshipApplication internshipApplication \u003d"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            model.getFilteredInternshipApplicationList().get(targetIndex.getZeroBased());"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d internshipApplication.getCompany().fullCompany.split(\"\\\\s+\");"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        model.updateFilteredInternshipApplicationList("},{"lineNumber":185,"author":{"gitId":"-"},"content":"            new CompanyContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredInternshipApplicationList().size());"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":191,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the internship application at the given"},{"lineNumber":192,"author":{"gitId":"-"},"content":"     * {@code targetIndices} in the"},{"lineNumber":193,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s internship diary."},{"lineNumber":194,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    public static void showInternshipApplicationAtIndices(Model model, List\u003cIndex\u003e targetIndices) {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        // check that all indices are valid"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        for (Index targetIndex : targetIndices) {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredInternshipApplicationList().size());"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"        List\u003cInternshipApplication\u003e internshipApplications \u003d new ArrayList\u003c\u003e();"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"        // get all internship applications and place them in list"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        for (Index targetIndex : targetIndices) {"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            InternshipApplication internshipApplication \u003d"},{"lineNumber":206,"author":{"gitId":"-"},"content":"                model.getFilteredInternshipApplicationList().get(targetIndex.getZeroBased());"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            internshipApplications.add(internshipApplication);"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d new ArrayList\u003c\u003e();"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"        // extract all company name keywords from internship applications"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        for (InternshipApplication internshipApplication : internshipApplications) {"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            final String[] splitName \u003d internshipApplication.getCompany().fullCompany.split(\"\\\\s+\");"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            for (String name : splitName) {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"                keywords.add(name);"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"        // filter internship applications list based on the company name keywords"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        model.updateFilteredInternshipApplicationList(new CompanyContainsKeywordsPredicate(keywords));"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":25,"-":200}},{"path":"src/test/java/seedu/diary/logic/commands/EditCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_COMPANY_BOB;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.showInternshipApplicationAtIndex;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP_APPLICATION;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.Messages;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.EditCommand.EditInternshipDescriptor;"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.InternshipDiary;"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ModelManager;"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.UserPrefs;"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.EditInternshipDescriptorBuilder;"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipApplicationBuilder;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":31,"author":{"gitId":"-"},"content":" */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class EditCommandTest {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        InternshipApplication editedInternshipApplication \u003d new InternshipApplicationBuilder().build();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        EditInternshipDescriptor descriptor \u003d"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            new EditInternshipDescriptorBuilder(editedInternshipApplication).build();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, descriptor);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_INTERNSHIP_SUCCESS,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            editedInternshipApplication);"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new InternshipDiary(model.getInternshipDiary()), new UserPrefs());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        expectedModel.setInternshipApplication(model.getFilteredInternshipApplicationList().get(0),"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            editedInternshipApplication);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel, editedInternshipApplication);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Index indexLastInternship \u003d Index.fromOneBased(model.getFilteredInternshipApplicationList().size());"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        InternshipApplication lastInternshipApplication \u003d"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            model.getFilteredInternshipApplicationList().get(indexLastInternship.getZeroBased());"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        InternshipApplicationBuilder internshipApplicationInList \u003d"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            new InternshipApplicationBuilder(lastInternshipApplication);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        InternshipApplication editedInternshipApplication \u003d internshipApplicationInList"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            .withCompany(VALID_COMPANY_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            .build();"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        EditInternshipDescriptor descriptor \u003d new EditInternshipDescriptorBuilder().withCompany(VALID_COMPANY_BOB)"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            .withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastInternship, descriptor);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_INTERNSHIP_SUCCESS,"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            editedInternshipApplication);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new InternshipDiary(model.getInternshipDiary()), new UserPrefs());"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        expectedModel.setInternshipApplication(lastInternshipApplication, editedInternshipApplication);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel, editedInternshipApplication);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, new EditInternshipDescriptor());"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        InternshipApplication editedInternshipApplication \u003d"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            model.getFilteredInternshipApplicationList().get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            String.format(EditCommand.MESSAGE_EDIT_INTERNSHIP_SUCCESS, editedInternshipApplication);"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new InternshipDiary(model.getInternshipDiary()), new UserPrefs());"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel, editedInternshipApplication);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        showInternshipApplicationAtIndex(model, INDEX_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        model.viewUnarchivedInternshipApplicationList();"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        InternshipApplication internshipApplicationInFilteredList \u003d"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            model.getFilteredInternshipApplicationList().get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        InternshipApplication editedInternshipApplication \u003d"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            new InternshipApplicationBuilder(internshipApplicationInFilteredList)"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                .withCompany(VALID_COMPANY_BOB).build();"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            new EditInternshipDescriptorBuilder().withCompany(VALID_COMPANY_BOB).build());"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_INTERNSHIP_SUCCESS,"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            editedInternshipApplication);"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new InternshipDiary(model.getInternshipDiary()), new UserPrefs());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        expectedModel.setInternshipApplication(model.getFilteredInternshipApplicationList().get(0),"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            editedInternshipApplication);"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel, editedInternshipApplication);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void execute_duplicateInternshipApplicationUnfilteredList_failure() {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        InternshipApplication firstInternshipApplication \u003d"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            model.getFilteredInternshipApplicationList().get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        EditInternshipDescriptor descriptor \u003d new EditInternshipDescriptorBuilder(firstInternshipApplication).build();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_INTERNSHIP_APPLICATION, descriptor);"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_INTERNSHIP);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public void execute_duplicateInternshipApplicationFilteredList_failure() {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        showInternshipApplicationAtIndex(model, INDEX_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        // edit internship application in filtered list into a duplicate in diary book"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        InternshipApplication internshipApplicationInList \u003d"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            model.getInternshipDiary().getDisplayedInternshipList()"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                .get(INDEX_SECOND_INTERNSHIP_APPLICATION.getZeroBased());"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            new EditInternshipDescriptorBuilder(internshipApplicationInList).build());"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_INTERNSHIP);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void execute_invalidInternshipApplicationIndexUnfilteredList_failure() {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredInternshipApplicationList().size() + 1);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        EditCommand.EditInternshipDescriptor descriptor \u003d"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            new EditInternshipDescriptorBuilder().withCompany(VALID_COMPANY_BOB).build();"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":150,"author":{"gitId":"gerhean"},"content":"     * but smaller than size of diary book"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    public void execute_invalidInternshipApplicationIndexFilteredList_failure() {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        showInternshipApplicationAtIndex(model, INDEX_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_INTERNSHIP_APPLICATION;"},{"lineNumber":156,"author":{"gitId":"gerhean"},"content":"        // ensures that outOfBoundIndex is still in bounds of diary book list"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getInternshipDiary().getDisplayedInternshipList().size());"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            new EditInternshipDescriptorBuilder().withCompany(VALID_COMPANY_BOB).build());"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, DESC_AMY);"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        EditInternshipDescriptor copyDescriptor \u003d new EditInternshipDescriptor(DESC_AMY);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, copyDescriptor);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_INTERNSHIP_APPLICATION, DESC_AMY)));"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, DESC_BOB)));"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":23,"-":167}},{"path":"src/test/java/seedu/diary/logic/commands/EditInternshipDescriptorTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_COMPANY_BOB;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_DATE_BOB;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_PRIORITY_BOB;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_ROLE_BOB;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_STATUS_BOB;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.EditInternshipDescriptorBuilder;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class EditInternshipDescriptorTest {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        EditCommand.EditInternshipDescriptor descriptorWithSameValues \u003d"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            new EditCommand.EditInternshipDescriptor(DESC_AMY);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // different company -\u003e returns false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        EditCommand.EditInternshipDescriptor editedAmy \u003d"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            new EditInternshipDescriptorBuilder(DESC_AMY).withCompany(VALID_COMPANY_BOB).build();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditInternshipDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditInternshipDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":"        // different diary -\u003e returns false"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditInternshipDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        //different date -\u003e returns false"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditInternshipDescriptorBuilder(DESC_AMY).withApplicationDate(VALID_DATE_BOB).build();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        //different role -\u003e returns false"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditInternshipDescriptorBuilder(DESC_AMY).withRole(VALID_ROLE_BOB).build();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        //different priority -\u003e returns false"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditInternshipDescriptorBuilder(DESC_AMY).withPriority(VALID_PRIORITY_BOB).build();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        //different status -\u003e returns false"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditInternshipDescriptorBuilder(DESC_AMY).withStatus(VALID_STATUS_BOB).build();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":13,"-":61}},{"path":"src/test/java/seedu/diary/logic/commands/ExitCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ModelManager;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ExitCommandTest {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_exit_success() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult("},{"lineNumber":18,"author":{"gitId":"-"},"content":"            MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, true"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":5,"-":17}},{"path":"src/test/java/seedu/diary/logic/commands/FindCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.core.Messages.MESSAGE_INTERNSHIP_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.PredicateUtil.prepareAddressPredicate;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.PredicateUtil.prepareCompanyPredicate;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.PredicateUtil.prepareEmailPredicate;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.PredicateUtil.preparePhonePredicate;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.PredicateUtil.preparePriorityPredicate;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.PredicateUtil.prepareRolePredicate;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.PredicateUtil.prepareStatusPredicate;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ModelManager;"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.UserPrefs;"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.AddressContainsKeywordsPredicate;"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.ApplicationDateIsDatePredicate;"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.CompanyContainsKeywordsPredicate;"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.EmailContainsKeywordsPredicate;"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.PhoneContainsNumbersPredicate;"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.PriorityContainsNumbersPredicate;"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.RoleContainsKeywordsPredicate;"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.StatusContainsKeywordsPredicate;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":38,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":39,"author":{"gitId":"-"},"content":" */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"public class FindCommandTest {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        CompanyContainsKeywordsPredicate cFirstPredicate \u003d"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            new CompanyContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        CompanyContainsKeywordsPredicate cSecondPredicate \u003d"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            new CompanyContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        RoleContainsKeywordsPredicate rFirstPredicate \u003d"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            new RoleContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        RoleContainsKeywordsPredicate rSecondPredicate \u003d"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            new RoleContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AddressContainsKeywordsPredicate aFirstPredicate \u003d"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            new AddressContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AddressContainsKeywordsPredicate aSecondPredicate \u003d"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            new AddressContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        PhoneContainsNumbersPredicate pFirstPredicate \u003d"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            new PhoneContainsNumbersPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        PhoneContainsNumbersPredicate pSecondPredicate \u003d"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            new PhoneContainsNumbersPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        EmailContainsKeywordsPredicate eFirstPredicate \u003d"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            new EmailContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        EmailContainsKeywordsPredicate eSecondPredicate \u003d"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            new EmailContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        ApplicationDateIsDatePredicate dFirstPredicate \u003d"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            new ApplicationDateIsDatePredicate(LocalDate.of(2020, 02, 01));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ApplicationDateIsDatePredicate dSecondPredicate \u003d"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            new ApplicationDateIsDatePredicate(LocalDate.of(2021, 03, 02));"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        PriorityContainsNumbersPredicate wFirstPredicate \u003d"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            new PriorityContainsNumbersPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        PriorityContainsNumbersPredicate wSecondPredicate \u003d"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            new PriorityContainsNumbersPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        StatusContainsKeywordsPredicate sFirstPredicate \u003d"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            new StatusContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        StatusContainsKeywordsPredicate sSecondPredicate \u003d"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            new StatusContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(List.of(cFirstPredicate, rFirstPredicate, aFirstPredicate,"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            pFirstPredicate, eFirstPredicate, dFirstPredicate, wFirstPredicate, sFirstPredicate), false);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(List.of(cFirstPredicate, rFirstPredicate, aFirstPredicate,"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            pFirstPredicate, eFirstPredicate, dFirstPredicate, wFirstPredicate, sFirstPredicate), true);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        FindCommand findThirdCommand \u003d new FindCommand(List.of(cFirstPredicate, rFirstPredicate, aFirstPredicate,"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            pFirstPredicate, eFirstPredicate, dFirstPredicate, wFirstPredicate, sSecondPredicate), false);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        FindCommand findFourthCommand \u003d new FindCommand(List.of(cFirstPredicate, rFirstPredicate, aFirstPredicate,"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            pFirstPredicate, eFirstPredicate, dFirstPredicate, wSecondPredicate, sFirstPredicate), false);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        FindCommand findFifthCommand \u003d new FindCommand(List.of(cFirstPredicate, rFirstPredicate, aFirstPredicate,"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            pFirstPredicate, eFirstPredicate, dSecondPredicate, wFirstPredicate, sFirstPredicate), false);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        FindCommand findSixthCommand \u003d new FindCommand(List.of(cFirstPredicate, rFirstPredicate, aFirstPredicate,"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            pFirstPredicate, eSecondPredicate, dFirstPredicate, wFirstPredicate, sFirstPredicate), false);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        FindCommand findSeventhCommand \u003d new FindCommand(List.of(cFirstPredicate, rFirstPredicate, aFirstPredicate,"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            pSecondPredicate, eFirstPredicate, dFirstPredicate, wFirstPredicate, sFirstPredicate), false);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        FindCommand findEighthCommand \u003d new FindCommand(List.of(cFirstPredicate, rFirstPredicate, aSecondPredicate,"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            pFirstPredicate, eFirstPredicate, dFirstPredicate, wFirstPredicate, sFirstPredicate), false);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        FindCommand findNinthCommand \u003d new FindCommand(List.of(cFirstPredicate, rSecondPredicate, aFirstPredicate,"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            pFirstPredicate, eFirstPredicate, dFirstPredicate, wFirstPredicate, sFirstPredicate), false);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        FindCommand findTenthCommand \u003d new FindCommand(List.of(cSecondPredicate, rFirstPredicate, aFirstPredicate,"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            pFirstPredicate, eFirstPredicate, dFirstPredicate, wFirstPredicate, sFirstPredicate), false);"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(List.of(cFirstPredicate, rFirstPredicate, aFirstPredicate,"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            pFirstPredicate, eFirstPredicate, dFirstPredicate, wFirstPredicate, sFirstPredicate), false);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // different command -\u003e returns false"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // different argument -\u003e return false"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findThirdCommand));"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findFourthCommand));"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findFifthCommand));"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSixthCommand));"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSeventhCommand));"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findEighthCommand));"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findNinthCommand));"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findTenthCommand));"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noInternshipApplicationFound() {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INTERNSHIP_LISTED_OVERVIEW, 0);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        CompanyContainsKeywordsPredicate cPredicate \u003d prepareCompanyPredicate(\" \");"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        RoleContainsKeywordsPredicate rPredicate \u003d prepareRolePredicate(\" \");"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        AddressContainsKeywordsPredicate aPredicate \u003d prepareAddressPredicate(\" \");"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        PhoneContainsNumbersPredicate pPredicate \u003d preparePhonePredicate(\" \");"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        EmailContainsKeywordsPredicate ePredicate \u003d prepareEmailPredicate(\" \");"},{"lineNumber":138,"author":{"gitId":"gerhean"},"content":"        ApplicationDateIsDatePredicate dPredicate \u003d new ApplicationDateIsDatePredicate((LocalDate) null);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        PriorityContainsNumbersPredicate wPredicate \u003d preparePriorityPredicate(\" \");"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        StatusContainsKeywordsPredicate sPredicate \u003d prepareStatusPredicate(\" \");"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(List.of(cPredicate, rPredicate, aPredicate, pPredicate, ePredicate,"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            dPredicate, wPredicate, sPredicate), false);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredInternshipApplicationList(cPredicate.and(rPredicate)"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            .and(aPredicate)"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            .and(pPredicate)"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            .and(ePredicate));"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredInternshipApplicationList());"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multipleInternshipApplicationsFound() {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INTERNSHIP_LISTED_OVERVIEW, 2);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        CompanyContainsKeywordsPredicate cPredicate \u003d prepareCompanyPredicate(\"google facebook\");"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(List.of(cPredicate, new RoleContainsKeywordsPredicate(null),"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            new AddressContainsKeywordsPredicate(null), new PhoneContainsNumbersPredicate(null),"},{"lineNumber":158,"author":{"gitId":"gerhean"},"content":"            new EmailContainsKeywordsPredicate(null), new ApplicationDateIsDatePredicate((LocalDate) null),"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            new PriorityContainsNumbersPredicate(null), new StatusContainsKeywordsPredicate(null)),"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            false);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredInternshipApplicationList(cPredicate);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void execute_isPreamble_multipleInternshipApplicationsFound() {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INTERNSHIP_LISTED_OVERVIEW, 2);"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        CompanyContainsKeywordsPredicate cPredicate \u003d prepareCompanyPredicate(\"goo\");"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        RoleContainsKeywordsPredicate rPredicate \u003d prepareRolePredicate(\"goo\");"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        AddressContainsKeywordsPredicate aPredicate \u003d prepareAddressPredicate(\"goo\");"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        PhoneContainsNumbersPredicate pPredicate \u003d preparePhonePredicate(\"goo\");"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        EmailContainsKeywordsPredicate ePredicate \u003d prepareEmailPredicate(\"goo\");"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        PriorityContainsNumbersPredicate wPredicate \u003d preparePriorityPredicate(\"goo\");"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        StatusContainsKeywordsPredicate sPredicate \u003d prepareStatusPredicate(\"goo\");"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(List.of(cPredicate, rPredicate, aPredicate, pPredicate, ePredicate,"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            wPredicate, sPredicate), true);"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Predicate\u003cInternshipApplication\u003e predicate \u003d"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            cPredicate.or(rPredicate).or(aPredicate).or(pPredicate).or(ePredicate).or(wPredicate).or(sPredicate);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredInternshipApplicationList(predicate);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void execute_isNotPreamble_multipleInternshipApplicationsFound() {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INTERNSHIP_LISTED_OVERVIEW, 2);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        EmailContainsKeywordsPredicate ePredicate \u003d prepareEmailPredicate(\"google\");"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(List.of(ePredicate), false);"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredInternshipApplicationList(ePredicate);"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":25,"-":169}},{"path":"src/test/java/seedu/diary/logic/commands/HelpCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ModelManager;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class HelpCommandTest {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_help_success() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult("},{"lineNumber":18,"author":{"gitId":"-"},"content":"            SHOWING_HELP_MESSAGE, true, false, false"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":5,"-":17}},{"path":"src/test/java/seedu/diary/logic/commands/InitClearCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.ClearCommandConfirmationParser;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ModelManager;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"public class InitClearCommandTest {"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"    public void execute_initClearCommand_success() {"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"        Model expectedModel \u003d new ModelManager();"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"        assertCommandSuccess(new InitClearCommand(), model, InitClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"        model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"        expectedModel \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"        assertCommandSuccess(new InitClearCommand(), model, InitClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"    public void getNextInternshipDiaryParser_executeSuccess_returnClearCommandConfirmationParser() {"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"        Command initClearCommand \u003d new InitClearCommand();"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"        Model model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"        assertCommandSuccess(initClearCommand, model, InitClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"        assertTrue(initClearCommand.getNextInternshipDiaryParser() instanceof ClearCommandConfirmationParser);"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":41}},{"path":"src/test/java/seedu/diary/logic/commands/ListCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.showInternshipApplicationAtIndex;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ModelManager;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.UserPrefs;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class ListCommandTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model expectedModel;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        expectedModel \u003d new ModelManager(model.getInternshipDiary(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        showInternshipApplicationAtIndex(model, INDEX_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void execute_inArchivalView_showsMainList() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        model.viewArchivedInternshipApplicationList();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":8,"-":38}},{"path":"src/test/java/seedu/diary/logic/commands/ReminderCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.ReminderCommand.MESSAGE_SUCCESS;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.time.temporal.ChronoUnit;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.comparator.ApplicationDateAndInterviewDateComparator;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.InternshipDiary;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ModelManager;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.UserPrefs;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.ApplicationDate;"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.interview.Interview;"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.ApplicationDateDuePredicate;"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.InterviewDateDuePredicate;"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.IsNotArchivedPredicate;"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.StatusIsInterviewPredicate;"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.StatusIsWishlistPredicate;"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.status.Status;"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipApplicationBuilder;"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InterviewBuilder;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"class ReminderCommandTest {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Model expectedModel;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        LocalDate currentDate \u003d LocalDate.now();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // old application which was rejected"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        InternshipApplication applicationA \u003d new InternshipApplicationBuilder()"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            .withApplicationDate(new ApplicationDate(currentDate.minus(2, ChronoUnit.DAYS)))"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            .withCompany(\"Company A\")"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            .withStatus(Status.REJECTED)"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            .build();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // application that has not been applied to yet, due in 7 days"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        InternshipApplication applicationB \u003d new InternshipApplicationBuilder()"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            .withApplicationDate(new ApplicationDate(currentDate.plus(5, ChronoUnit.DAYS)))"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            .withCompany(\"Company B\")"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            .withStatus(Status.WISHLIST)"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            .build();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // application that has not been applied to yet, application date already over"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        InternshipApplication applicationC \u003d new InternshipApplicationBuilder()"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            .withApplicationDate(new ApplicationDate(currentDate.minus(10, ChronoUnit.DAYS)))"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            .withCompany(\"Company C\")"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            .withStatus(Status.WISHLIST)"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            .build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // application with Status.APPLIED, and has an interview in 7 days"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Interview interviewD \u003d new InterviewBuilder()"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            .withDate(currentDate.plus(2, ChronoUnit.DAYS))"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            .build();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        InternshipApplication applicationD \u003d new InternshipApplicationBuilder()"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            .withApplicationDate(new ApplicationDate(currentDate.minus(1, ChronoUnit.DAYS)))"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            .withCompany(\"Company D\")"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            .withStatus(Status.APPLIED)"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            .withInterview(interviewD)"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            .buildWithInterviews();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // application with Status.INTERVIEW, and has an interview in 7 days"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Interview interviewE \u003d new InterviewBuilder()"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            .withDate(currentDate.plus(2, ChronoUnit.DAYS))"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            .build();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        InternshipApplication applicationE \u003d new InternshipApplicationBuilder()"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            .withApplicationDate(new ApplicationDate(currentDate.minus(1, ChronoUnit.DAYS)))"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            .withCompany(\"Company E\")"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            .withStatus(Status.INTERVIEW)"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            .withInterview(interviewE)"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            .buildWithInterviews();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // application with Status.INTERVIEW, and does not have an interview in 7 days"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Interview interviewF \u003d new InterviewBuilder()"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            .withDate(currentDate.plus(9, ChronoUnit.DAYS))"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            .build();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        InternshipApplication applicationF \u003d new InternshipApplicationBuilder()"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            .withApplicationDate(new ApplicationDate(currentDate.minus(3, ChronoUnit.DAYS)))"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            .withCompany(\"Company F\")"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            .withStatus(Status.INTERVIEW)"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            .withInterview(interviewF)"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            .buildWithInterviews();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        InternshipDiary internshipDiary \u003d new InternshipDiary();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        internshipDiary.loadInternshipApplication(applicationA);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        internshipDiary.loadInternshipApplication(applicationB);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        internshipDiary.loadInternshipApplication(applicationC);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        internshipDiary.loadInternshipApplication(applicationD);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        internshipDiary.loadInternshipApplication(applicationE);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        internshipDiary.loadInternshipApplication(applicationF);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(internshipDiary, userPrefs);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        expectedModel \u003d new ModelManager(model.getInternshipDiary(), userPrefs);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void execute_afterReminder_showsFilteredAndSortedList() {"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        ApplicationDateDuePredicate appDateWithin7DaysPredicate \u003d new ApplicationDateDuePredicate();"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        StatusIsWishlistPredicate statusIsWishlistPredicate \u003d new StatusIsWishlistPredicate();"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Predicate\u003cInternshipApplication\u003e wishlistPredicate \u003d appDateWithin7DaysPredicate.and(statusIsWishlistPredicate);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        InterviewDateDuePredicate interviewDateWithin7DaysPredicate \u003d new InterviewDateDuePredicate();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        StatusIsInterviewPredicate statusIsInterviewPredicate \u003d new StatusIsInterviewPredicate();"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Predicate\u003cInternshipApplication\u003e interviewPredicate \u003d interviewDateWithin7DaysPredicate"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            .and(statusIsInterviewPredicate);"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        Predicate\u003cInternshipApplication\u003e datePredicate \u003d wishlistPredicate.or(interviewPredicate);"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        IsNotArchivedPredicate isNotArchivedPredicate \u003d new IsNotArchivedPredicate();"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        Predicate\u003cInternshipApplication\u003e predicate \u003d isNotArchivedPredicate.and(datePredicate);"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel.getAllInternshipApplicationList().size(), 6);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredInternshipApplicationList(predicate);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredInternshipApplicationList(new ApplicationDateAndInterviewDateComparator());"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel.getFilteredInternshipApplicationList().size(), 2);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        CommandResult expectedMessage \u003d new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, new ReminderCommand().execute(model));"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ReminderCommand(), model, expectedMessage, expectedModel);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        ReminderCommand firstReminder \u003d new ReminderCommand();"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertEquals(firstReminder, firstReminder);"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertNotEquals(\"reminder\", firstReminder);"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertNotEquals(null, firstReminder);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":19,"-":121}},{"path":"src/test/java/seedu/diary/logic/commands/RemovalBasedCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.diary.commons.core.commandexecutiontype.RemovalBasedCommandExecutionType.BY_FIELD;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.diary.commons.core.commandexecutiontype.RemovalBasedCommandExecutionType.BY_INDEX;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.diary.commons.core.commandexecutiontype.RemovalBasedCommandExecutionType.BY_INDICES;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.showInternshipApplicationAtIndex;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.showInternshipApplicationAtIndices;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.PredicateUtil.prepareEmailPredicate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.diary.testutil.PredicateUtil.prepareStatusPredicate;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_LIST_FIRST_INTERNSHIP_APPLICATION;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_LIST_SECOND_INTERNSHIP_APPLICATION;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP_APPLICATION;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.Messages;"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.index.Index;"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ModelManager;"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.UserPrefs;"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.diary.model.status.Status;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model, DeleteCommand) and unit tests for"},{"lineNumber":37,"author":{"gitId":"-"},"content":" * {@code RemovalBasedCommand}."},{"lineNumber":38,"author":{"gitId":"-"},"content":" * Integration tests for ArchiveCommand and UnarchiveCommand are deemed unnecessary because they are similar in nature"},{"lineNumber":39,"author":{"gitId":"-"},"content":" * to DeleteCommand. Testing integration with DeleteCommand will suffice."},{"lineNumber":40,"author":{"gitId":"-"},"content":" */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"public class RemovalBasedCommandTest {"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private final Predicate\u003cInternshipApplication\u003e validPredicate \u003d prepareStatusPredicate(Status.APPLIED.toString());"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private final Predicate\u003cInternshipApplication\u003e secondValidPredicate \u003d"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        prepareStatusPredicate(Status.WISHLIST.toString());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private final Predicate\u003cInternshipApplication\u003e invalidPredicate \u003d prepareEmailPredicate(Status.APPLIED.toString());"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private List\u003cIndex\u003e indices;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private List\u003cIndex\u003e secondIndices;"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private final String commandWord \u003d DeleteCommand.COMMAND_WORD;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private final Model expectedModel \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // to prevent leakage between test cases, where the list is mutated"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        indices \u003d new ArrayList\u003c\u003e(INDEX_LIST_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        secondIndices \u003d new ArrayList\u003c\u003e(INDEX_LIST_SECOND_INTERNSHIP_APPLICATION);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void execute_byIndexValidIndexUnfilteredListDeleteCommand_success() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        RemovalBasedCommand removalBasedDeleteCommand \u003d"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            new RemovalBasedCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, BY_INDEX, commandWord);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        InternshipApplication internshipApplicationToExecuteOn \u003d"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            model.getFilteredInternshipApplicationList().get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format("},{"lineNumber":73,"author":{"gitId":"-"},"content":"            RemovalBasedCommand.MESSAGE_COMMAND_INTERNSHIP_SUCCESS.apply(commandWord),"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            internshipApplicationToExecuteOn + \"\\n\""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        expectedModel.deleteInternshipApplication(internshipApplicationToExecuteOn);"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertCommandSuccess(removalBasedDeleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void execute_byIndexInvalidIndexUnfilteredListDeleteCommand_throwsCommandException() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredInternshipApplicationList().size() + 1);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        RemovalBasedCommand removalBasedDeleteCommand \u003d"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            new RemovalBasedCommand(outOfBoundIndex, BY_INDEX, commandWord);"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertCommandFailure(removalBasedDeleteCommand, model, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void execute_byIndexValidIndexFilteredListDeleteCommand_success() {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        showInternshipApplicationAtIndex(model, INDEX_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        RemovalBasedCommand removalBasedDeleteCommand \u003d"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            new RemovalBasedCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, BY_INDEX, commandWord);"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        InternshipApplication internshipApplicationToExecuteOn \u003d"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            model.getFilteredInternshipApplicationList().get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format("},{"lineNumber":103,"author":{"gitId":"-"},"content":"            RemovalBasedCommand.MESSAGE_COMMAND_INTERNSHIP_SUCCESS.apply(commandWord),"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            internshipApplicationToExecuteOn + \"\\n\""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        showInternshipApplicationAtIndex(expectedModel, INDEX_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        expectedModel.deleteInternshipApplication(internshipApplicationToExecuteOn);"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertCommandSuccess(removalBasedDeleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void execute_byIndexInvalidIndexFilteredListDeleteCommand_throwsCommandException() {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        showInternshipApplicationAtIndex(model, INDEX_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_INTERNSHIP_APPLICATION;"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of unfiltered diary book list"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getInternshipDiary().getDisplayedInternshipList().size());"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        RemovalBasedCommand removalBasedDeleteCommand \u003d"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            new RemovalBasedCommand(outOfBoundIndex, BY_INDEX, commandWord);"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertCommandFailure(removalBasedDeleteCommand, model, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public void execute_byIndicesValidIndicesUnfilteredListDeleteCommand_success() {"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        String deletedInternshipApplications \u003d \"\";"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        // create expected model and delete the appropriate internship applications"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        for (Index index : indices) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            InternshipApplication internshipApplicationToDelete \u003d"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                model.getFilteredInternshipApplicationList().get(index.getZeroBased());"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            expectedModel.deleteInternshipApplication(internshipApplicationToDelete);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            deletedInternshipApplications +\u003d internshipApplicationToDelete + \"\\n\\n\";"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format("},{"lineNumber":141,"author":{"gitId":"-"},"content":"            RemovalBasedCommand.MESSAGE_COMMAND_INTERNSHIP_SUCCESS.apply(commandWord),"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            deletedInternshipApplications);"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // create command"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        RemovalBasedCommand removalBasedDeleteCommand \u003d"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            new RemovalBasedCommand(indices, BY_INDICES, commandWord);"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertCommandSuccess(removalBasedDeleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void execute_byIndicesInvalidIndicesUnfilteredListDeleteCommand_throwsCommandException() {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredInternshipApplicationList().size() + 1);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        List\u003cIndex\u003e mockIndexes \u003d new ArrayList\u003c\u003e(INDEX_LIST_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        mockIndexes.add(outOfBoundIndex);"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        RemovalBasedCommand removalBasedDeleteCommand \u003d"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            new RemovalBasedCommand(mockIndexes, BY_INDICES, commandWord);"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX + \": \" + List.of(outOfBoundIndex.getOneBased());"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertCommandFailure(removalBasedDeleteCommand, model, expectedMessage);"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public void execute_byIndicesValidIndexFilteredListDeleteCommand_success() {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        showInternshipApplicationAtIndices(model, indices);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        showInternshipApplicationAtIndices(expectedModel, indices);"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"        String deletedInternshipApplications \u003d \"\";"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        List\u003cInternshipApplication\u003e toDelete \u003d new ArrayList\u003c\u003e();"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"        // get internship applications to delete"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        for (Index index : indices) {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            InternshipApplication internshipApplicationToDelete \u003d"},{"lineNumber":178,"author":{"gitId":"-"},"content":"                expectedModel.getFilteredInternshipApplicationList().get(index.getZeroBased());"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            toDelete.add(internshipApplicationToDelete);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            deletedInternshipApplications +\u003d internshipApplicationToDelete + \"\\n\\n\";"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"        for (InternshipApplication internshipApplication : toDelete) {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            expectedModel.deleteInternshipApplication(internshipApplication);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format("},{"lineNumber":188,"author":{"gitId":"-"},"content":"            RemovalBasedCommand.MESSAGE_COMMAND_INTERNSHIP_SUCCESS.apply(commandWord),"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            deletedInternshipApplications);"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"        RemovalBasedCommand removalBasedDeleteCommand \u003d"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            new RemovalBasedCommand(indices, BY_INDICES, commandWord);"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertCommandSuccess(removalBasedDeleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    public void execute_byIndicesInvalidIndicesFilteredListDeleteCommand_throwsCommandException() {"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        showInternshipApplicationAtIndices(model, INDEX_LIST_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredInternshipApplicationList().size() + 1);"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        List\u003cIndex\u003e mockIndexes \u003d new ArrayList\u003c\u003e(INDEX_LIST_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        mockIndexes.add(outOfBoundIndex);"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"        RemovalBasedCommand removalBasedDeleteCommand \u003d"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            new RemovalBasedCommand(mockIndexes, BY_INDICES, commandWord);"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX + \": \" + List.of(outOfBoundIndex.getOneBased());"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"        assertCommandFailure(removalBasedDeleteCommand, model, expectedMessage);"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    public void execute_byFieldValidFieldUnfilteredListDeleteCommand_success() {"},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"        // create expected model and filter and get the appropriate internship applications to delete"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredInternshipApplicationList(validPredicate);"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        List\u003cInternshipApplication\u003e internshipApplicationsToDelete \u003d new ArrayList\u003c\u003e();"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"        for (InternshipApplication toDelete : expectedModel.getFilteredInternshipApplicationList()) {"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            internshipApplicationsToDelete.add(toDelete);"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredInternshipApplicationList(Model.PREDICATE_SHOW_ALL_INTERNSHIPS);"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"        String deletedInternshipApplications \u003d \"\";"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"-"},"content":"        // delete the filtered internship applications"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        for (InternshipApplication toDelete : internshipApplicationsToDelete) {"},{"lineNumber":230,"author":{"gitId":"-"},"content":"            expectedModel.deleteInternshipApplication(toDelete);"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            deletedInternshipApplications +\u003d toDelete + \"\\n\\n\";"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"        RemovalBasedCommand removalBasedDeleteCommand \u003d"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            new RemovalBasedCommand(validPredicate, BY_FIELD, commandWord);"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format("},{"lineNumber":238,"author":{"gitId":"-"},"content":"            RemovalBasedCommand.MESSAGE_COMMAND_INTERNSHIP_SUCCESS.apply(commandWord),"},{"lineNumber":239,"author":{"gitId":"-"},"content":"            deletedInternshipApplications);"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"        assertCommandSuccess(removalBasedDeleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    public void execute_byFieldValidFieldFilteredListDeleteCommand_success() {"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        showInternshipApplicationAtIndices(model, INDEX_LIST_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        showInternshipApplicationAtIndices(expectedModel, INDEX_LIST_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":"        // create expected model and filter and get the appropriate internship applications to delete"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredInternshipApplicationList(validPredicate);"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        List\u003cInternshipApplication\u003e internshipApplicationsToDelete \u003d new ArrayList\u003c\u003e();"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"        for (InternshipApplication toDelete : expectedModel.getFilteredInternshipApplicationList()) {"},{"lineNumber":254,"author":{"gitId":"-"},"content":"            internshipApplicationsToDelete.add(toDelete);"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredInternshipApplicationList(Model.PREDICATE_SHOW_ALL_INTERNSHIPS);"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"        String deletedInternshipApplications \u003d \"\";"},{"lineNumber":259,"author":{"gitId":"-"},"content":""},{"lineNumber":260,"author":{"gitId":"-"},"content":"        // delete the filtered internship applications"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        for (InternshipApplication toDelete : internshipApplicationsToDelete) {"},{"lineNumber":262,"author":{"gitId":"-"},"content":"            expectedModel.deleteInternshipApplication(toDelete);"},{"lineNumber":263,"author":{"gitId":"-"},"content":"            deletedInternshipApplications +\u003d toDelete + \"\\n\\n\";"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"        RemovalBasedCommand removalBasedDeleteCommand \u003d"},{"lineNumber":267,"author":{"gitId":"-"},"content":"            new RemovalBasedCommand(validPredicate, BY_FIELD, commandWord);"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format("},{"lineNumber":270,"author":{"gitId":"-"},"content":"            RemovalBasedCommand.MESSAGE_COMMAND_INTERNSHIP_SUCCESS.apply(commandWord),"},{"lineNumber":271,"author":{"gitId":"-"},"content":"            deletedInternshipApplications);"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"-"},"content":"        assertCommandSuccess(removalBasedDeleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":279,"author":{"gitId":"-"},"content":""},{"lineNumber":280,"author":{"gitId":"-"},"content":"        // BY INDEX"},{"lineNumber":281,"author":{"gitId":"-"},"content":"        RemovalBasedCommand firstRemovalBasedDeleteCommandByIndex \u003d"},{"lineNumber":282,"author":{"gitId":"-"},"content":"            new RemovalBasedCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, BY_INDEX, commandWord);"},{"lineNumber":283,"author":{"gitId":"-"},"content":"        RemovalBasedCommand secondRemovalBasedDeleteCommandByIndex \u003d"},{"lineNumber":284,"author":{"gitId":"-"},"content":"            new RemovalBasedCommand(INDEX_SECOND_INTERNSHIP_APPLICATION, BY_INDEX, commandWord);"},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":287,"author":{"gitId":"-"},"content":"        assertTrue(firstRemovalBasedDeleteCommandByIndex.equals(firstRemovalBasedDeleteCommandByIndex));"},{"lineNumber":288,"author":{"gitId":"-"},"content":""},{"lineNumber":289,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        RemovalBasedCommand firstRemovalBasedDeleteCommandByIndexCopy \u003d"},{"lineNumber":291,"author":{"gitId":"-"},"content":"            new RemovalBasedCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, BY_INDEX, commandWord);"},{"lineNumber":292,"author":{"gitId":"-"},"content":"        assertTrue(firstRemovalBasedDeleteCommandByIndex.equals(firstRemovalBasedDeleteCommandByIndexCopy));"},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":295,"author":{"gitId":"-"},"content":"        assertFalse(firstRemovalBasedDeleteCommandByIndex.equals(1));"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":298,"author":{"gitId":"-"},"content":"        assertFalse(firstRemovalBasedDeleteCommandByIndex.equals(null));"},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"-"},"content":"        // different internship application index -\u003e returns false"},{"lineNumber":301,"author":{"gitId":"-"},"content":"        assertFalse(firstRemovalBasedDeleteCommandByIndex.equals(secondRemovalBasedDeleteCommandByIndex));"},{"lineNumber":302,"author":{"gitId":"-"},"content":""},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"-"},"content":"        // BY INDICES"},{"lineNumber":305,"author":{"gitId":"-"},"content":"        RemovalBasedCommand firstRemovalBasedDeleteCommandByIndices \u003d"},{"lineNumber":306,"author":{"gitId":"-"},"content":"            new RemovalBasedCommand(indices, BY_INDICES, commandWord);"},{"lineNumber":307,"author":{"gitId":"-"},"content":"        RemovalBasedCommand secondRemovalBasedDeleteCommandByIndices \u003d"},{"lineNumber":308,"author":{"gitId":"-"},"content":"            new RemovalBasedCommand(secondIndices, BY_INDICES, commandWord);"},{"lineNumber":309,"author":{"gitId":"-"},"content":""},{"lineNumber":310,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":311,"author":{"gitId":"-"},"content":"        assertTrue(firstRemovalBasedDeleteCommandByIndices.equals(firstRemovalBasedDeleteCommandByIndices));"},{"lineNumber":312,"author":{"gitId":"-"},"content":""},{"lineNumber":313,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":314,"author":{"gitId":"-"},"content":"        RemovalBasedCommand firstRemovalBasedDeleteCommandByIndicesCopy \u003d"},{"lineNumber":315,"author":{"gitId":"-"},"content":"            new RemovalBasedCommand(indices, BY_INDICES, commandWord);"},{"lineNumber":316,"author":{"gitId":"-"},"content":"        assertTrue(firstRemovalBasedDeleteCommandByIndices.equals(firstRemovalBasedDeleteCommandByIndicesCopy));"},{"lineNumber":317,"author":{"gitId":"-"},"content":""},{"lineNumber":318,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":319,"author":{"gitId":"-"},"content":"        assertFalse(firstRemovalBasedDeleteCommandByIndices.equals(1));"},{"lineNumber":320,"author":{"gitId":"-"},"content":""},{"lineNumber":321,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":322,"author":{"gitId":"-"},"content":"        assertFalse(firstRemovalBasedDeleteCommandByIndices.equals(null));"},{"lineNumber":323,"author":{"gitId":"-"},"content":""},{"lineNumber":324,"author":{"gitId":"-"},"content":"        // different internship application indices -\u003e returns false"},{"lineNumber":325,"author":{"gitId":"-"},"content":"        assertFalse(firstRemovalBasedDeleteCommandByIndices.equals(secondRemovalBasedDeleteCommandByIndices));"},{"lineNumber":326,"author":{"gitId":"-"},"content":""},{"lineNumber":327,"author":{"gitId":"-"},"content":""},{"lineNumber":328,"author":{"gitId":"-"},"content":"        // BY FIELD"},{"lineNumber":329,"author":{"gitId":"-"},"content":"        RemovalBasedCommand firstRemovalBasedDeleteCommandByField \u003d"},{"lineNumber":330,"author":{"gitId":"-"},"content":"            new RemovalBasedCommand(validPredicate, BY_FIELD, commandWord);"},{"lineNumber":331,"author":{"gitId":"-"},"content":"        RemovalBasedCommand secondRemovalBasedDeleteCommandByField \u003d"},{"lineNumber":332,"author":{"gitId":"-"},"content":"            new RemovalBasedCommand(secondValidPredicate, BY_FIELD, commandWord);"},{"lineNumber":333,"author":{"gitId":"-"},"content":"        RemovalBasedCommand invalidRemovalBasedDeleteCommandByField \u003d"},{"lineNumber":334,"author":{"gitId":"-"},"content":"            new RemovalBasedCommand(invalidPredicate, BY_FIELD, commandWord);"},{"lineNumber":335,"author":{"gitId":"-"},"content":""},{"lineNumber":336,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":337,"author":{"gitId":"-"},"content":"        assertTrue(firstRemovalBasedDeleteCommandByField.equals(firstRemovalBasedDeleteCommandByField));"},{"lineNumber":338,"author":{"gitId":"-"},"content":""},{"lineNumber":339,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        RemovalBasedCommand firstRemovalBasedDeleteCommandByFieldCopy \u003d"},{"lineNumber":341,"author":{"gitId":"-"},"content":"            new RemovalBasedCommand(validPredicate, BY_FIELD, commandWord);"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        assertTrue(firstRemovalBasedDeleteCommandByField.equals(firstRemovalBasedDeleteCommandByFieldCopy));"},{"lineNumber":343,"author":{"gitId":"-"},"content":""},{"lineNumber":344,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":345,"author":{"gitId":"-"},"content":"        assertFalse(firstRemovalBasedDeleteCommandByField.equals(1));"},{"lineNumber":346,"author":{"gitId":"-"},"content":""},{"lineNumber":347,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":348,"author":{"gitId":"-"},"content":"        assertFalse(firstRemovalBasedDeleteCommandByField.equals(null));"},{"lineNumber":349,"author":{"gitId":"-"},"content":""},{"lineNumber":350,"author":{"gitId":"-"},"content":"        // different internship application predicate -\u003e returns false"},{"lineNumber":351,"author":{"gitId":"-"},"content":"        assertFalse(firstRemovalBasedDeleteCommandByField.equals(secondRemovalBasedDeleteCommandByField));"},{"lineNumber":352,"author":{"gitId":"-"},"content":""},{"lineNumber":353,"author":{"gitId":"-"},"content":"        // different internship application predicate (invalid predicate) -\u003e returns false"},{"lineNumber":354,"author":{"gitId":"-"},"content":"        assertFalse(firstRemovalBasedDeleteCommandByField.equals(invalidRemovalBasedDeleteCommandByField));"},{"lineNumber":355,"author":{"gitId":"-"},"content":""},{"lineNumber":356,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":357,"author":{"gitId":"-"},"content":""},{"lineNumber":358,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":16,"-":342}},{"path":"src/test/java/seedu/diary/logic/commands/SelectCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.showInternshipApplicationAtIndex;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP_APPLICATION;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.Messages;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.InternshipDiary;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ModelManager;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.UserPrefs;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Primarily unit tests for {@code SelectCommand}, as command does not modify model."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertCommandSuccess(selectCommand, model, SelectCommand.MESSAGE_SELECT_SUCCESS, model,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            model.getFilteredInternshipApplicationList().get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased()));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredInternshipApplicationList().size() + 1);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(outOfBoundIndex);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertCommandFailure(selectCommand, model, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"        class MockModel extends ModelManager {"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"            private boolean displayInternshipDetailCalled \u003d false;"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"            public MockModel(InternshipDiary diary, UserPrefs userPrefs) {"},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"                super(diary, userPrefs);"},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":"            @Override"},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":"            public void displayInternshipDetail(InternshipApplication internshipApplication) {"},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":"                displayInternshipDetailCalled \u003d true;"},{"lineNumber":55,"author":{"gitId":"gerhean"},"content":"            }"},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":"        MockModel mockModel \u003d new MockModel(getTypicalInternshipDiary(), new UserPrefs());"},{"lineNumber":58,"author":{"gitId":"gerhean"},"content":"        showInternshipApplicationAtIndex(mockModel, INDEX_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":"        InternshipApplication internshipApplication \u003d mockModel.getFilteredInternshipApplicationList()"},{"lineNumber":62,"author":{"gitId":"gerhean"},"content":"            .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"},{"lineNumber":63,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":"        assertCommandSuccess(selectCommand, mockModel, SelectCommand.MESSAGE_SELECT_SUCCESS,"},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":"            mockModel, internshipApplication);"},{"lineNumber":66,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":67,"author":{"gitId":"gerhean"},"content":"        assertTrue(mockModel.displayInternshipDetailCalled);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        showInternshipApplicationAtIndex(model, INDEX_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(INDEX_SECOND_INTERNSHIP_APPLICATION);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertCommandFailure(selectCommand, model, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_INTERNSHIP_APPLICATION);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // different internship application index -\u003e returns false"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":36,"-":62}},{"path":"src/test/java/seedu/diary/logic/commands/SortCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.core.Messages.MESSAGE_INTERNSHIP_LISTED_OVERVIEW;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import java.util.Comparator;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.comparator.ApplicationDateComparator;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.comparator.CompanyComparator;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.comparator.PriorityComparator;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.comparator.StatusComparator;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ModelManager;"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.UserPrefs;"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":" * Contains integration tests (interaction with the Model) for {@code SortCommand}."},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":" */"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"public class SortCommandTest {"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"    private Model model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"    private List\u003cComparator\u003cInternshipApplication\u003e\u003e comparators \u003d Arrays.asList("},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"        new CompanyComparator(),"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"        new ApplicationDateComparator(),"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"        new PriorityComparator(),"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"        new StatusComparator()"},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"    );"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"    public void equals() {"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"        Comparator\u003cInternshipApplication\u003e companyComparator \u003d new CompanyComparator();"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"        Comparator\u003cInternshipApplication\u003e dateComparator \u003d new ApplicationDateComparator();"},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"        SortCommand sortCompanyCommand \u003d new SortCommand(companyComparator);"},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"        SortCommand sortDateCommand \u003d new SortCommand(dateComparator);"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"        // same object -\u003e returns true"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"        assertEquals(sortCompanyCommand, sortCompanyCommand);"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"        // same values -\u003e returns true"},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"        SortCommand sortCompanyCommandCopy \u003d new SortCommand(companyComparator);"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":"        assertEquals(sortCompanyCommand, sortCompanyCommandCopy);"},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":"        // different types -\u003e returns false"},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(1, sortCompanyCommand);"},{"lineNumber":55,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":"        // null -\u003e returns false"},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(null, sortCompanyCommand);"},{"lineNumber":58,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // different company -\u003e returns false"},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(sortCompanyCommand, sortDateCommand);"},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":63,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":"    public void execute_anyComparator_sameNumberOfInternshipApplicationFound() {"},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":"        int initialModelSize \u003d model.getFilteredInternshipApplicationList().size();"},{"lineNumber":66,"author":{"gitId":"gerhean"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INTERNSHIP_LISTED_OVERVIEW, initialModelSize);"},{"lineNumber":67,"author":{"gitId":"gerhean"},"content":"        for (Comparator\u003cInternshipApplication\u003e comparator : comparators) {"},{"lineNumber":68,"author":{"gitId":"gerhean"},"content":"            SortCommand command \u003d new SortCommand(comparator);"},{"lineNumber":69,"author":{"gitId":"gerhean"},"content":"            expectedModel.updateFilteredInternshipApplicationList(comparator);"},{"lineNumber":70,"author":{"gitId":"gerhean"},"content":"            assertEquals(model, expectedModel);"},{"lineNumber":71,"author":{"gitId":"gerhean"},"content":"            assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":72,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":73,"-":1}},{"path":"src/test/java/seedu/diary/logic/commands/StatisticsCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.StatisticsCommand.SHOWING_STATISTICS_MESSAGE;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ModelManager;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Contains unit tests for {@code StatisticsCommand}."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class StatisticsCommandTest {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void execute_statistics_success() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult("},{"lineNumber":21,"author":{"gitId":"-"},"content":"            SHOWING_STATISTICS_MESSAGE, false, true, false"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new StatisticsCommand(), model, expectedCommandResult, expectedModel);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":5,"-":20}},{"path":"src/test/java/seedu/diary/logic/commands/UnarchiveCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP_APPLICATION;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.InternshipDiary;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ModelManager;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.UserPrefs;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model and Archival Command) and unit tests for"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * {@code UnarchiveCommand}."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class UnarchiveCommandTest {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Model expectedModel;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // create mock internship diary and archive first internship application"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        InternshipDiary mockInternshipDiary \u003d getTypicalInternshipDiary();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        InternshipApplication iaToArchive \u003d mockInternshipDiary"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .getDisplayedInternshipList()"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        mockInternshipDiary.archiveInternshipApplication(iaToArchive);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // create models"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(mockInternshipDiary, new UserPrefs());"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        expectedModel \u003d new ModelManager(mockInternshipDiary, new UserPrefs());"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // switch view to archived internship list"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        model.viewArchivedInternshipApplicationList();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        expectedModel.viewArchivedInternshipApplicationList();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_unarchiveInternshipApplication_success() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UnarchiveCommand unarchiveCommand \u003d new UnarchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            unarchiveCommand.execute(expectedModel);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        InternshipApplication archivedInternshipApplication \u003d"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            expectedModel.getAllInternshipApplicationList().get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":"        assertFalse(archivedInternshipApplication.isArchived());"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void execute_unarchiveAlreadyUnarchivedInternshipApplication_throwsException() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        UnarchiveCommand unarchiveCommand \u003d new UnarchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            unarchiveCommand.execute(expectedModel);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        expectedModel.viewUnarchivedInternshipApplicationList();"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, () -\u003e unarchiveCommand.execute(expectedModel));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void execute_unarchiveOneInternshipApplication_listViewCorrect() {"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // model"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        UnarchiveCommand unarchiveCommand \u003d new UnarchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            unarchiveCommand.execute(model);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        model.viewUnarchivedInternshipApplicationList();"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // expected model"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        InternshipApplication ia \u003d expectedModel.getFilteredInternshipApplicationList()"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        expectedModel.unarchiveInternshipApplication(ia);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        expectedModel.viewUnarchivedInternshipApplicationList();"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // can\u0027t use assertCommandSuccess because have to change view of internshipDiary after execution of command"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // assertCommandSuccess(archiveCommand, model, expectedMessage, expectedModel);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertEquals(model, expectedModel);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void execute_unarchiveOneInternshipApplication_archivalViewSuccess() {"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // model"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        UnarchiveCommand unarchiveCommand \u003d new UnarchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // expected model"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        InternshipApplication ia \u003d expectedModel.getFilteredInternshipApplicationList()"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        expectedModel.unarchiveInternshipApplication(ia);"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d ia.toString();"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // default view is unarchived so we can use assertCommandSuccess"},{"lineNumber":120,"author":{"gitId":"gerhean"},"content":"        assertCommandSuccess(unarchiveCommand, model, expectedMessage, expectedModel);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        UnarchiveCommand unarchiveFirstCommand \u003d new UnarchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        UnarchiveCommand unarchiveSecondCommand \u003d new UnarchiveCommand(INDEX_SECOND_INTERNSHIP_APPLICATION);"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertTrue(unarchiveFirstCommand.equals(unarchiveFirstCommand));"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        UnarchiveCommand unarchiveFirstCommandCopy \u003d new UnarchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertTrue(unarchiveFirstCommand.equals(unarchiveFirstCommandCopy));"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertFalse(unarchiveFirstCommand.equals(1));"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertFalse(unarchiveFirstCommand.equals(null));"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        // different internship application index -\u003e returns false"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertFalse(unarchiveFirstCommand.equals(unarchiveSecondCommand));"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":12,"-":133}},{"path":"src/test/java/seedu/diary/logic/commands/interviewsubcommands/EditInterviewDescriptorTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands.interviewsubcommands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.DESC_NUS;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.DESC_ONLINE;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_ADDRESS_ONLINE;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_DATE_ONLINE;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_IS_ONLINE_ONLINE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.EditInterviewDescriptorBuilder;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class EditInterviewDescriptorTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        InterviewEditCommand.EditInterviewDescriptor descriptorWithSameValues \u003d"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            new InterviewEditCommand.EditInterviewDescriptor(DESC_NUS);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertTrue(DESC_NUS.equals(descriptorWithSameValues));"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(DESC_NUS.equals(DESC_NUS));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(DESC_NUS.equals(null));"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(DESC_NUS.equals(5));"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(DESC_NUS.equals(DESC_ONLINE));"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"        // different diary -\u003e returns false"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        InterviewEditCommand.EditInterviewDescriptor editedNus \u003d"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            new EditInterviewDescriptorBuilder(DESC_NUS).withAddress(VALID_ADDRESS_ONLINE).build();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(DESC_NUS.equals(editedNus));"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        //different date -\u003e returns false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        editedNus \u003d new EditInterviewDescriptorBuilder(DESC_NUS).withInterviewDate(VALID_DATE_ONLINE).build();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(DESC_NUS.equals(editedNus));"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        //different isOnline -\u003e returns false"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        editedNus \u003d new EditInterviewDescriptorBuilder(DESC_NUS).withIsOnline(VALID_IS_ONLINE_ONLINE).build();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(DESC_NUS.equals(editedNus));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":8,"-":41}},{"path":"src/test/java/seedu/diary/logic/commands/interviewsubcommands/InterviewAddCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands.interviewsubcommands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERVIEW;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP_APPLICATION;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiaryWithInterviews;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInterviews.NUS;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInterviews.ONLINE;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInterviews.ORCHARD_TOWER;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.CommandResult;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.diary.logic.commands.exceptions.InterviewCommandException;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ModelManager;"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.UserPrefs;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.diary.model.internship.ApplicationDate;"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.interview.Interview;"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InterviewBuilder;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Contains integration tests with model and unit test for {@code InterviewAddCommand}."},{"lineNumber":30,"author":{"gitId":"-"},"content":" */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class InterviewAddCommandTest {"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalInternshipDiaryWithInterviews(), new UserPrefs());"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void constructor_nullInterview_throwsNullPointerException() {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, null));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void constructor_nullIndex_throwsNullPointerException() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            new InterviewAddCommand(null, new InterviewBuilder().build()));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void execute_nullModel_throwsNullPointerException() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        InterviewAddCommand command \u003d new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            new InterviewBuilder().build());"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            command.execute(null));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void execute_invalidDate_throwsInterviewCommandException() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        ApplicationDate date \u003d model.getFilteredInternshipApplicationList()"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased()).getApplicationDate();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Interview interview \u003d new InterviewBuilder().withDate(date.fullApplicationDate.minusDays(3)).build();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        InterviewAddCommand command \u003d new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, interview);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(InterviewCommandException.class, () -\u003e command.execute(model));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void execute_validArguments_addSuccess() throws CommandException {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Interview interview \u003d new InterviewBuilder(ORCHARD_TOWER).build();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        InterviewAddCommand command \u003d new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, interview);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        CommandResult result \u003d command.execute(model);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertEquals(String.format(InterviewAddCommand.MESSAGE_SUCCESS, interview), result.getFeedbackToUser());"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        InternshipApplication internshipApplication \u003d model.getFilteredInternshipApplicationList()"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertTrue(internshipApplication.hasInterview(interview));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void execute_duplicateInterview_throwsCommandException() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        InternshipApplication internshipApplication \u003d model.getFilteredInternshipApplicationList()"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Interview interview \u003d internshipApplication"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            .getInterview(INDEX_FIRST_INTERVIEW.getZeroBased());"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        InterviewAddCommand command \u003d new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, interview);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class,"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            String.format(InterviewAddCommand.MESSAGE_DUPLICATE_INTERVIEW, internshipApplication), () -\u003e"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                command.execute(model));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        InterviewAddCommand command \u003d new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, NUS);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        InterviewAddCommand copy \u003d new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, NUS);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        //same object -\u003e returns true"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertTrue(command.equals(command));"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        //different object but same variables -\u003e returns true"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertTrue(command.equals(copy));"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        //null -\u003e returns false"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertFalse(command.equals(null));"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        //different type -\u003e returns false"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertFalse(command.equals(5));"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        //different index -\u003e returns false"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        copy \u003d new InterviewAddCommand(INDEX_SECOND_INTERNSHIP_APPLICATION, NUS);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertFalse(command.equals(copy));"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        //different interview -\u003e returns false"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        copy \u003d new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, ONLINE);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertFalse(command.equals(copy));"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":17,"-":95}},{"path":"src/test/java/seedu/diary/logic/commands/interviewsubcommands/InterviewDeleteCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands.interviewsubcommands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERVIEW;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP_APPLICATION;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_SECOND_INTERVIEW;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiaryWithInterviews;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.Messages;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.UserPrefs;"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.interview.Interview;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains integration test with model and unit tests for {@code InterviewDeleteCommand}."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class InterviewDeleteCommandTest {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalInternshipDiaryWithInterviews(), new UserPrefs());"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void constructor_nullIndex_throwsNullPointerException() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            new InterviewDeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, null));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            new InterviewDeleteCommand(null, INDEX_FIRST_INTERVIEW));"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void execute_nullModel_throwsNullPointerException() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        InterviewDeleteCommand command \u003d new InterviewDeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            INDEX_FIRST_INTERVIEW);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            command.execute(null));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void execute_validIndex_success() throws CommandException {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        InternshipApplication internshipApplication \u003d model.getFilteredInternshipApplicationList()"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Interview interviewToDelete \u003d internshipApplication.getInterview(INDEX_FIRST_INTERVIEW.getZeroBased());"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        InterviewDeleteCommand command \u003d new InterviewDeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            INDEX_FIRST_INTERVIEW);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(InterviewDeleteCommand.MESSAGE_SUCCESS, interviewToDelete);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, command.execute(model).getFeedbackToUser());"},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":"        assertFalse(internshipApplication.hasInterview(interviewToDelete));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void execute_invalidIndex_failure() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredInternshipApplicationList()"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased()).getInterviews().size() + 1);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        InterviewDeleteCommand command \u003d new InterviewDeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            outOfBoundIndex);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, Messages.MESSAGE_INVALID_INTERVIEW_DISPLAYED_INDEX, () -\u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            command.execute(model));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        InterviewDeleteCommand command \u003d new InterviewDeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            INDEX_FIRST_INTERVIEW);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        InterviewDeleteCommand copy \u003d new InterviewDeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            INDEX_FIRST_INTERVIEW);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        //same object -\u003e returns true"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertTrue(command.equals(command));"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        //different object but same variables -\u003e returns true"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(command.equals(copy));"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        //null -\u003e returns false"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertFalse(command.equals(null));"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        //different type -\u003e returns false"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertFalse(command.equals(5));"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        //different internshipIndex -\u003e returns false"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        copy \u003d new InterviewDeleteCommand(INDEX_SECOND_INTERNSHIP_APPLICATION, INDEX_FIRST_INTERVIEW);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertFalse(command.equals(copy));"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        //different interviewIndex -\u003e returns false"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        copy \u003d new InterviewDeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, INDEX_SECOND_INTERVIEW);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertFalse(command.equals(copy));"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":16,"-":80}},{"path":"src/test/java/seedu/diary/logic/commands/interviewsubcommands/InterviewEditCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands.interviewsubcommands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERVIEW;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP_APPLICATION;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_SECOND_INTERVIEW;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiaryWithInterviews;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInterviews.ONLINE;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInterviews.ORCHARD_TOWER;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.Messages;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.diary.logic.commands.exceptions.InterviewCommandException;"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ModelManager;"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.UserPrefs;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.diary.model.internship.ApplicationDate;"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.interview.Interview;"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.EditInterviewDescriptorBuilder;"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InterviewBuilder;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class InterviewEditCommandTest {"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalInternshipDiaryWithInterviews(), new UserPrefs());"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private InterviewEditCommand.EditInterviewDescriptor editInterviewDescriptor \u003d"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        new EditInterviewDescriptorBuilder().build();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void constructor_nullArguments_throwsNullPointerException() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                null, editInterviewDescriptor));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            new InterviewEditCommand(null, INDEX_FIRST_INTERVIEW, editInterviewDescriptor));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                INDEX_FIRST_INTERVIEW, null));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void execute_nullModel_throwsNullPointerException() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        InterviewEditCommand command \u003d new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            INDEX_FIRST_INTERVIEW, editInterviewDescriptor);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            command.execute(null));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void execute_invalidDate_throwsInterviewCommandException() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        ApplicationDate date \u003d model.getFilteredInternshipApplicationList()"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased()).getApplicationDate();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        InterviewEditCommand.EditInterviewDescriptor tempInterviewDescriptor \u003d new EditInterviewDescriptorBuilder()"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            .withInterviewDate(date.fullApplicationDate.minusDays(3)).build();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        InterviewEditCommand command \u003d new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            INDEX_FIRST_INTERVIEW, tempInterviewDescriptor);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(InterviewCommandException.class, () -\u003e command.execute(model));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void execute_missingAddressField_throwsInterviewCommandException() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        Interview interview \u003d new InterviewBuilder(ONLINE).build();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        model.getFilteredInternshipApplicationList()"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            .get(INDEX_SECOND_INTERNSHIP_APPLICATION.getZeroBased()).addInterview(interview);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Index index \u003d Index.fromOneBased(model.getFilteredInternshipApplicationList()"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            .get(INDEX_SECOND_INTERNSHIP_APPLICATION.getZeroBased()).getInterviews().size());"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        InterviewEditCommand.EditInterviewDescriptor tempInterviewDescriptor \u003d new EditInterviewDescriptorBuilder()"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            .withIsOnline(\"false\").build();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        InterviewEditCommand command \u003d new InterviewEditCommand(INDEX_SECOND_INTERNSHIP_APPLICATION,"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            index, tempInterviewDescriptor);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(InterviewCommandException.class, () -\u003e command.execute(model));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void execute_validArguments_success() throws CommandException {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        InternshipApplication internshipApplication \u003d model.getFilteredInternshipApplicationList()"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Interview interviewToEdit \u003d internshipApplication.getInterview(INDEX_FIRST_INTERVIEW.getZeroBased());"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        InterviewEditCommand command \u003d new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            INDEX_FIRST_INTERVIEW, new EditInterviewDescriptorBuilder(ONLINE).build());"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Interview editedInterview \u003d new InterviewBuilder(ONLINE).build();"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(InterviewEditCommand.MESSAGE_EDIT_INTERVIEW_SUCCESS, editedInterview);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, command.execute(model).getFeedbackToUser());"},{"lineNumber":93,"author":{"gitId":"gerhean"},"content":"        assertFalse(internshipApplication.hasInterview(interviewToEdit));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void execute_duplicateInterview_failure() {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        InternshipApplication internshipApplication \u003d model.getFilteredInternshipApplicationList()"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        Interview interviewToEdit \u003d internshipApplication.getInterview(INDEX_FIRST_INTERVIEW.getZeroBased());"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        InterviewEditCommand command \u003d new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            INDEX_FIRST_INTERVIEW, new EditInterviewDescriptorBuilder(interviewToEdit).build());"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            String.format(InterviewEditCommand.MESSAGE_DUPLICATE_INTERVIEW, internshipApplication), () -\u003e"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                command.execute(model));"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void execute_invalidIndex_failure() {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredInternshipApplicationList()"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased()).getInterviews().size() + 1);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        InterviewEditCommand command \u003d new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            outOfBoundIndex, editInterviewDescriptor);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, Messages.MESSAGE_INVALID_INTERVIEW_DISPLAYED_INDEX, () -\u003e"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            command.execute(model));"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        InterviewEditCommand command \u003d new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            INDEX_FIRST_INTERVIEW, editInterviewDescriptor);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        InterviewEditCommand copy \u003d new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            INDEX_FIRST_INTERVIEW, editInterviewDescriptor);"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        //same object -\u003e returns true"},{"lineNumber":127,"author":{"gitId":"gerhean"},"content":"        assertEquals(command, command);"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        //different object but same variables -\u003e returns true"},{"lineNumber":130,"author":{"gitId":"gerhean"},"content":"        assertEquals(command, copy);"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        //null -\u003e returns false"},{"lineNumber":133,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(null, command);"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"        //different type -\u003e returns false"},{"lineNumber":136,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(5, command);"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        //different internshipIndex -\u003e returns false"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        copy \u003d new InterviewEditCommand(INDEX_SECOND_INTERNSHIP_APPLICATION,"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            INDEX_FIRST_INTERVIEW, editInterviewDescriptor);"},{"lineNumber":141,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(command, copy);"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        //different interviewIndex -\u003e returns false"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        copy \u003d new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            INDEX_SECOND_INTERVIEW, editInterviewDescriptor);"},{"lineNumber":146,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(command, copy);"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        //different editInterviewDescriptor -\u003e returns false"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        copy \u003d new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            INDEX_FIRST_INTERVIEW, new EditInterviewDescriptorBuilder(ORCHARD_TOWER).build());"},{"lineNumber":151,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(command, copy);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":28,"-":125}},{"path":"src/test/java/seedu/diary/logic/commands/interviewsubcommands/InterviewListCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.commands.interviewsubcommands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.interviewsubcommands.InterviewListCommand.MESSAGE_SUCCESS;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.Messages;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ModelManager;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.UserPrefs;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.TypicalInternshipApplications;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class InterviewListCommandTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Model expectedModel;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(TypicalInternshipApplications"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            .getTypicalInternshipDiaryWithInterviews(), new UserPrefs());"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        expectedModel \u003d new ModelManager(model.getInternshipDiary(), new UserPrefs());"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void constructor_nullIndex_throwsNullPointerException() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            new InterviewListCommand(null));"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void execute_validIndex_success() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        InternshipApplication internshipApplication \u003d model.getFilteredInternshipApplicationList()"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new InterviewListCommand(INDEX_FIRST_INTERNSHIP_APPLICATION), model,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_SUCCESS, internshipApplication), expectedModel,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            internshipApplication);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void execute_invalidIndex_failure() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertCommandFailure(new InterviewListCommand(Index.fromZeroBased(10000)),"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            model, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":13,"-":40}},{"path":"src/test/java/seedu/diary/logic/comparator/ApplicationDateAndInterviewDateComparatorTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.comparator;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.time.temporal.ChronoUnit;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Address;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.ApplicationDate;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.interview.Interview;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipApplicationBuilder;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"class ApplicationDateAndInterviewDateComparatorTest {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void compare() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        LocalDate currentDate \u003d LocalDate.now();"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertEquals(currentDate.compareTo(currentDate), 0);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        InternshipApplicationBuilder internship1 \u003d new InternshipApplicationBuilder();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        internship1.withApplicationDate(new ApplicationDate(currentDate));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        InternshipApplicationBuilder internship2 \u003d new InternshipApplicationBuilder();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        internship2.withApplicationDate(new ApplicationDate(currentDate.plus(1, ChronoUnit.DAYS)));"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        InternshipApplicationBuilder internship3 \u003d new InternshipApplicationBuilder();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        internship3.withApplicationDate(new ApplicationDate(currentDate.plus(1, ChronoUnit.DAYS)));"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // an application\u0027s application date compared to itself -\u003e returns 0"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertEquals(internship1.getApplicationDate().compareTo(internship1.getApplicationDate()), 0);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // comparing two applications with different application dates -\u003e does not return 0"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertNotEquals(internship1.getApplicationDate().compareTo(internship2.getApplicationDate()), 0);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // comparing internship1(with earlier application date) and internship2 (with later application date)"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // -\u003e returns negative int"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(internship1.getApplicationDate().compareTo(internship2.getApplicationDate()), -1);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // with same application date, comparing internship2(with earlier \u0027earliest interview date\u0027) and"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // internship3(with later \u0027earliest interview date\u0027) --\u003e returns negative int"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Interview newInterviewForInternship2 \u003d Interview.createInterview(true,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            new ApplicationDate(currentDate.plus(12, ChronoUnit.DAYS)),"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            new Address(\"123 Stevens Road\"));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Interview anotherInterviewForInternship2 \u003d Interview.createInterview(true,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            new ApplicationDate(currentDate.plus(25, ChronoUnit.DAYS)),"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            new Address(\"123 Stevens Road\"));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        internship2.withInterview(newInterviewForInternship2);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        internship2.withInterview(anotherInterviewForInternship2);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Interview newInterviewForInternship3 \u003d Interview.createInterview(true,"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            new ApplicationDate(currentDate.plus(16, ChronoUnit.DAYS)),"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            new Address(\"123 Stevens Road\"));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        internship3.withInterview(newInterviewForInternship3);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Optional\u003cInterview\u003e earliestInterviewForInternship2 \u003d internship2.getEarliestInterview(currentDate);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(earliestInterviewForInternship2.isPresent());"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Optional\u003cInterview\u003e earliestInterviewForInternship3 \u003d internship3.getEarliestInterview(currentDate);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(earliestInterviewForInternship3.isPresent());"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        LocalDate earliestInterviewDateForInternship2 \u003d earliestInterviewForInternship2.get().getInterviewDate();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        LocalDate earliestInterviewDateForInternship3 \u003d earliestInterviewForInternship3.get().getInterviewDate();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(earliestInterviewDateForInternship2.compareTo(earliestInterviewDateForInternship3), -4);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Comparator\u003cInternshipApplication\u003e applicationDateAndInterviewDateComparator \u003d"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            new ApplicationDateAndInterviewDateComparator();"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(applicationDateAndInterviewDateComparator, applicationDateAndInterviewDateComparator);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertNotEquals(1, applicationDateAndInterviewDateComparator);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertNotEquals(null, applicationDateAndInterviewDateComparator);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":6,"-":72}},{"path":"src/test/java/seedu/diary/logic/comparator/ApplicationDateComparatorTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.comparator;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import java.util.Collections;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import java.util.Comparator;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.ApplicationDate;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipApplicationBuilder;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.TypicalInternshipApplications;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":" * Comparator for sorting InternshipApplication by companies in lexicographical order."},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":" */"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"public class ApplicationDateComparatorTest {"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"    private static final ApplicationDate date1 \u003d new ApplicationDate(LocalDate.of(2019, 11, 1));"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"    private static final ApplicationDate date2 \u003d new ApplicationDate(LocalDate.of(2019, 11, 10));"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"    private static final ApplicationDate date3 \u003d new ApplicationDate(LocalDate.of(2019, 12, 5));"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"    private static final ApplicationDate date4 \u003d new ApplicationDate(LocalDate.of(2019, 12, 10));"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"    public void equals() {"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"        ApplicationDateComparator applicationDateComparator1 \u003d new ApplicationDateComparator();"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"        ApplicationDateComparator applicationDateComparator2 \u003d new ApplicationDateComparator();"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"        // same object -\u003e returns true"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"        assertEquals(applicationDateComparator1, applicationDateComparator1);"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"        // same kind of object -\u003e returns true"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"        assertEquals(applicationDateComparator1, applicationDateComparator2);"},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"        // Reverse is the same -\u003e return true"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"        assertEquals(applicationDateComparator1.reversed(), applicationDateComparator2.reversed());"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"    public void compare_internshipApplication_correct() {"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"        ApplicationDateComparator applicationDateComparator \u003d new ApplicationDateComparator();"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"        InternshipApplication google \u003d TypicalInternshipApplications.GOOGLE;"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"        InternshipApplication facebook \u003d TypicalInternshipApplications.FACEBOOK;"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"        InternshipApplication google1 \u003d new InternshipApplicationBuilder(google)"},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"            .withApplicationDate(date1).build();"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":"        InternshipApplication google2 \u003d new InternshipApplicationBuilder(google)"},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":"            .withApplicationDate(date2).build();"},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":"        InternshipApplication facebook1 \u003d new InternshipApplicationBuilder(facebook)"},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":"            .withApplicationDate(date1).build();"},{"lineNumber":55,"author":{"gitId":"gerhean"},"content":"        InternshipApplication facebook2 \u003d new InternshipApplicationBuilder(facebook)"},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":"            .withApplicationDate(date4).build();"},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":58,"author":{"gitId":"gerhean"},"content":"        // same object"},{"lineNumber":59,"author":{"gitId":"gerhean"},"content":"        assertEquals(0, applicationDateComparator.compare(google, google));"},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":"        // only same applicationDate"},{"lineNumber":62,"author":{"gitId":"gerhean"},"content":"        assertEquals(0, applicationDateComparator.compare(google1, facebook1));"},{"lineNumber":63,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":"        // only applicationDate is different"},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":"        assertTrue(applicationDateComparator.compare(google1, google2) \u003c 0);"},{"lineNumber":66,"author":{"gitId":"gerhean"},"content":"        assertTrue(applicationDateComparator.compare(google2, google1) \u003e 0);"},{"lineNumber":67,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":68,"author":{"gitId":"gerhean"},"content":"        // everything is different"},{"lineNumber":69,"author":{"gitId":"gerhean"},"content":"        assertTrue(applicationDateComparator.compare(google1, facebook2) \u003c 0);"},{"lineNumber":70,"author":{"gitId":"gerhean"},"content":"        assertTrue(applicationDateComparator.compare(facebook2, google2) \u003e 0);"},{"lineNumber":71,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":72,"author":{"gitId":"gerhean"},"content":"        // everything reversed is different"},{"lineNumber":73,"author":{"gitId":"gerhean"},"content":"        Comparator\u003cInternshipApplication\u003e reversed \u003d applicationDateComparator.reversed();"},{"lineNumber":74,"author":{"gitId":"gerhean"},"content":"        assertTrue(reversed.compare(google1, facebook2) \u003e 0);"},{"lineNumber":75,"author":{"gitId":"gerhean"},"content":"        assertTrue(reversed.compare(facebook2, google2) \u003c 0);"},{"lineNumber":76,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":78,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":79,"author":{"gitId":"gerhean"},"content":"    public void compare_unsortedList_listSorted() {"},{"lineNumber":80,"author":{"gitId":"gerhean"},"content":"        ApplicationDateComparator applicationDateComparator \u003d new ApplicationDateComparator();"},{"lineNumber":81,"author":{"gitId":"gerhean"},"content":"        InternshipApplication google \u003d TypicalInternshipApplications.GOOGLE;"},{"lineNumber":82,"author":{"gitId":"gerhean"},"content":"        InternshipApplication facebook \u003d TypicalInternshipApplications.FACEBOOK;"},{"lineNumber":83,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":84,"author":{"gitId":"gerhean"},"content":"        InternshipApplication google1 \u003d new InternshipApplicationBuilder(google)"},{"lineNumber":85,"author":{"gitId":"gerhean"},"content":"            .withApplicationDate(date1).build();"},{"lineNumber":86,"author":{"gitId":"gerhean"},"content":"        InternshipApplication google2 \u003d new InternshipApplicationBuilder(google)"},{"lineNumber":87,"author":{"gitId":"gerhean"},"content":"            .withApplicationDate(date3).build();"},{"lineNumber":88,"author":{"gitId":"gerhean"},"content":"        InternshipApplication facebook1 \u003d new InternshipApplicationBuilder(facebook)"},{"lineNumber":89,"author":{"gitId":"gerhean"},"content":"            .withApplicationDate(date2).build();"},{"lineNumber":90,"author":{"gitId":"gerhean"},"content":"        InternshipApplication facebook2 \u003d new InternshipApplicationBuilder(facebook)"},{"lineNumber":91,"author":{"gitId":"gerhean"},"content":"            .withApplicationDate(date3).build();"},{"lineNumber":92,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":93,"author":{"gitId":"gerhean"},"content":"        ArrayList\u003cInternshipApplication\u003e unsorted \u003d new ArrayList\u003c\u003e();"},{"lineNumber":94,"author":{"gitId":"gerhean"},"content":"        Collections.addAll(unsorted, google2, google1, facebook1, facebook2);"},{"lineNumber":95,"author":{"gitId":"gerhean"},"content":"        unsorted.sort(applicationDateComparator);"},{"lineNumber":96,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":97,"author":{"gitId":"gerhean"},"content":"        ArrayList\u003cInternshipApplication\u003e sorted \u003d new ArrayList\u003c\u003e();"},{"lineNumber":98,"author":{"gitId":"gerhean"},"content":"        Collections.addAll(sorted, google1, facebook1, google2, facebook2);"},{"lineNumber":99,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":100,"author":{"gitId":"gerhean"},"content":"        assertEquals(sorted, unsorted);"},{"lineNumber":101,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":103,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":104,"author":{"gitId":"gerhean"},"content":"    public void toString_returnsPrefix() {"},{"lineNumber":105,"author":{"gitId":"gerhean"},"content":"        assertEquals(new ApplicationDateComparator().toString(), PREFIX_DATE.getPrefix());"},{"lineNumber":106,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":107}},{"path":"src/test/java/seedu/diary/logic/comparator/CompanyComparatorTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.comparator;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_COMPANY;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import java.util.Comparator;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipApplicationBuilder;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.TypicalInternshipApplications;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":" * Comparator for sorting InternshipApplication by companies in lexicographical order."},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":" */"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"public class CompanyComparatorTest {"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"    public void equals() {"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"        CompanyComparator companyComparator1 \u003d new CompanyComparator();"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"        CompanyComparator companyComparator2 \u003d new CompanyComparator();"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"        assertEquals(companyComparator1, companyComparator1);"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"        // same kind of object -\u003e returns true"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"        assertEquals(companyComparator1, companyComparator2);"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"        // Reverse is the same -\u003e return true"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"        assertEquals(companyComparator1.reversed(), companyComparator2.reversed());"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"    public void compare_internshipApplication_correct() {"},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"        CompanyComparator companyComparator \u003d new CompanyComparator();"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"        InternshipApplication google \u003d TypicalInternshipApplications.GOOGLE;"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"        InternshipApplication facebook \u003d TypicalInternshipApplications.FACEBOOK;"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"        InternshipApplication google1 \u003d new InternshipApplicationBuilder(google).withCompany(\"A\").build();"},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"        InternshipApplication google2 \u003d new InternshipApplicationBuilder(google).withCompany(\"C\").build();"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"        InternshipApplication facebook1 \u003d new InternshipApplicationBuilder(facebook).withCompany(\"A\").build();"},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"        InternshipApplication facebook2 \u003d new InternshipApplicationBuilder(facebook).withCompany(\"D\").build();"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"        // same object"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"        assertEquals(0, companyComparator.compare(google, google));"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"        // only same company"},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"        assertEquals(0, companyComparator.compare(google1, facebook1));"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":"        // only company is different"},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":"        assertTrue(companyComparator.compare(google1, google2) \u003c 0);"},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":"        assertTrue(companyComparator.compare(google2, google1) \u003e 0);"},{"lineNumber":55,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":"        // only everything is different"},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":"        assertTrue(companyComparator.compare(google1, facebook2) \u003c 0);"},{"lineNumber":58,"author":{"gitId":"gerhean"},"content":"        assertTrue(companyComparator.compare(facebook2, google2) \u003e 0);"},{"lineNumber":59,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":"        // everything reversed is different"},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":"        Comparator\u003cInternshipApplication\u003e reversed \u003d companyComparator.reversed();"},{"lineNumber":62,"author":{"gitId":"gerhean"},"content":"        assertTrue(reversed.compare(google1, facebook2) \u003e 0);"},{"lineNumber":63,"author":{"gitId":"gerhean"},"content":"        assertTrue(reversed.compare(facebook2, google2) \u003c 0);"},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":66,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"gerhean"},"content":"    public void compare_unsortedList_listSorted() {"},{"lineNumber":68,"author":{"gitId":"gerhean"},"content":"        CompanyComparator companyComparator \u003d new CompanyComparator();"},{"lineNumber":69,"author":{"gitId":"gerhean"},"content":"        InternshipApplication google \u003d TypicalInternshipApplications.GOOGLE;"},{"lineNumber":70,"author":{"gitId":"gerhean"},"content":"        InternshipApplication facebook \u003d TypicalInternshipApplications.FACEBOOK;"},{"lineNumber":71,"author":{"gitId":"gerhean"},"content":"        InternshipApplication google1 \u003d new InternshipApplicationBuilder(google).withCompany(\"A\").build();"},{"lineNumber":72,"author":{"gitId":"gerhean"},"content":"        InternshipApplication google2 \u003d new InternshipApplicationBuilder(google).withCompany(\"C\").build();"},{"lineNumber":73,"author":{"gitId":"gerhean"},"content":"        InternshipApplication facebook1 \u003d new InternshipApplicationBuilder(facebook).withCompany(\"B\").build();"},{"lineNumber":74,"author":{"gitId":"gerhean"},"content":"        InternshipApplication facebook2 \u003d new InternshipApplicationBuilder(facebook).withCompany(\"D\").build();"},{"lineNumber":75,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":76,"author":{"gitId":"gerhean"},"content":"        ArrayList\u003cInternshipApplication\u003e unsorted \u003d new ArrayList\u003c\u003e();"},{"lineNumber":77,"author":{"gitId":"gerhean"},"content":"        Collections.addAll(unsorted, google2, google1, facebook1, facebook2);"},{"lineNumber":78,"author":{"gitId":"gerhean"},"content":"        unsorted.sort(companyComparator);"},{"lineNumber":79,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":80,"author":{"gitId":"gerhean"},"content":"        ArrayList\u003cInternshipApplication\u003e sorted \u003d new ArrayList\u003c\u003e();"},{"lineNumber":81,"author":{"gitId":"gerhean"},"content":"        Collections.addAll(sorted, google1, facebook1, google2, facebook2);"},{"lineNumber":82,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":83,"author":{"gitId":"gerhean"},"content":"        assertEquals(sorted, unsorted);"},{"lineNumber":84,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":86,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"gerhean"},"content":"    public void toString_returnsPrefix() {"},{"lineNumber":88,"author":{"gitId":"gerhean"},"content":"        assertEquals(new CompanyComparator().toString(), PREFIX_COMPANY.getPrefix());"},{"lineNumber":89,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":90}},{"path":"src/test/java/seedu/diary/logic/comparator/PriorityComparatorTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.comparator;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import java.util.Comparator;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipApplicationBuilder;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.TypicalInternshipApplications;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":" * Comparator for sorting InternshipApplication by Priority."},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":" */"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"public class PriorityComparatorTest {"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"    public void equals() {"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"        PriorityComparator priorityComparator1 \u003d new PriorityComparator();"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"        PriorityComparator priorityComparator2 \u003d new PriorityComparator();"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"        assertEquals(priorityComparator1, priorityComparator1);"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"        // same kind of object -\u003e returns true"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"        assertEquals(priorityComparator1, priorityComparator2);"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"        // Reverse is the same -\u003e return true"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"        assertEquals(priorityComparator1.reversed(), priorityComparator2.reversed());"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"    public void compare_internshipApplication_correct() {"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"        PriorityComparator priorityComparator \u003d new PriorityComparator();"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"        InternshipApplication google \u003d TypicalInternshipApplications.GOOGLE;"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"        InternshipApplication facebook \u003d TypicalInternshipApplications.FACEBOOK;"},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"        InternshipApplication google1 \u003d new InternshipApplicationBuilder(google)"},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"            .withPriority(1).build();"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"        InternshipApplication google2 \u003d new InternshipApplicationBuilder(google)"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"            .withPriority(3).build();"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"        InternshipApplication facebook1 \u003d new InternshipApplicationBuilder(facebook)"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"            .withPriority(1).build();"},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"        InternshipApplication facebook2 \u003d new InternshipApplicationBuilder(facebook)"},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"            .withPriority(5).build();"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":"        // same object"},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":"        assertEquals(0, priorityComparator.compare(google, google));"},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":55,"author":{"gitId":"gerhean"},"content":"        // only same priority"},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":"        assertEquals(0, priorityComparator.compare(google1, facebook1));"},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":58,"author":{"gitId":"gerhean"},"content":"        // only priority is different"},{"lineNumber":59,"author":{"gitId":"gerhean"},"content":"        assertTrue(priorityComparator.compare(google1, google2) \u003c 0);"},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":"        assertTrue(priorityComparator.compare(google2, google1) \u003e 0);"},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":62,"author":{"gitId":"gerhean"},"content":"        // everything is different"},{"lineNumber":63,"author":{"gitId":"gerhean"},"content":"        assertTrue(priorityComparator.compare(google1, facebook2) \u003c 0);"},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":"        assertTrue(priorityComparator.compare(facebook2, google2) \u003e 0);"},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":66,"author":{"gitId":"gerhean"},"content":"        // everything reversed is different"},{"lineNumber":67,"author":{"gitId":"gerhean"},"content":"        Comparator\u003cInternshipApplication\u003e reversed \u003d priorityComparator.reversed();"},{"lineNumber":68,"author":{"gitId":"gerhean"},"content":"        assertTrue(reversed.compare(google1, facebook2) \u003e 0);"},{"lineNumber":69,"author":{"gitId":"gerhean"},"content":"        assertTrue(reversed.compare(facebook2, google2) \u003c 0);"},{"lineNumber":70,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":72,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"gerhean"},"content":"    public void compare_unsortedList_listSorted() {"},{"lineNumber":74,"author":{"gitId":"gerhean"},"content":"        PriorityComparator priorityComparator \u003d new PriorityComparator();"},{"lineNumber":75,"author":{"gitId":"gerhean"},"content":"        InternshipApplication google \u003d TypicalInternshipApplications.GOOGLE;"},{"lineNumber":76,"author":{"gitId":"gerhean"},"content":"        InternshipApplication facebook \u003d TypicalInternshipApplications.FACEBOOK;"},{"lineNumber":77,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":78,"author":{"gitId":"gerhean"},"content":"        InternshipApplication google1 \u003d new InternshipApplicationBuilder(google)"},{"lineNumber":79,"author":{"gitId":"gerhean"},"content":"            .withPriority(1).build();"},{"lineNumber":80,"author":{"gitId":"gerhean"},"content":"        InternshipApplication google2 \u003d new InternshipApplicationBuilder(google)"},{"lineNumber":81,"author":{"gitId":"gerhean"},"content":"            .withPriority(3).build();"},{"lineNumber":82,"author":{"gitId":"gerhean"},"content":"        InternshipApplication facebook1 \u003d new InternshipApplicationBuilder(facebook)"},{"lineNumber":83,"author":{"gitId":"gerhean"},"content":"            .withPriority(2).build();"},{"lineNumber":84,"author":{"gitId":"gerhean"},"content":"        InternshipApplication facebook2 \u003d new InternshipApplicationBuilder(facebook)"},{"lineNumber":85,"author":{"gitId":"gerhean"},"content":"            .withPriority(4).build();"},{"lineNumber":86,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":87,"author":{"gitId":"gerhean"},"content":"        ArrayList\u003cInternshipApplication\u003e unsorted \u003d new ArrayList\u003c\u003e();"},{"lineNumber":88,"author":{"gitId":"gerhean"},"content":"        Collections.addAll(unsorted, google2, google1, facebook1, facebook2);"},{"lineNumber":89,"author":{"gitId":"gerhean"},"content":"        unsorted.sort(priorityComparator);"},{"lineNumber":90,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":91,"author":{"gitId":"gerhean"},"content":"        ArrayList\u003cInternshipApplication\u003e sorted \u003d new ArrayList\u003c\u003e();"},{"lineNumber":92,"author":{"gitId":"gerhean"},"content":"        Collections.addAll(sorted, google1, facebook1, google2, facebook2);"},{"lineNumber":93,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":94,"author":{"gitId":"gerhean"},"content":"        assertEquals(sorted, unsorted);"},{"lineNumber":95,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":97,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"gerhean"},"content":"    public void toString_returnsPrefix() {"},{"lineNumber":99,"author":{"gitId":"gerhean"},"content":"        assertEquals(new PriorityComparator().toString(), PREFIX_PRIORITY.getPrefix());"},{"lineNumber":100,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":101}},{"path":"src/test/java/seedu/diary/logic/comparator/RoleComparatorTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.comparator;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import java.util.Comparator;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipApplicationBuilder;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.TypicalInternshipApplications;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":" * Comparator for sorting InternshipApplication by companies in lexicographical order."},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":" */"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"public class RoleComparatorTest {"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"    public void equals() {"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"        RoleComparator roleComparator1 \u003d new RoleComparator();"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"        RoleComparator roleComparator2 \u003d new RoleComparator();"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"        assertEquals(roleComparator1, roleComparator1);"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"        // same kind of object -\u003e returns true"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"        assertEquals(roleComparator1, roleComparator2);"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"        // Reverse is the same -\u003e return true"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"        assertEquals(roleComparator1.reversed(), roleComparator2.reversed());"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"    public void compare_internshipApplication_correct() {"},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"        RoleComparator roleComparator \u003d new RoleComparator();"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"        InternshipApplication google \u003d TypicalInternshipApplications.GOOGLE;"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"        InternshipApplication facebook \u003d TypicalInternshipApplications.FACEBOOK;"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"        InternshipApplication google1 \u003d new InternshipApplicationBuilder(google).withRole(\"A\").build();"},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"        InternshipApplication google2 \u003d new InternshipApplicationBuilder(google).withRole(\"C\").build();"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"        InternshipApplication facebook1 \u003d new InternshipApplicationBuilder(facebook).withRole(\"A\").build();"},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"        InternshipApplication facebook2 \u003d new InternshipApplicationBuilder(facebook).withRole(\"D\").build();"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"        // same object"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"        assertEquals(0, roleComparator.compare(google, google));"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"        // only same company"},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"        assertEquals(0, roleComparator.compare(google1, facebook1));"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":"        // only company is different"},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":"        assertTrue(roleComparator.compare(google1, google2) \u003c 0);"},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":"        assertTrue(roleComparator.compare(google2, google1) \u003e 0);"},{"lineNumber":55,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":"        // only everything is different"},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":"        assertTrue(roleComparator.compare(google1, facebook2) \u003c 0);"},{"lineNumber":58,"author":{"gitId":"gerhean"},"content":"        assertTrue(roleComparator.compare(facebook2, google2) \u003e 0);"},{"lineNumber":59,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":"        // everything reversed is different"},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":"        Comparator\u003cInternshipApplication\u003e reversed \u003d roleComparator.reversed();"},{"lineNumber":62,"author":{"gitId":"gerhean"},"content":"        assertTrue(reversed.compare(google1, facebook2) \u003e 0);"},{"lineNumber":63,"author":{"gitId":"gerhean"},"content":"        assertTrue(reversed.compare(facebook2, google2) \u003c 0);"},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":66,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"gerhean"},"content":"    public void compare_unsortedList_listSorted() {"},{"lineNumber":68,"author":{"gitId":"gerhean"},"content":"        RoleComparator roleComparator \u003d new RoleComparator();"},{"lineNumber":69,"author":{"gitId":"gerhean"},"content":"        InternshipApplication google \u003d TypicalInternshipApplications.GOOGLE;"},{"lineNumber":70,"author":{"gitId":"gerhean"},"content":"        InternshipApplication facebook \u003d TypicalInternshipApplications.FACEBOOK;"},{"lineNumber":71,"author":{"gitId":"gerhean"},"content":"        InternshipApplication google1 \u003d new InternshipApplicationBuilder(google).withRole(\"A\").build();"},{"lineNumber":72,"author":{"gitId":"gerhean"},"content":"        InternshipApplication google2 \u003d new InternshipApplicationBuilder(google).withRole(\"C\").build();"},{"lineNumber":73,"author":{"gitId":"gerhean"},"content":"        InternshipApplication facebook1 \u003d new InternshipApplicationBuilder(facebook).withRole(\"B\").build();"},{"lineNumber":74,"author":{"gitId":"gerhean"},"content":"        InternshipApplication facebook2 \u003d new InternshipApplicationBuilder(facebook).withRole(\"D\").build();"},{"lineNumber":75,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":76,"author":{"gitId":"gerhean"},"content":"        ArrayList\u003cInternshipApplication\u003e unsorted \u003d new ArrayList\u003c\u003e();"},{"lineNumber":77,"author":{"gitId":"gerhean"},"content":"        Collections.addAll(unsorted, google2, google1, facebook1, facebook2);"},{"lineNumber":78,"author":{"gitId":"gerhean"},"content":"        unsorted.sort(roleComparator);"},{"lineNumber":79,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":80,"author":{"gitId":"gerhean"},"content":"        ArrayList\u003cInternshipApplication\u003e sorted \u003d new ArrayList\u003c\u003e();"},{"lineNumber":81,"author":{"gitId":"gerhean"},"content":"        Collections.addAll(sorted, google1, facebook1, google2, facebook2);"},{"lineNumber":82,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":83,"author":{"gitId":"gerhean"},"content":"        assertEquals(sorted, unsorted);"},{"lineNumber":84,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":86,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"gerhean"},"content":"    public void toString_returnsPrefix() {"},{"lineNumber":88,"author":{"gitId":"gerhean"},"content":"        assertEquals(new RoleComparator().toString(), PREFIX_ROLE.getPrefix());"},{"lineNumber":89,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":90}},{"path":"src/test/java/seedu/diary/logic/comparator/StatusComparatorTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.comparator;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import java.util.Comparator;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.status.Status;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipApplicationBuilder;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.TypicalInternshipApplications;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":" * Comparator for sorting InternshipApplication by Status."},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":" */"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"public class StatusComparatorTest {"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"    public void equals() {"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"        StatusComparator statusComparator1 \u003d new StatusComparator();"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"        StatusComparator statusComparator2 \u003d new StatusComparator();"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"        // same object -\u003e returns true"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"        assertEquals(statusComparator1, statusComparator1);"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"        // same kind of object -\u003e returns true"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"        assertEquals(statusComparator1, statusComparator2);"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"        // Reverse is the same -\u003e return true"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"        assertEquals(statusComparator1.reversed(), statusComparator2.reversed());"},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"    public void compare_internshipApplication_correct() {"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"        StatusComparator statusComparator \u003d new StatusComparator();"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"        InternshipApplication google \u003d TypicalInternshipApplications.GOOGLE;"},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"        InternshipApplication facebook \u003d TypicalInternshipApplications.FACEBOOK;"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"        InternshipApplication google1 \u003d new InternshipApplicationBuilder(google)"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"            .withStatus(Status.WISHLIST).build();"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"        InternshipApplication google2 \u003d new InternshipApplicationBuilder(google)"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"            .withStatus(Status.APPLIED).build();"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"        InternshipApplication facebook1 \u003d new InternshipApplicationBuilder(facebook)"},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"            .withStatus(Status.WISHLIST).build();"},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"        InternshipApplication facebook2 \u003d new InternshipApplicationBuilder(facebook)"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":"            .withStatus(Status.OFFERED).build();"},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":"        // same object"},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":"        assertEquals(0, statusComparator.compare(google, google));"},{"lineNumber":55,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":"        // only same status"},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":"        assertEquals(0, statusComparator.compare(google1, facebook1));"},{"lineNumber":58,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":59,"author":{"gitId":"gerhean"},"content":"        // only status is different"},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":"        assertTrue(statusComparator.compare(google1, google2) \u003c 0);"},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":"        assertTrue(statusComparator.compare(google2, google1) \u003e 0);"},{"lineNumber":62,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":63,"author":{"gitId":"gerhean"},"content":"        // everything is different"},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":"        assertTrue(statusComparator.compare(google1, facebook2) \u003c 0);"},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":"        assertTrue(statusComparator.compare(facebook2, google2) \u003e 0);"},{"lineNumber":66,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":67,"author":{"gitId":"gerhean"},"content":"        // everything reversed is different"},{"lineNumber":68,"author":{"gitId":"gerhean"},"content":"        Comparator\u003cInternshipApplication\u003e reversed \u003d statusComparator.reversed();"},{"lineNumber":69,"author":{"gitId":"gerhean"},"content":"        assertTrue(reversed.compare(google1, facebook2) \u003e 0);"},{"lineNumber":70,"author":{"gitId":"gerhean"},"content":"        assertTrue(reversed.compare(facebook2, google2) \u003c 0);"},{"lineNumber":71,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":73,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"gerhean"},"content":"    public void compare_unsortedList_listSorted() {"},{"lineNumber":75,"author":{"gitId":"gerhean"},"content":"        StatusComparator statusComparator \u003d new StatusComparator();"},{"lineNumber":76,"author":{"gitId":"gerhean"},"content":"        InternshipApplication google \u003d TypicalInternshipApplications.GOOGLE;"},{"lineNumber":77,"author":{"gitId":"gerhean"},"content":"        InternshipApplication facebook \u003d TypicalInternshipApplications.FACEBOOK;"},{"lineNumber":78,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":79,"author":{"gitId":"gerhean"},"content":"        InternshipApplication google1 \u003d new InternshipApplicationBuilder(google)"},{"lineNumber":80,"author":{"gitId":"gerhean"},"content":"            .withStatus(Status.WISHLIST).build();"},{"lineNumber":81,"author":{"gitId":"gerhean"},"content":"        InternshipApplication google2 \u003d new InternshipApplicationBuilder(google)"},{"lineNumber":82,"author":{"gitId":"gerhean"},"content":"            .withStatus(Status.INTERVIEW).build();"},{"lineNumber":83,"author":{"gitId":"gerhean"},"content":"        InternshipApplication facebook1 \u003d new InternshipApplicationBuilder(facebook)"},{"lineNumber":84,"author":{"gitId":"gerhean"},"content":"            .withStatus(Status.APPLIED).build();"},{"lineNumber":85,"author":{"gitId":"gerhean"},"content":"        InternshipApplication facebook2 \u003d new InternshipApplicationBuilder(facebook)"},{"lineNumber":86,"author":{"gitId":"gerhean"},"content":"            .withStatus(Status.OFFERED).build();"},{"lineNumber":87,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":88,"author":{"gitId":"gerhean"},"content":"        ArrayList\u003cInternshipApplication\u003e unsorted \u003d new ArrayList\u003c\u003e();"},{"lineNumber":89,"author":{"gitId":"gerhean"},"content":"        Collections.addAll(unsorted, google2, google1, facebook1, facebook2);"},{"lineNumber":90,"author":{"gitId":"gerhean"},"content":"        unsorted.sort(statusComparator);"},{"lineNumber":91,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":92,"author":{"gitId":"gerhean"},"content":"        ArrayList\u003cInternshipApplication\u003e sorted \u003d new ArrayList\u003c\u003e();"},{"lineNumber":93,"author":{"gitId":"gerhean"},"content":"        Collections.addAll(sorted, google1, facebook1, google2, facebook2);"},{"lineNumber":94,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":95,"author":{"gitId":"gerhean"},"content":"        assertEquals(sorted, unsorted);"},{"lineNumber":96,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":98,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":99,"author":{"gitId":"gerhean"},"content":"    public void toString_returnsPrefix() {"},{"lineNumber":100,"author":{"gitId":"gerhean"},"content":"        assertEquals(new StatusComparator().toString(), PREFIX_STATUS.getPrefix());"},{"lineNumber":101,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":102}},{"path":"src/test/java/seedu/diary/logic/parser/AddCommandParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.parser;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.COMPANY_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.COMPANY_DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.DATE_DESC_BOB;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.INVALID_COMPANY_DESC;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.INVALID_ROLE_DESC;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.INVALID_STATUS_DESC;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.PRIORITY_DESC_BOB;"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.ROLE_DESC_BOB;"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.STATUS_DESC_BOB;"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_COMPANY_BOB;"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_DATE_BOB;"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_ROLE_BOB;"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_STATUS_BOB;"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInternshipApplications.BOB;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.AddCommand;"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.ApplicationDate;"},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Company;"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Email;"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Phone;"},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Priority;"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Role;"},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.status.Status;"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipApplicationBuilder;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        InternshipApplication expectedInternshipApplication \u003d new InternshipApplicationBuilder(BOB).build();"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        //whitespace only preamble"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            new AddCommand(expectedInternshipApplication));"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // multiple companies - last company accepted"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, COMPANY_DESC_AMY + COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            new AddCommand(expectedInternshipApplication));"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, COMPANY_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            new AddCommand(expectedInternshipApplication));"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            new AddCommand(expectedInternshipApplication));"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"gerhean"},"content":"        // multiple addresses - last diary accepted"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            new AddCommand(expectedInternshipApplication));"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // Add new test cases for Role, Priority, Date, Status"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // zero tags"},{"lineNumber":85,"author":{"gitId":"gerhean"},"content":"        InternshipApplication expectedInternshipApplication;"},{"lineNumber":86,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":87,"author":{"gitId":"gerhean"},"content":"        // missing phone"},{"lineNumber":88,"author":{"gitId":"gerhean"},"content":"        expectedInternshipApplication \u003d new InternshipApplicationBuilder(BOB).withPhone(\"\").build();"},{"lineNumber":89,"author":{"gitId":"gerhean"},"content":"        assertParseSuccess(parser, COMPANY_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":90,"author":{"gitId":"gerhean"},"content":"                + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"},{"lineNumber":91,"author":{"gitId":"gerhean"},"content":"            new AddCommand(expectedInternshipApplication));"},{"lineNumber":92,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":93,"author":{"gitId":"gerhean"},"content":"        // missing email"},{"lineNumber":94,"author":{"gitId":"gerhean"},"content":"        expectedInternshipApplication \u003d new InternshipApplicationBuilder(BOB).withEmail(\"\").build();"},{"lineNumber":95,"author":{"gitId":"gerhean"},"content":"        assertParseSuccess(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":96,"author":{"gitId":"gerhean"},"content":"                + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            new AddCommand(expectedInternshipApplication));"},{"lineNumber":98,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":99,"author":{"gitId":"gerhean"},"content":"        // missing diary"},{"lineNumber":100,"author":{"gitId":"gerhean"},"content":"        expectedInternshipApplication \u003d new InternshipApplicationBuilder(BOB).withAddress(\"\").build();"},{"lineNumber":101,"author":{"gitId":"gerhean"},"content":"        assertParseSuccess(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":102,"author":{"gitId":"gerhean"},"content":"                + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"},{"lineNumber":103,"author":{"gitId":"gerhean"},"content":"            new AddCommand(expectedInternshipApplication));"},{"lineNumber":104,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":105,"author":{"gitId":"gerhean"},"content":"        // missing priority"},{"lineNumber":106,"author":{"gitId":"gerhean"},"content":"        expectedInternshipApplication \u003d new InternshipApplicationBuilder(BOB).withPriority(\"5\").build();"},{"lineNumber":107,"author":{"gitId":"gerhean"},"content":"        assertParseSuccess(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":108,"author":{"gitId":"gerhean"},"content":"                + ROLE_DESC_BOB + DATE_DESC_BOB + STATUS_DESC_BOB,"},{"lineNumber":109,"author":{"gitId":"gerhean"},"content":"            new AddCommand(expectedInternshipApplication));"},{"lineNumber":110,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // missing company prefix"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_COMPANY_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB, expectedMessage);"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // missing role prefix"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            + VALID_ROLE_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB, expectedMessage);"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // missing date prefix"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            + ROLE_DESC_BOB + VALID_DATE_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB, expectedMessage);"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // missing status prefix"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + VALID_STATUS_BOB, expectedMessage);"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        // all prefixes missing"},{"lineNumber":133,"author":{"gitId":"gerhean"},"content":"        assertParseFailure(parser, VALID_COMPANY_BOB + VALID_ROLE_BOB + VALID_DATE_BOB + VALID_STATUS_BOB,"},{"lineNumber":134,"author":{"gitId":"gerhean"},"content":"            expectedMessage);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // invalid company"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_COMPANY_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB, Company.MESSAGE_CONSTRAINTS);"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // invalid phone"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, COMPANY_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        // invalid email"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB, Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"gerhean"},"content":"        // no invalid diary"},{"lineNumber":152,"author":{"gitId":"gerhean"},"content":"        // assertParseFailure(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":153,"author":{"gitId":"gerhean"},"content":"        //         + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB, Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // invalid role"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            + INVALID_ROLE_DESC + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB, Role.MESSAGE_CONSTRAINTS);"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        // invalid date"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":161,"author":{"gitId":"-"},"content":"                + ROLE_DESC_BOB + INVALID_DATE_DESC + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"},{"lineNumber":162,"author":{"gitId":"gerhean"},"content":"            ApplicationDate.MESSAGE_CONSTRAINTS);"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        // invalid priority"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":166,"author":{"gitId":"-"},"content":"                + ROLE_DESC_BOB + DATE_DESC_BOB + INVALID_PRIORITY_DESC + STATUS_DESC_BOB,"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            Priority.MESSAGE_CONSTRAINTS);"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // invalid status"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + INVALID_STATUS_DESC, Status.MESSAGE_CONSTRAINTS);"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_COMPANY_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":175,"author":{"gitId":"gerhean"},"content":"                + VALID_ADDRESS_BOB + INVALID_ROLE_DESC + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            Company.MESSAGE_CONSTRAINTS);"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"        // non-empty preamble"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":180,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":75,"-":108}},{"path":"src/test/java/seedu/diary/logic/parser/ArgumentTokenizerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ArgumentTokenizerTest {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final Prefix pSlash \u003d new Prefix(\"p/\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final Prefix dashT \u003d new Prefix(\"-t\");"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final Prefix hatQ \u003d new Prefix(\"^Q\");"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void tokenize_emptyArgsString_noValues() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  \";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(expectedPreamble, argMultimap.getPreamble());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(argMultimap.getPreamble().isEmpty());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // Verify the last value is returned"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // Verify the number of values returned is as expected"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Verify all values returned are as expected and in order"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(argMultimap.getValue(prefix).isPresent());"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void tokenize_noPrefixes_allTakenAsPreamble() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // Same string expected as preamble, but leading/trailing spaces should be trimmed"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString.trim());"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void tokenize_oneArgument() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Preamble present"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  Some preamble string p/ Argument value \";"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Some preamble string\");"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // No preamble"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        argsString \u003d \" p/   Argument value \";"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArguments() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // Only two arguments are present"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // All three arguments are present"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Different Preamble String\");"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"111\");"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        /* Also covers: Reusing of the tokenizer multiple times */"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // (i.e. no stale values from the previous tokenizing remain)"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        argsString \u003d \"\";"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        /** Also covers: testing for prefixes not specified as a prefix **/"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Prefixes not previously given to the tokenizer should not return any values"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        argsString \u003d unknownPrefix + \"some value\";"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, unknownPrefix);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsWithRepeats() {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // Two arguments repeated, some have empty values"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsJoined() {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Prefix aaa \u003d new Prefix(\"aaa\");"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertEquals(aaa, aaa);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(aaa, new Prefix(\"aaa\"));"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, \"aaa\");"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, new Prefix(\"aab\"));"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":1,"-":149}},{"path":"src/test/java/seedu/diary/logic/parser/ClearCommandConfirmationParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.parser;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.ClearCommand;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"public class ClearCommandConfirmationParserTest {"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"    private final InternshipDiaryParser parser \u003d new ClearCommandConfirmationParser();"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"        assertTrue(parser.parseCommand("},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"            ClearCommandConfirmationParser.CONFIRMATION_COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"        assertTrue(parser.parseCommand("},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"            ClearCommandConfirmationParser.CONFIRMATION_COMMAND_WORD + \" \") instanceof ClearCommand);"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"        assertTrue(parser.parseCommand("},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"            ClearCommandConfirmationParser.CONFIRMATION_COMMAND_WORD.toUpperCase()) instanceof ClearCommand);"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"        assertThrows(ParseException.class, ClearCommandConfirmationParser.CANCEL_CLEAR_COMMAND, () -\u003e"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"            parser.parseCommand(ClearCommandConfirmationParser.CONFIRMATION_COMMAND_WORD + \" 3\"));"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"        assertThrows(ParseException.class, ClearCommandConfirmationParser.CANCEL_CLEAR_COMMAND, () -\u003e"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"            parser.parseCommand(\" \"));"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":32}},{"path":"src/test/java/seedu/diary/logic/parser/CommandParserTestUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.Command;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Contains helper methods for testing command parsers."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class CommandParserTestUtil {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * equals to {@code expectedCommand}."},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            Command command \u003d parser.parse(userInput);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommand, command);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * equals to {@code expectedMessage}."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            parser.parse(userInput);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"The expected ParseException was not thrown.\");"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            assertEquals(expectedMessage, pe.getMessage());"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":3,"-":35}},{"path":"src/test/java/seedu/diary/logic/parser/EditCommandParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.parser;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.COMPANY_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.DATE_DESC_AMY;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.INVALID_COMPANY_DESC;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.INVALID_ROLE_DESC;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.INVALID_STATUS_DESC;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.PRIORITY_DESC_AMY;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.ROLE_DESC_AMY;"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.STATUS_DESC_BOB;"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_COMPANY_AMY;"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_DATE_AMY;"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_PRIORITY_AMY;"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_ROLE_AMY;"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_STATUS_BOB;"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP_APPLICATION;"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_THIRD_INTERNSHIP_APPLICATION;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.index.Index;"},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.EditCommand;"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.EditCommand.EditInternshipDescriptor;"},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.ApplicationDate;"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Company;"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Email;"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Phone;"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Priority;"},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Role;"},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.status.Status;"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.EditInternshipDescriptorBuilder;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // no index specified"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_COMPANY_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // no field specified"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // no index and no field specified"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // negative index"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + COMPANY_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // zero index"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + COMPANY_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_COMPANY_DESC, Company.MESSAGE_CONSTRAINTS); // invalid name"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"},{"lineNumber":92,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ROLE_DESC, Role.MESSAGE_CONSTRAINTS); // invalid role"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PRIORITY_DESC,"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            Priority.MESSAGE_CONSTRAINTS); // invalid priority"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_STATUS_DESC, Status.MESSAGE_CONSTRAINTS); // invalid status"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC,"},{"lineNumber":98,"author":{"gitId":"gerhean"},"content":"            ApplicationDate.MESSAGE_CONSTRAINTS); // invalid date"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_COMPANY_DESC + INVALID_EMAIL_DESC"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            Company.MESSAGE_CONSTRAINTS);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_INTERNSHIP_APPLICATION;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + ROLE_DESC_AMY + PRIORITY_DESC_AMY"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + COMPANY_DESC_AMY + DATE_DESC_AMY + STATUS_DESC_BOB;"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        EditInternshipDescriptor descriptor \u003d new EditInternshipDescriptorBuilder().withCompany(VALID_COMPANY_AMY)"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            .withRole(VALID_ROLE_AMY).withPriority(VALID_PRIORITY_AMY).withStatus(VALID_STATUS_BOB)"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            .withApplicationDate(VALID_DATE_AMY).build();"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_INTERNSHIP_APPLICATION;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        EditCommand.EditInternshipDescriptor descriptor \u003d"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            new EditInternshipDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        // company"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_INTERNSHIP_APPLICATION;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + COMPANY_DESC_AMY;"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        EditInternshipDescriptor descriptor \u003d"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            new EditInternshipDescriptorBuilder().withCompany(VALID_COMPANY_AMY).build();"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"        // phone"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditInternshipDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // email"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditInternshipDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"gerhean"},"content":"        // diary"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditInternshipDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"        //Add new test cases for Role, Priority, Date, Status"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_INTERNSHIP_APPLICATION;"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB;"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"        EditCommand.EditInternshipDescriptor descriptor \u003d"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            new EditInternshipDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":180,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        // no other valid values specified"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_INTERNSHIP_APPLICATION;"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        EditInternshipDescriptor descriptor \u003d new EditInternshipDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"        // other valid values specified"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            + PHONE_DESC_BOB;"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditInternshipDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            .withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":51,"-":153}},{"path":"src/test/java/seedu/diary/logic/parser/FindCommandParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.FindCommand;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.AddressContainsKeywordsPredicate;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.ApplicationDateIsDatePredicate;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.CompanyContainsKeywordsPredicate;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.EmailContainsKeywordsPredicate;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.PhoneContainsNumbersPredicate;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.PriorityContainsNumbersPredicate;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.RoleContainsKeywordsPredicate;"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.StatusContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces on non preamble find"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            new FindCommand(List.of(new CompanyContainsKeywordsPredicate(Arrays.asList(\"Google\", \"Facebook\")),"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                new RoleContainsKeywordsPredicate(Arrays.asList(\"Software\", \"Engineer\")),"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                new AddressContainsKeywordsPredicate(Arrays.asList(\"Main\", \"Street\")),"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                new PhoneContainsNumbersPredicate(Arrays.asList(\"12345\")),"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                new EmailContainsKeywordsPredicate(Arrays.asList(\"Alice\")),"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                new ApplicationDateIsDatePredicate(LocalDate.of(2020, 02, 01)),"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                new PriorityContainsNumbersPredicate(Arrays.asList(\"5\")),"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                new StatusContainsKeywordsPredicate(Arrays.asList(\"Active\"))),"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                false);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \" c/Google Facebook r/Software Engineer a/Main Street p/12345 e/Alice \""},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"d/01 02 2020 w/5 s/Active\", expectedFindCommand);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords on non preamble find"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \" c/Google Facebook \\n \\t\\n r/Software Engineer     \""},{"lineNumber":50,"author":{"gitId":"-"},"content":"                + \"a/Main Street     \\t      \\n    p/12345  \\t  e/Alice d/01 02 2020 \\t w/5 \\n s/Active\","},{"lineNumber":51,"author":{"gitId":"-"},"content":"            expectedFindCommand);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces on preamble find"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        expectedFindCommand \u003d"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            new FindCommand(List.of(new CompanyContainsKeywordsPredicate(Arrays.asList(\"Google\")),"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                new RoleContainsKeywordsPredicate(Arrays.asList(\"Google\")),"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                new AddressContainsKeywordsPredicate(Arrays.asList(\"Google\")),"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                new PhoneContainsNumbersPredicate(Arrays.asList(\"Google\")),"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                new EmailContainsKeywordsPredicate(Arrays.asList(\"Google\")),"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                new PriorityContainsNumbersPredicate(Arrays.asList(\"Google\")),"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                new StatusContainsKeywordsPredicate(Arrays.asList(\"Google\"))),"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                true);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"Google c/Google Facebook r/Software Engineer a/Main Street p/12345 e/Alice \""},{"lineNumber":64,"author":{"gitId":"-"},"content":"            + \"d/01 02 2020 w/5 s/Active\", expectedFindCommand);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"Google\", expectedFindCommand);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords on preamble find"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"Google c/Google Facebook \\n \\t\\n r/Software Engineer     \""},{"lineNumber":70,"author":{"gitId":"-"},"content":"                + \"a/Main Street     \\t      \\n    p/12345  \\t  e/Alice d/01 02 2020 \\t w/5 \\n s/Active\","},{"lineNumber":71,"author":{"gitId":"-"},"content":"            expectedFindCommand);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"\\t  Google \\n\","},{"lineNumber":73,"author":{"gitId":"-"},"content":"            expectedFindCommand);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":13,"-":63}},{"path":"src/test/java/seedu/diary/logic/parser/InternshipDiaryParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERVIEW;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.commandexecutiontype.RemovalBasedCommandExecutionType;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.AddCommand;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.ArchivalCommand;"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.ArchiveCommand;"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.DeleteCommand;"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.EditCommand;"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.ExitCommand;"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.FindCommand;"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.HelpCommand;"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.InitClearCommand;"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.InterviewCommand;"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.ListCommand;"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.RemovalBasedCommand;"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.StatisticsCommand;"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.UnarchiveCommand;"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.interviewsubcommands.InterviewAddCommand;"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.interviewsubcommands.InterviewDeleteCommand;"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.interviewsubcommands.InterviewEditCommand;"},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.interviewsubcommands.InterviewListCommand;"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.exceptions.ParseException;"},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.interview.Interview;"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.AddressContainsKeywordsPredicate;"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.ApplicationDateIsDatePredicate;"},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.CompanyContainsKeywordsPredicate;"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.EmailContainsKeywordsPredicate;"},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.PhoneContainsNumbersPredicate;"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.PriorityContainsNumbersPredicate;"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.RoleContainsKeywordsPredicate;"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.StatusContainsKeywordsPredicate;"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.EditInternshipDescriptorBuilder;"},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.EditInterviewDescriptorBuilder;"},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipApplicationBuilder;"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipApplicationUtil;"},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InterviewBuilder;"},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InterviewUtil;"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"public class InternshipDiaryParserTest {"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private final InternshipDiaryParser parser \u003d new InternshipDiaryParser();"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        InternshipApplication internshipApplication \u003d new InternshipApplicationBuilder().build();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            .parseCommand(InternshipApplicationUtil.getAddCommand(internshipApplication));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(internshipApplication), command);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"gerhean"},"content":"    public void parseCommand_initClear() throws Exception {"},{"lineNumber":69,"author":{"gitId":"gerhean"},"content":"        assertTrue(parser.parseCommand(InitClearCommand.COMMAND_WORD) instanceof InitClearCommand);"},{"lineNumber":70,"author":{"gitId":"gerhean"},"content":"        assertTrue(parser.parseCommand(InitClearCommand.COMMAND_WORD + \" 3\") instanceof InitClearCommand);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        RemovalBasedCommand command \u003d (RemovalBasedCommand) parser.parseCommand("},{"lineNumber":76,"author":{"gitId":"-"},"content":"            DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased());"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertEquals("},{"lineNumber":78,"author":{"gitId":"-"},"content":"            new RemovalBasedCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, RemovalBasedCommandExecutionType.BY_INDEX,"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD),"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            command);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        InternshipApplication internshipApplication \u003d new InternshipApplicationBuilder().build();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        EditCommand.EditInternshipDescriptor descriptor \u003d"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            new EditInternshipDescriptorBuilder(internshipApplication).build();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":89,"author":{"gitId":"-"},"content":"            + INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" \""},{"lineNumber":90,"author":{"gitId":"-"},"content":"            + InternshipApplicationUtil.getEditInternshipApplicationDescriptorDetails(descriptor));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, descriptor), command);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"c/google\", \"r/engineer\", \"a/main\", \"p/12345\", \"e/alice\", \"d/01 02 2020\","},{"lineNumber":103,"author":{"gitId":"-"},"content":"            \"w/5\", \"s/Active\");"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":105,"author":{"gitId":"-"},"content":"            FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(List.of(new CompanyContainsKeywordsPredicate(Arrays.asList(\"google\")),"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            new RoleContainsKeywordsPredicate(Arrays.asList(\"engineer\")),"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            new AddressContainsKeywordsPredicate(Arrays.asList(\"main\")),"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            new PhoneContainsNumbersPredicate(Arrays.asList(\"12345\")),"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            new EmailContainsKeywordsPredicate(Arrays.asList(\"alice\")),"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            new ApplicationDateIsDatePredicate(LocalDate.of(2020, 02, 01)),"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            new PriorityContainsNumbersPredicate(Arrays.asList(\"5\")),"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            new StatusContainsKeywordsPredicate(Arrays.asList(\"Active\"))),"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            false), command);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void parseCommand_interview_list() throws Exception {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        InterviewListCommand command \u003d (InterviewListCommand) parser.parseCommand(InterviewCommand.COMMAND_WORD"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            + \" \" + INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" list\");"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertEquals(new InterviewListCommand(INDEX_FIRST_INTERNSHIP_APPLICATION), command);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public void parseCommand_interview_add() throws Exception {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        Interview interview \u003d new InterviewBuilder().build();"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        InterviewAddCommand command \u003d (InterviewAddCommand)"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            parser.parseCommand(InterviewUtil.getAddCommand(interview));"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, interview), command);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void parseCommand_interview_delete() throws Exception {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        InterviewDeleteCommand command \u003d (InterviewDeleteCommand) parser.parseCommand("},{"lineNumber":147,"author":{"gitId":"-"},"content":"            InterviewCommand.COMMAND_WORD + \" \" + INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased()"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                + \" delete \" + INDEX_FIRST_INTERVIEW.getOneBased());"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertEquals(new InterviewDeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, INDEX_FIRST_INTERVIEW), command);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    public void parseCommand_interview_edit() throws Exception {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        Interview interview \u003d new InterviewBuilder().build();"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        InterviewEditCommand.EditInterviewDescriptor descriptor \u003d"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            new EditInterviewDescriptorBuilder(interview).build();"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        InterviewEditCommand command \u003d (InterviewEditCommand) parser.parseCommand("},{"lineNumber":158,"author":{"gitId":"-"},"content":"            InterviewCommand.COMMAND_WORD + \" \""},{"lineNumber":159,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" edit \""},{"lineNumber":160,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_INTERVIEW.getOneBased()"},{"lineNumber":161,"author":{"gitId":"-"},"content":"                + \" \" + InterviewUtil.getEditInterviewApplicationDescriptorDetails(descriptor));"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertEquals(new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            INDEX_FIRST_INTERVIEW, descriptor), command);"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public void parseCommand_stats() throws Exception {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(StatisticsCommand.COMMAND_WORD) instanceof StatisticsCommand);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(StatisticsCommand.COMMAND_WORD + \" 3\") instanceof StatisticsCommand);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    public void parseCommand_archive() throws Exception {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        String input \u003d ArchiveCommand.COMMAND_WORD + \" \" + INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased();"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        RemovalBasedCommand command \u003d (RemovalBasedCommand) parser.parseCommand(input);"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertEquals("},{"lineNumber":177,"author":{"gitId":"-"},"content":"            new RemovalBasedCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, RemovalBasedCommandExecutionType.BY_INDEX,"},{"lineNumber":178,"author":{"gitId":"-"},"content":"                ArchiveCommand.COMMAND_WORD),"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            command);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    public void parseCommand_unarchive() throws Exception {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        String input \u003d UnarchiveCommand.COMMAND_WORD + \" \" + INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased();"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        RemovalBasedCommand command \u003d (RemovalBasedCommand) parser.parseCommand(input);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        assertEquals("},{"lineNumber":187,"author":{"gitId":"-"},"content":"            new RemovalBasedCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, RemovalBasedCommandExecutionType.BY_INDEX,"},{"lineNumber":188,"author":{"gitId":"-"},"content":"                UnarchiveCommand.COMMAND_WORD),"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            command);"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    public void parseCommand_archival() throws Exception {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ArchivalCommand.COMMAND_WORD) instanceof ArchivalCommand);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ArchivalCommand.COMMAND_WORD + \" 3\") instanceof ArchivalCommand);"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {"},{"lineNumber":200,"author":{"gitId":"gerhean"},"content":"        assertThrows(ParseException.class,"},{"lineNumber":201,"author":{"gitId":"gerhean"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), () -\u003e"},{"lineNumber":202,"author":{"gitId":"gerhean"},"content":"                parser.parseCommand(\"\"));"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":48,"-":161}},{"path":"src/test/java/seedu/diary/logic/parser/InterviewCommandParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.ADDRESS_DESC_NUS;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.ADDRESS_DESC_ONLINE;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.DATE_DESC_NUS;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.DATE_DESC_ONLINE;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.INVALID_BOOLEAN_DESC;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.ONLINE_DESC_NUS;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.ONLINE_DESC_ONLINE;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERVIEW;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInterviews.NUS;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInterviews.ONLINE;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.util.BooleanUtil;"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.InterviewCommand;"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.interviewsubcommands.InterviewAddCommand;"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.interviewsubcommands.InterviewDeleteCommand;"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.interviewsubcommands.InterviewEditCommand;"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.interviewsubcommands.InterviewListCommand;"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.ApplicationDate;"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.interview.Interview;"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InterviewBuilder;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class InterviewCommandParserTest {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Parser parser \u003d new InterviewCommandParser();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void parse_generalBadIndex_failure() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"a list\","},{"lineNumber":39,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void parse_generalBadPreamble_failure() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 list and more\","},{"lineNumber":45,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void parse_generalBadCommandCode_failure() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 notACode\","},{"lineNumber":51,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewCommand.MESSAGE_USAGE));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void parse_listAllFieldsPresent_success() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" list\","},{"lineNumber":57,"author":{"gitId":"-"},"content":"            new InterviewListCommand(INDEX_FIRST_INTERNSHIP_APPLICATION));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void parse_addAllFieldsPresent_success() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        Interview expectedInterview \u003d new InterviewBuilder(NUS).build();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        //with preamble white space"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""},{"lineNumber":65,"author":{"gitId":"-"},"content":"                + PREAMBLE_WHITESPACE + ADDRESS_DESC_NUS + ONLINE_DESC_NUS + DATE_DESC_NUS,"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, expectedInterview));"},{"lineNumber":67,"author":{"gitId":"gerhean"},"content":"        //multiple diary - last diary accepted"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""},{"lineNumber":69,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_ONLINE + ONLINE_DESC_NUS + DATE_DESC_NUS + ADDRESS_DESC_NUS,"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, expectedInterview));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        //multiple date - last date accepted"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""},{"lineNumber":73,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_NUS + DATE_DESC_ONLINE + ONLINE_DESC_NUS + DATE_DESC_NUS,"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, expectedInterview));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        //multiple isOnline - last isOnline accepted"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""},{"lineNumber":77,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_NUS + ONLINE_DESC_ONLINE + DATE_DESC_NUS + ONLINE_DESC_NUS,"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, expectedInterview));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void parse_addNotOnlineFieldsPresent_success() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Interview expectedInterview \u003d new InterviewBuilder(ONLINE).build();"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""},{"lineNumber":85,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_ONLINE + ONLINE_DESC_ONLINE + DATE_DESC_ONLINE,"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, expectedInterview));"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void parse_addCompulsoryFieldMissing_failure() {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewAddCommand.MESSAGE_USAGE);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        //missing isOnline"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""},{"lineNumber":94,"author":{"gitId":"-"},"content":"            + ADDRESS_DESC_NUS + DATE_DESC_NUS, expectedMessage);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        //missing date"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""},{"lineNumber":97,"author":{"gitId":"-"},"content":"            + ADDRESS_DESC_NUS + ONLINE_DESC_NUS, expectedMessage);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        //not online but missing address"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            InterviewAddCommand.MESSAGE_OFFLINE_INTERVIEW_ADDRESS);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""},{"lineNumber":102,"author":{"gitId":"-"},"content":"            + ONLINE_DESC_NUS + DATE_DESC_NUS, expectedMessage);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parse_addInvalidValue_failure() {"},{"lineNumber":107,"author":{"gitId":"gerhean"},"content":"        //invalid diary"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        //assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        //        + INVALID_ADDRESS_DESC + DATE_DESC_NUS + ONLINE_DESC_NUS, Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        //invalid date"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""},{"lineNumber":112,"author":{"gitId":"-"},"content":"            + ADDRESS_DESC_NUS + INVALID_DATE_DESC + ONLINE_DESC_NUS, ApplicationDate.MESSAGE_CONSTRAINTS);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        //invalid boolean"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""},{"lineNumber":115,"author":{"gitId":"-"},"content":"            + ADDRESS_DESC_NUS + DATE_DESC_NUS + INVALID_BOOLEAN_DESC, BooleanUtil.INVALID_BOOLEAN);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void parse_deleteBadPreamble_failure() {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" delete \","},{"lineNumber":121,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewDeleteCommand.MESSAGE_USAGE));"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public void parse_deleteValidArgs_success() {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" delete \""},{"lineNumber":127,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_INTERVIEW.getOneBased(),"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            new InterviewDeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, INDEX_FIRST_INTERVIEW));"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public void parse_deleteInvalidArgs_failure() {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" delete \""},{"lineNumber":134,"author":{"gitId":"-"},"content":"            + \"notValid\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewDeleteCommand.MESSAGE_USAGE));"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public void parse_editBadPreamble_failure() {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" edit \","},{"lineNumber":140,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewEditCommand.MESSAGE_USAGE));"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public void parse_editInvalidIndex_failure() {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" edit \""},{"lineNumber":146,"author":{"gitId":"-"},"content":"            + \"notValid\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewEditCommand.MESSAGE_USAGE));"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void parse_editNoEdits_failure() {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" edit \""},{"lineNumber":152,"author":{"gitId":"-"},"content":"            + INDEX_FIRST_INTERVIEW.getOneBased(), InterviewEditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public void parse_editInvalidValue_failure() {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        //invalid date"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" edit \""},{"lineNumber":159,"author":{"gitId":"-"},"content":"            + INDEX_FIRST_INTERVIEW.getOneBased() + \" \""},{"lineNumber":160,"author":{"gitId":"-"},"content":"            + ADDRESS_DESC_NUS + INVALID_DATE_DESC + ONLINE_DESC_NUS, ApplicationDate.MESSAGE_CONSTRAINTS);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        //invalid boolean"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" edit \""},{"lineNumber":163,"author":{"gitId":"-"},"content":"            + INDEX_FIRST_INTERVIEW.getOneBased() + \" \""},{"lineNumber":164,"author":{"gitId":"-"},"content":"            + ADDRESS_DESC_NUS + DATE_DESC_NUS + INVALID_BOOLEAN_DESC, BooleanUtil.INVALID_BOOLEAN);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":28,"-":138}},{"path":"src/test/java/seedu/diary/logic/parser/ParserUtilTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.interviewcode.InterviewCode;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Address;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.ApplicationDate;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Company;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Email;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Phone;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Priority;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Role;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.status.Status;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_COMPANY \u003d \"R@chel\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_ROLE \u003d \"R@chel\";"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"    private static final String INVALID_PHONE \u003d \"-651234\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_DATE \u003d \"010120\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_PRIORITY \u003d \"r\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String INVALID_STATUS \u003d \"status\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String INVALID_INTERVIEW_PREAMBLE_1String \u003d \"0\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String INVALID_INTERVIEW_PREAMBLE_4Strings \u003d \"this is four strings\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String INVALID_INTERVIEW_CODE \u003d \"invalid\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_COMPANY \u003d \"Google\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_ROLE \u003d \"Software Engineer\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final String VALID_DATE \u003d \"01 01 2020\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final String VALID_PRIORITY \u003d \"1\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final String VALID_STATUS \u003d \"Applied\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final String VALID_INTERVIEW_PREAMBLE \u003d \"1 add\";"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final String VALID_INTERVIEW_CODE \u003d \"add\";"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // No whitespaces"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_INTERNSHIP_APPLICATION, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_INTERNSHIP_APPLICATION, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parseCompany_null_throwsNullPointerException() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCompany((String) null));"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void parseCompany_invalidValue_throwsParseException() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCompany(INVALID_COMPANY));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void parseCompany_validValueWithoutWhitespace_returnsCompany() throws Exception {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Company expectedCompany \u003d new Company(VALID_COMPANY);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertEquals(expectedCompany, ParserUtil.parseCompany(VALID_COMPANY));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void parseCompany_validValueWithWhitespace_returnsTrimmedCompany() throws Exception {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String companyWithWhitespace \u003d WHITESPACE + VALID_COMPANY + WHITESPACE;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Company expectedCompany \u003d new Company(VALID_COMPANY);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertEquals(expectedCompany, ParserUtil.parseCompany(companyWithWhitespace));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void parseRole_null_throwsNullPointerException() {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRole((String) null));"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void parseRole_invalidValue_throwsParseException() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRole(INVALID_ROLE));"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void parseRole_validValueWithoutWhitespace_returnsRole() throws Exception {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Role expectedRole \u003d new Role(VALID_ROLE);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertEquals(expectedRole, ParserUtil.parseRole(VALID_ROLE));"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void parseRole_validValueWithWhitespace_returnsTrimmedRole() throws Exception {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String roleWithWhitespace \u003d WHITESPACE + VALID_ROLE + WHITESPACE;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Role expectedRole \u003d new Role(VALID_ROLE);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertEquals(expectedRole, ParserUtil.parseRole(roleWithWhitespace));"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"gerhean"},"content":"    // @Test"},{"lineNumber":142,"author":{"gitId":"gerhean"},"content":"    // public void parseAddress_invalidValue_throwsParseException() {"},{"lineNumber":143,"author":{"gitId":"gerhean"},"content":"    //     assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"},{"lineNumber":144,"author":{"gitId":"gerhean"},"content":"    // }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    public void parseApplicationDate_null_throwsNullPointerException() {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseApplicationDate((String) null));"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    public void parseApplicationDate_invalidValue_throwsParseException() {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseApplicationDate(INVALID_DATE));"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    public void parseApplicationDate_validValueWithoutWhitespace_returnsApplicationDate() throws Exception {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        ApplicationDate expectedApplicationDate \u003d new ApplicationDate(VALID_DATE);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        assertEquals(expectedApplicationDate, ParserUtil.parseApplicationDate(VALID_DATE));"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    public void parseApplicationDate_validValueWithWhitespace_returnsTrimmedApplicationDate() throws Exception {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        String dateWithWhitespace \u003d WHITESPACE + VALID_DATE + WHITESPACE;"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        ApplicationDate expectedApplicationDate \u003d new ApplicationDate(VALID_DATE);"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        assertEquals(expectedApplicationDate, ParserUtil.parseApplicationDate(dateWithWhitespace));"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    public void parseInterviewPreamble_null_throwsNullPointerException() {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseInterviewPreamble((String) null));"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    public void parseInterviewPreamble_validValueWithoutWhiteSpace_returnsStringArray() throws Exception {"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        String preamble \u003d VALID_INTERVIEW_PREAMBLE;"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        String[] expectedArray \u003d new String[]{\"1\", \"add\"};"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        String[] resultArray \u003d ParserUtil.parseInterviewPreamble(preamble);"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        assertEquals(expectedArray[0], resultArray[0]);"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        assertEquals(expectedArray[1], resultArray[1]);"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    public void parseInterviewPreamble_validValueWithWhiteSpace_returnsStringArray() throws Exception {"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        String preamble \u003d WHITESPACE + VALID_INTERVIEW_PREAMBLE + WHITESPACE;"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        String[] expectedArray \u003d new String[]{\"1\", \"add\"};"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        String[] resultArray \u003d ParserUtil.parseInterviewPreamble(preamble);"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        assertEquals(expectedArray[0], resultArray[0]);"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        assertEquals(expectedArray[1], resultArray[1]);"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    public void parseInterviewPreamble_invalidValueWithInsufficientStrings_throwsParseException() {"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            .parseInterviewPreamble(INVALID_INTERVIEW_PREAMBLE_1String));"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    public void parseInterviewPreamble_invalidValueWithExcessStrings_throwsParseException() {"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            .parseInterviewPreamble(INVALID_INTERVIEW_PREAMBLE_4Strings));"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    public void parseInterviewCode_null_throwsNullPointerException() {"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseInterviewCode((String) null));"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    public void parseInterviewCode_invalidValue_throwsParseException() {"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseInterviewCode(INVALID_INTERVIEW_CODE));"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    public void parseInterviewCode_validValueWithoutWhiteSpace_returnsInterviewCode() throws ParseException {"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        InterviewCode interviewCode \u003d InterviewCode.ADD;"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        assertEquals(interviewCode, ParserUtil.parseInterviewCode(VALID_INTERVIEW_CODE));"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    public void parseInterviewCode_validValueWithWhiteSpace_returnsInterviewCode() throws ParseException {"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        String codeWithWhitespace \u003d WHITESPACE + VALID_INTERVIEW_CODE + WHITESPACE;"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        InterviewCode interviewCode \u003d InterviewCode.ADD;"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        assertEquals(interviewCode, ParserUtil.parseInterviewCode(codeWithWhitespace));"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":263,"author":{"gitId":"-"},"content":""},{"lineNumber":264,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    public void parseStatus_null_throwsNullPointerException() {"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseStatus((String) null));"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    public void parseStatus_invalidValue_throwsParseException() {"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseStatus(INVALID_STATUS));"},{"lineNumber":272,"author":{"gitId":"gerhean"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseStatus(VALID_STATUS.substring(1)));"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    public void parseStatus_validValueWithoutWhiteSpace_returnsStatus() throws ParseException {"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        Status status \u003d Status.APPLIED;"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        assertEquals(status, ParserUtil.parseStatus(VALID_STATUS));"},{"lineNumber":279,"author":{"gitId":"gerhean"},"content":"        assertEquals(status, ParserUtil.parseStatus(VALID_STATUS.substring(0, 1)));"},{"lineNumber":280,"author":{"gitId":"gerhean"},"content":"        assertEquals(status, ParserUtil.parseStatus(VALID_STATUS.substring(0, 3)));"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":282,"author":{"gitId":"-"},"content":""},{"lineNumber":283,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    public void parseStatus_validValueWithWhiteSpace_returnsStatus() throws ParseException {"},{"lineNumber":285,"author":{"gitId":"-"},"content":"        String statusWithWhitespace \u003d WHITESPACE + VALID_STATUS + WHITESPACE;"},{"lineNumber":286,"author":{"gitId":"-"},"content":"        Status status \u003d Status.APPLIED;"},{"lineNumber":287,"author":{"gitId":"-"},"content":"        assertEquals(status, ParserUtil.parseStatus(statusWithWhitespace));"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":289,"author":{"gitId":"-"},"content":""},{"lineNumber":290,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    public void parsePriority_null_throwsNullPointerException() {"},{"lineNumber":292,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePriority((String) null));"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":294,"author":{"gitId":"-"},"content":""},{"lineNumber":295,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    public void parsePriority_invalidValue_throwsParseException() {"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePriority(INVALID_PRIORITY));"},{"lineNumber":298,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    public void parsePriority_validValueWithoutWhitespace_returnsPriority() throws Exception {"},{"lineNumber":302,"author":{"gitId":"-"},"content":"        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"},{"lineNumber":303,"author":{"gitId":"-"},"content":"        assertEquals(expectedPriority, ParserUtil.parsePriority(VALID_PRIORITY));"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    public void parsePriority_validValueWithWhitespace_returnsTrimmedPriority() throws Exception {"},{"lineNumber":308,"author":{"gitId":"-"},"content":"        String priorityWithWhitespace \u003d WHITESPACE + VALID_PRIORITY + WHITESPACE;"},{"lineNumber":309,"author":{"gitId":"-"},"content":"        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"},{"lineNumber":310,"author":{"gitId":"-"},"content":"        assertEquals(expectedPriority, ParserUtil.parsePriority(priorityWithWhitespace));"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":312,"author":{"gitId":"-"},"content":""},{"lineNumber":313,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    public void parseStatus_validValueWithoutWhitespace_returnsStatus() throws Exception {"},{"lineNumber":315,"author":{"gitId":"-"},"content":"        Status expectedStatus \u003d Status.APPLIED;"},{"lineNumber":316,"author":{"gitId":"-"},"content":"        assertEquals(expectedStatus, ParserUtil.parseStatus(VALID_STATUS));"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":318,"author":{"gitId":"-"},"content":""},{"lineNumber":319,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":320,"author":{"gitId":"-"},"content":"    public void parseStatus_validValueWithWhitespace_returnsTrimmedStatus() throws Exception {"},{"lineNumber":321,"author":{"gitId":"-"},"content":"        String statusWithWhitespace \u003d WHITESPACE + VALID_STATUS + WHITESPACE;"},{"lineNumber":322,"author":{"gitId":"-"},"content":"        Status expectedStatus \u003d Status.APPLIED;"},{"lineNumber":323,"author":{"gitId":"-"},"content":"        assertEquals(expectedStatus, ParserUtil.parseStatus(statusWithWhitespace));"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":325,"author":{"gitId":"-"},"content":""},{"lineNumber":326,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":22,"-":304}},{"path":"src/test/java/seedu/diary/logic/parser/RemovalBasedCommandExecutionTypeParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_LIST_FIRST_INTERNSHIP_APPLICATION;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP_APPLICATION;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.commandexecutiontype.RemovalBasedCommandExecutionType;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.DeleteCommand;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.RemovalBasedCommand;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.status.Status;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.PredicateUtil;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * outside of the RemovalBasedCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * same path through the RemovalBasedCommand, and therefore we test only one of them."},{"lineNumber":24,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":26,"author":{"gitId":"-"},"content":" *"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * We will only be testing integration with DeleteCommand. Archive and Unarchive command are similar"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * to delete command in nature and it is unnecessary to test those commands."},{"lineNumber":29,"author":{"gitId":"-"},"content":" */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class RemovalBasedCommandExecutionTypeParserTest {"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final String validFieldStatus \u003d PREFIX_STATUS.toString();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final String invalidFieldDate \u003d PREFIX_DATE.toString();"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    // Currently only this class requires such test inputs, should there be more in the future, we will"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    // create a TestUtil class that can contain all such typical test inputs"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private final String sampleDate \u003d \"20 12 2020\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private final String invalidIndex \u003d \" a\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private final String invalidIndices \u003d \"1, a, 3\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private final String commandWord \u003d DeleteCommand.COMMAND_WORD;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private final RemovalBasedCommandExecutionTypeParser parser \u003d"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        new RemovalBasedCommandExecutionTypeParser(commandWord);"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void parse_byIndexValidIndex_returnsRemovalBasedCommand() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        String validIndexInput \u003d Integer.toString(INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, validIndexInput,"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            new RemovalBasedCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, RemovalBasedCommandExecutionType.BY_INDEX,"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                commandWord)"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void parse_byIndexInvalidIndex_throwsParseException() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            RemovalBasedCommand.MESSAGE_USAGE_BY_INDEX.apply(commandWord));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, invalidIndex, expectedMessage);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void parse_byIndicesValidIndices_returnsRemovalBasedCommand() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String index1 \u003d Integer.toString(INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased());"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String index2 \u003d Integer.toString(INDEX_SECOND_INTERNSHIP_APPLICATION.getOneBased());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String validIndicesInput \u003d index1 + \", \" + index2;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, validIndicesInput,"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            new RemovalBasedCommand(INDEX_LIST_FIRST_INTERNSHIP_APPLICATION,"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                RemovalBasedCommandExecutionType.BY_INDICES,"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                commandWord)"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void parse_byIndicesInvalidIndices_throwsParseException() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            RemovalBasedCommand.MESSAGE_USAGE_BY_INDICES.apply(commandWord));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, invalidIndices, expectedMessage);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void parse_byFieldValidField_returnsRemovalBasedCommand() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String validCommand \u003d String.format(\"%s %s%s\", commandWord, validFieldStatus, Status.APPLIED);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, validCommand,"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            new RemovalBasedCommand(PredicateUtil.prepareStatusPredicate(Status.APPLIED.toString()),"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                RemovalBasedCommandExecutionType.BY_FIELD,"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                commandWord)"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parse_byFieldInvalidField_throwsParseException() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d String.format(\"%s %s%s\", commandWord, invalidFieldDate, sampleDate);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            RemovalBasedCommand.MESSAGE_USAGE_BY_FIELD.apply(commandWord));"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, invalidCommand, expectedMessage);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":12,"-":87}},{"path":"src/test/java/seedu/diary/logic/parser/SelectCommandParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.SelectCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * White-box testing for SelectCommandParser"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class SelectCommandParserTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private SelectCommandParser parser \u003d new SelectCommandParser();"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsSelectCommand() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_INTERNSHIP_APPLICATION));"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throws() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":6,"-":22}},{"path":"src/test/java/seedu/diary/logic/parser/SortCommandParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.logic.parser;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_COMPANY;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.SortCommand;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.comparator.ApplicationDateComparator;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.comparator.CompanyComparator;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.comparator.PriorityComparator;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.comparator.StatusComparator;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"public class SortCommandParserTest {"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"    private SortCommandParser parser \u003d new SortCommandParser();"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"        assertParseFailure(parser, \"     \","},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"    public void parse_invalidArg_throwsParseException() {"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"        // includes more than a single Prefix"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"        assertParseFailure(parser, \" \" + PREFIX_COMPANY.toString() + \" \" + PREFIX_DATE.toString(),"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"    public void parse_validArgs_returnsCorrectSortCommand() {"},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"        SortCommand expectedSortCommand \u003d new SortCommand(new CompanyComparator());"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"        assertParseSuccess(parser, \" \" + PREFIX_COMPANY.toString(), expectedSortCommand);"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"        expectedSortCommand \u003d new SortCommand(new ApplicationDateComparator());"},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"        assertParseSuccess(parser, \" \" + PREFIX_DATE.toString(), expectedSortCommand);"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"        expectedSortCommand \u003d new SortCommand(new PriorityComparator());"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"        assertParseSuccess(parser, \" \" + PREFIX_PRIORITY.toString(), expectedSortCommand);"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"        expectedSortCommand \u003d new SortCommand(new StatusComparator());"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"        assertParseSuccess(parser, \" \" + PREFIX_STATUS.toString(), expectedSortCommand);"},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"        expectedSortCommand \u003d new SortCommand(new CompanyComparator().reversed());"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":"        assertParseSuccess(parser, SortCommand.REVERSE_KEYWORD + \" \""},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":"            + PREFIX_COMPANY.toString(), expectedSortCommand);"},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":55,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":55}},{"path":"src/test/java/seedu/diary/model/InternshipDiaryTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInternshipApplications.GOOGLE;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.beans.PropertyChangeListener;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.beans.PropertyChangeSupport;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.exceptions.DuplicateInternshipApplicationException;"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.status.Status;"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipApplicationBuilder;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class InternshipDiaryTest {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final InternshipDiary internshipDiary \u003d new InternshipDiary();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), internshipDiary.getDisplayedInternshipList());"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e internshipDiary.resetData(null));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyInternshipDiary_replacesData() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        InternshipDiary newData \u003d getTypicalInternshipDiary();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        internshipDiary.resetData(newData);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertEquals(newData, internshipDiary);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicateInternship_throwsDuplicateInternshipException() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Two internship applications with the same identity fields"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        InternshipApplication editedGoogle \u003d new InternshipApplicationBuilder(GOOGLE)"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            .withAddress(\"1600 Amphitheatre Parkway\")"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            .build();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        List\u003cInternshipApplication\u003e newInternshipApplications \u003d Arrays.asList(GOOGLE, editedGoogle);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        InternshipDiaryStub newData \u003d new InternshipDiaryStub(newInternshipApplications);"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(DuplicateInternshipApplicationException.class, () -\u003e internshipDiary.resetData(newData));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void hasInternship_nullInternship_throwsNullPointerException() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e internshipDiary.hasInternship(null));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void hasInternship_internshipNotInInternshipDiary_returnsFalse() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(internshipDiary.hasInternship(GOOGLE));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void hasInternship_internshipInInternshipDiary_returnsTrue() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        internshipDiary.addInternshipApplication(GOOGLE);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertTrue(internshipDiary.hasInternship(GOOGLE));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void hasInternship_internshipApplicationWithSameIdentityFieldsInInternshipDiary_returnsTrue() {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        internshipDiary.addInternshipApplication(GOOGLE);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        InternshipApplication editedGoogle \u003d new InternshipApplicationBuilder(GOOGLE)"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            .withPriority(1)"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            .withStatus(Status.APPLIED)"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            .build();"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertTrue(internshipDiary.hasInternship(editedGoogle));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void getInternshipList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e internshipDiary.getDisplayedInternshipList().remove(0));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyInternshipDiary whose internship list can violate interface constraints."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    private static class InternshipDiaryStub implements ReadOnlyInternshipDiary {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cInternshipApplication\u003e internshipApplications \u003d"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            FXCollections.observableArrayList();"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        private final PropertyChangeSupport changes \u003d new PropertyChangeSupport(this);"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        InternshipDiaryStub(Collection\u003cInternshipApplication\u003e internshipApplications) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            this.internshipApplications.setAll(internshipApplications);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        public ObservableList\u003cInternshipApplication\u003e getDisplayedInternshipList() {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            return internshipApplications;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        public ObservableList\u003cInternshipApplication\u003e getAllInternshipList() {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            return internshipApplications;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        public void addPropertyChangeListener(ListenerPropertyType propertyType, PropertyChangeListener l) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            changes.addPropertyChangeListener(l);"},{"lineNumber":118,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":10,"-":111}},{"path":"src/test/java/seedu/diary/model/ModelManagerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertNull;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertSame;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.model.ListenerPropertyType.COMPARATOR;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.model.ListenerPropertyType.DISPLAYED_INTERNSHIP_DETAIL;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.model.ListenerPropertyType.FILTERED_INTERNSHIP_APPLICATIONS;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.model.ListenerPropertyType.PREDICATE;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.model.Model.PREDICATE_SHOW_ALL_INTERNSHIPS;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInternshipApplications.FACEBOOK;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInternshipApplications.GOOGLE;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import java.beans.PropertyChangeEvent;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import java.beans.PropertyChangeListener;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"import java.util.Collections;"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"import java.util.Comparator;"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"import java.util.function.Predicate;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.GuiSettings;"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.comparator.CompanyComparator;"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.AddressContainsKeywordsPredicate;"},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.CompanyContainsKeywordsPredicate;"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipApplicationBuilder;"},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipDiaryBuilder;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(new InternshipDiary(), new InternshipDiary(modelManager.getInternshipDiary()));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        userPrefs.setInternshipDiaryFilePath(Paths.get(\"internship-diary/file/path\"));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        userPrefs.setInternshipDiaryFilePath(Paths.get(\"internship-diary/file/path\"));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void setInternshipDiaryFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setInternshipDiaryFilePath(null));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void setInternshipDiaryFilePath_validPath_setsInternshipDiaryFilePath() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"internship-diary/file/path\");"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        modelManager.setInternshipDiaryFilePath(path);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getInternshipDiaryFilePath());"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void hasInternshipApplication_nullInternshipApplication_throwsNullPointerException() {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasInternshipApplication(null));"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void hasInternshipApplication_internshipApplicationNotInInternshipDiary_returnsFalse() {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasInternshipApplication(GOOGLE));"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void hasInternshipApplication_internshipApplicationInInternshipDiary_returnsTrue() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        modelManager.addInternshipApplication(GOOGLE);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasInternshipApplication(GOOGLE));"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void archiveInternshipApplication_internshipApplicationIsUnarchived_success() {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        modelManager.addInternshipApplication(GOOGLE);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        modelManager.archiveInternshipApplication(GOOGLE);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        modelManager.viewArchivedInternshipApplicationList();"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        InternshipApplication newArchivedGoogleApplication \u003d"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            modelManager.getInternshipDiary().getDisplayedInternshipList().get(0);"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertTrue(newArchivedGoogleApplication.isArchived());"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void unarchiveInternshipApplication_internshipApplicationIsArchived_success() {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        modelManager.addInternshipApplication(GOOGLE);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        modelManager.archiveInternshipApplication(GOOGLE);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        modelManager.viewArchivedInternshipApplicationList();"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        InternshipApplication newArchivedGoogleApplication \u003d"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            modelManager.getInternshipDiary().getDisplayedInternshipList().get(0);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        modelManager.unarchiveInternshipApplication(newArchivedGoogleApplication);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        modelManager.viewUnarchivedInternshipApplicationList();"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        InternshipApplication newUnarchivedGoogleApplication \u003d"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            modelManager.getInternshipDiary().getDisplayedInternshipList().get(0);"},{"lineNumber":132,"author":{"gitId":"gerhean"},"content":"        assertFalse(newUnarchivedGoogleApplication.isArchived());"},{"lineNumber":133,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":135,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":136,"author":{"gitId":"gerhean"},"content":"    public void addComparatorPropertyChangeListener_comparatorChanged_listenerCalled() {"},{"lineNumber":137,"author":{"gitId":"gerhean"},"content":"        class MockListener implements PropertyChangeListener {"},{"lineNumber":138,"author":{"gitId":"gerhean"},"content":"            private Comparator\u003cInternshipApplication\u003e comparator \u003d null;"},{"lineNumber":139,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":140,"author":{"gitId":"gerhean"},"content":"            @SuppressWarnings(\"unchecked\")"},{"lineNumber":141,"author":{"gitId":"gerhean"},"content":"            @Override"},{"lineNumber":142,"author":{"gitId":"gerhean"},"content":"            public void propertyChange(PropertyChangeEvent e) {"},{"lineNumber":143,"author":{"gitId":"gerhean"},"content":"                comparator \u003d (Comparator\u003cInternshipApplication\u003e) e.getNewValue();"},{"lineNumber":144,"author":{"gitId":"gerhean"},"content":"            }"},{"lineNumber":145,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":147,"author":{"gitId":"gerhean"},"content":"        MockListener mockListener \u003d new MockListener();"},{"lineNumber":148,"author":{"gitId":"gerhean"},"content":"        modelManager.addPropertyChangeListener(COMPARATOR, mockListener);"},{"lineNumber":149,"author":{"gitId":"gerhean"},"content":"        assertNull(mockListener.comparator);"},{"lineNumber":150,"author":{"gitId":"gerhean"},"content":"        Comparator\u003cInternshipApplication\u003e comparator1 \u003d new CompanyComparator();"},{"lineNumber":151,"author":{"gitId":"gerhean"},"content":"        modelManager.updateFilteredInternshipApplicationList(comparator1);"},{"lineNumber":152,"author":{"gitId":"gerhean"},"content":"        assertSame(comparator1, mockListener.comparator);"},{"lineNumber":153,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":154,"author":{"gitId":"gerhean"},"content":"        modelManager.viewArchivedInternshipApplicationList();"},{"lineNumber":155,"author":{"gitId":"gerhean"},"content":"        assertNull(mockListener.comparator);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":159,"author":{"gitId":"gerhean"},"content":"    public void addPredicatePropertyChangeListener_comparatorChanged_listenerCalled() {"},{"lineNumber":160,"author":{"gitId":"gerhean"},"content":"        class MockListener implements PropertyChangeListener {"},{"lineNumber":161,"author":{"gitId":"gerhean"},"content":"            private Predicate\u003cInternshipApplication\u003e predicate \u003d null;"},{"lineNumber":162,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":163,"author":{"gitId":"gerhean"},"content":"            @SuppressWarnings(\"unchecked\")"},{"lineNumber":164,"author":{"gitId":"gerhean"},"content":"            @Override"},{"lineNumber":165,"author":{"gitId":"gerhean"},"content":"            public void propertyChange(PropertyChangeEvent e) {"},{"lineNumber":166,"author":{"gitId":"gerhean"},"content":"                predicate \u003d (Predicate\u003cInternshipApplication\u003e) e.getNewValue();"},{"lineNumber":167,"author":{"gitId":"gerhean"},"content":"            }"},{"lineNumber":168,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":169,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":170,"author":{"gitId":"gerhean"},"content":"        MockListener mockListener \u003d new MockListener();"},{"lineNumber":171,"author":{"gitId":"gerhean"},"content":"        modelManager.addPropertyChangeListener(PREDICATE, mockListener);"},{"lineNumber":172,"author":{"gitId":"gerhean"},"content":"        assertNull(mockListener.predicate);"},{"lineNumber":173,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":174,"author":{"gitId":"gerhean"},"content":"        Predicate\u003cInternshipApplication\u003e addressPredicate \u003d"},{"lineNumber":175,"author":{"gitId":"gerhean"},"content":"            new AddressContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":176,"author":{"gitId":"gerhean"},"content":"        modelManager.updateFilteredInternshipApplicationList(addressPredicate);"},{"lineNumber":177,"author":{"gitId":"gerhean"},"content":"        assertSame(addressPredicate, mockListener.predicate);"},{"lineNumber":178,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":179,"author":{"gitId":"gerhean"},"content":"        modelManager.viewArchivedInternshipApplicationList();"},{"lineNumber":180,"author":{"gitId":"gerhean"},"content":"        assertNull(mockListener.predicate);"},{"lineNumber":181,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":183,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":184,"author":{"gitId":"gerhean"},"content":"    public void addDisplayedInternsipDetailPropertyChangeListener_listChanged_listenerCalled() {"},{"lineNumber":185,"author":{"gitId":"gerhean"},"content":"        InternshipApplication google \u003d GOOGLE;"},{"lineNumber":186,"author":{"gitId":"gerhean"},"content":"        InternshipApplication facebook \u003d FACEBOOK;"},{"lineNumber":187,"author":{"gitId":"gerhean"},"content":"        class MockListener implements PropertyChangeListener {"},{"lineNumber":188,"author":{"gitId":"gerhean"},"content":"            private InternshipApplication oldInternshipApplication \u003d null;"},{"lineNumber":189,"author":{"gitId":"gerhean"},"content":"            private InternshipApplication internshipApplication \u003d null;"},{"lineNumber":190,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":191,"author":{"gitId":"gerhean"},"content":"            @SuppressWarnings(\"unchecked\")"},{"lineNumber":192,"author":{"gitId":"gerhean"},"content":"            @Override"},{"lineNumber":193,"author":{"gitId":"gerhean"},"content":"            public void propertyChange(PropertyChangeEvent e) {"},{"lineNumber":194,"author":{"gitId":"gerhean"},"content":"                oldInternshipApplication \u003d (InternshipApplication) e.getOldValue();"},{"lineNumber":195,"author":{"gitId":"gerhean"},"content":"                internshipApplication \u003d (InternshipApplication) e.getNewValue();"},{"lineNumber":196,"author":{"gitId":"gerhean"},"content":"            }"},{"lineNumber":197,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":199,"author":{"gitId":"gerhean"},"content":"        MockListener mockListener \u003d new MockListener();"},{"lineNumber":200,"author":{"gitId":"gerhean"},"content":"        modelManager.addPropertyChangeListener(DISPLAYED_INTERNSHIP_DETAIL, mockListener);"},{"lineNumber":201,"author":{"gitId":"gerhean"},"content":"        assertNull(mockListener.internshipApplication);"},{"lineNumber":202,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":203,"author":{"gitId":"gerhean"},"content":"        modelManager.addInternshipApplication(google);"},{"lineNumber":204,"author":{"gitId":"gerhean"},"content":"        assertNull(mockListener.oldInternshipApplication);"},{"lineNumber":205,"author":{"gitId":"gerhean"},"content":"        assertSame(google, mockListener.internshipApplication);"},{"lineNumber":206,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":207,"author":{"gitId":"gerhean"},"content":"        modelManager.setInternshipApplication(google, facebook);"},{"lineNumber":208,"author":{"gitId":"gerhean"},"content":"        assertSame(google, mockListener.oldInternshipApplication);"},{"lineNumber":209,"author":{"gitId":"gerhean"},"content":"        assertSame(facebook, mockListener.internshipApplication);"},{"lineNumber":210,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":211,"author":{"gitId":"gerhean"},"content":"        modelManager.deleteInternshipApplication(facebook);"},{"lineNumber":212,"author":{"gitId":"gerhean"},"content":"        assertSame(facebook, mockListener.oldInternshipApplication);"},{"lineNumber":213,"author":{"gitId":"gerhean"},"content":"        assertNull(mockListener.internshipApplication);"},{"lineNumber":214,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":215,"author":{"gitId":"gerhean"},"content":"        modelManager.displayInternshipDetail(google);"},{"lineNumber":216,"author":{"gitId":"gerhean"},"content":"        assertNull(mockListener.oldInternshipApplication);"},{"lineNumber":217,"author":{"gitId":"gerhean"},"content":"        assertSame(google, mockListener.internshipApplication);"},{"lineNumber":218,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":219,"author":{"gitId":"gerhean"},"content":"        modelManager.viewArchivedInternshipApplicationList();"},{"lineNumber":220,"author":{"gitId":"gerhean"},"content":"        assertNull(mockListener.oldInternshipApplication);"},{"lineNumber":221,"author":{"gitId":"gerhean"},"content":"        assertNull(mockListener.internshipApplication);"},{"lineNumber":222,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":223,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    public void addFilteredInternshipApplicationsPropertyChangeListener_propertyChanged_listenerCalled() {"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        // create mock listener"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        class MockListener implements PropertyChangeListener {"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            private ObservableList\u003cInternshipApplication\u003e filteredInternshipApplications \u003d null;"},{"lineNumber":229,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"            @SuppressWarnings(\"unchecked\")"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            @Override"},{"lineNumber":232,"author":{"gitId":"-"},"content":"            public void propertyChange(PropertyChangeEvent e) {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"                filteredInternshipApplications \u003d (ObservableList\u003cInternshipApplication\u003e) e.getNewValue();"},{"lineNumber":234,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        MockListener mockListener \u003d new MockListener();"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        assertNull(mockListener.filteredInternshipApplications);"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"        // create mock diary and filtered list"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        InternshipDiary mockInternshipDiary \u003d new InternshipDiary();"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        mockInternshipDiary.loadInternshipApplication(new InternshipApplicationBuilder().build());"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        FilteredList\u003cInternshipApplication\u003e mockInternshipApplicationFilteredList \u003d"},{"lineNumber":243,"author":{"gitId":"-"},"content":"            new FilteredList\u003c\u003e(mockInternshipDiary.getDisplayedInternshipList());"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"        // add listener"},{"lineNumber":246,"author":{"gitId":"gerhean"},"content":"        modelManager.addPropertyChangeListener(FILTERED_INTERNSHIP_APPLICATIONS, mockListener);"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"        // create mock property change event"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        PropertyChangeEvent e \u003d new PropertyChangeEvent("},{"lineNumber":250,"author":{"gitId":"gerhean"},"content":"            mockInternshipDiary, FILTERED_INTERNSHIP_APPLICATIONS.toString(), null,"},{"lineNumber":251,"author":{"gitId":"gerhean"},"content":"            mockInternshipApplicationFilteredList"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        modelManager.propertyChange(e);"},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":"        assertSame(modelManager.getFilteredInternshipApplicationList(), mockListener.filteredInternshipApplications);"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    public void getFilteredInternshipApplicationList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e"},{"lineNumber":261,"author":{"gitId":"-"},"content":"            modelManager.getFilteredInternshipApplicationList().remove(0));"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":263,"author":{"gitId":"-"},"content":""},{"lineNumber":264,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        InternshipDiary diary \u003d new InternshipDiaryBuilder()"},{"lineNumber":267,"author":{"gitId":"-"},"content":"            .withInternshipApplication(GOOGLE)"},{"lineNumber":268,"author":{"gitId":"-"},"content":"            .withInternshipApplication(FACEBOOK)"},{"lineNumber":269,"author":{"gitId":"-"},"content":"            .build();"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        InternshipDiary differentDiary \u003d new InternshipDiary();"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(diary, userPrefs);"},{"lineNumber":275,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(diary, userPrefs);"},{"lineNumber":276,"author":{"gitId":"gerhean"},"content":"        assertEquals(modelManager, modelManagerCopy);"},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":279,"author":{"gitId":"gerhean"},"content":"        assertEquals(modelManager, modelManager);"},{"lineNumber":280,"author":{"gitId":"-"},"content":""},{"lineNumber":281,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":282,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(null, modelManager);"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":285,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(5, modelManager);"},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"gerhean"},"content":"        // different internshipDiary -\u003e returns false"},{"lineNumber":288,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(modelManager, new ModelManager(differentDiary, userPrefs));"},{"lineNumber":289,"author":{"gitId":"-"},"content":""},{"lineNumber":290,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":291,"author":{"gitId":"-"},"content":"        String[] keywords \u003d GOOGLE.getCompany().fullCompany.split(\"\\\\s+\");"},{"lineNumber":292,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredInternshipApplicationList("},{"lineNumber":293,"author":{"gitId":"-"},"content":"            new CompanyContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":294,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(modelManager, new ModelManager(diary, userPrefs));"},{"lineNumber":295,"author":{"gitId":"-"},"content":""},{"lineNumber":296,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredInternshipApplicationList(PREDICATE_SHOW_ALL_INTERNSHIPS);"},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false"},{"lineNumber":300,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":301,"author":{"gitId":"-"},"content":"        differentUserPrefs.setInternshipDiaryFilePath(Paths.get(\"differentFilePath\"));"},{"lineNumber":302,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(modelManager, new ModelManager(diary, differentUserPrefs));"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":304,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":127,"-":177}},{"path":"src/test/java/seedu/diary/model/UserPrefsTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void setInternshipDiaryFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setInternshipDiaryFilePath(null));"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":2,"-":19}},{"path":"src/test/java/seedu/diary/model/internship/AddressTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class AddressTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Address(null));"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"    // @Test"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"    // public void constructor_invalidAddress_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"    //     String invalidAddress \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"    //     assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"    // }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidAddress() {"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"        // null diary"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid addresses"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\"    \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // valid addresses"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"        assertTrue(Address.isValidAddress(\"\")); // no diary"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long diary"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":11,"-":26}},{"path":"src/test/java/seedu/diary/model/internship/ApplicationDateTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ApplicationDateTest {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        String nullStringApplicationDate \u003d null;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        LocalDate nullApplicationDate \u003d null;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new ApplicationDate(nullStringApplicationDate));"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new ApplicationDate(nullApplicationDate));"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"    public void constructor_invalidApplicationDate_throwsIllegalArgumentException() {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        String invalidApplicationDate \u003d \"\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new ApplicationDate(invalidApplicationDate));"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"    public void isValidApplicationDate() {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // null application date"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ApplicationDate.isValidApplicationDate(null));"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // invalid application date"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"        assertFalse(ApplicationDate.isValidApplicationDate(\"\")); // empty string"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"        assertFalse(ApplicationDate.isValidApplicationDate(\" \")); // spaces only"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"        assertFalse(ApplicationDate.isValidApplicationDate(\"^\")); // only non-alphanumeric characters"},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"        assertFalse(ApplicationDate.isValidApplicationDate(\"20^01-2020\")); // contains non-alphanumeric characters"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // valid application date"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"        assertTrue(ApplicationDate.isValidApplicationDate(\"01 01 2020\")); // first day of year"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertTrue(Company.isValidCompany(\"31 12 2020\")); // last day of year"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":9,"-":33}},{"path":"src/test/java/seedu/diary/model/internship/CompanyTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class CompanyTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Company(null));"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidCompany_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidCompany \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Company(invalidCompany));"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidCompany() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null company"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Company.isValidCompany(null));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid company"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Company.isValidCompany(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Company.isValidCompany(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Company.isValidCompany(\"^\")); // only non-alphanumeric characters"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Company.isValidCompany(\"A*Star\")); // contains non-alphanumeric characters"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // valid company"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Company.isValidCompany(\"bandai namco\")); // alphabets only"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Company.isValidCompany(\"12345\")); // numbers only"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Company.isValidCompany(\"3e accounting\")); // alphanumeric characters"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Company.isValidCompany(\"Koei Tecmo\")); // with capital letters"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Company.isValidCompany(\"Defence Science and Technology Agency\")); // long companys"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":2,"-":38}},{"path":"src/test/java/seedu/diary/model/internship/EmailTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class EmailTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Email(null));"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"    // @Test"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"    // public void constructor_invalidEmail_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"    //     String invalidEmail \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"    //     assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"    // }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidEmail() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null email"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // blank email"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // missing parts"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // invalid parts"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // valid email"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":"        assertTrue(Email.isValidEmail(\"\")); // means no email"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":8,"-":53}},{"path":"src/test/java/seedu/diary/model/internship/InternshipApplicationTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_COMPANY_BOB;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_PRIORITY_BOB;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_STATUS_BOB;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInternshipApplications.FACEBOOK;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInternshipApplications.GOOGLE;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.time.temporal.ChronoUnit;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipApplicationBuilder;"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InterviewBuilder;"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.TypicalInterviews;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class InternshipApplicationTest {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void setInterviews_nullList_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e FACEBOOK.setInterviews(null));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void isSameInternshipApplication() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(GOOGLE.isSameInternshipApplication(GOOGLE));"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(GOOGLE.isSameInternshipApplication(null));"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // different phone and email -\u003e returns false"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        InternshipApplication editedGoogle \u003d"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            new InternshipApplicationBuilder(GOOGLE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(GOOGLE.isSameInternshipApplication(editedGoogle));"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // different company -\u003e returns false"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        editedGoogle \u003d new InternshipApplicationBuilder(GOOGLE).withCompany(VALID_COMPANY_BOB).build();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(GOOGLE.isSameInternshipApplication(editedGoogle));"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // CHECK WITH THE TEAM IF WE ARE GOING FORWARD WITH THE CURRENT EQUALITY REQUIREMENTS"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different priority or status -\u003e returns true"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        editedGoogle \u003d new InternshipApplicationBuilder(GOOGLE)"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            .withPriority(VALID_PRIORITY_BOB)"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            .withStatus(VALID_STATUS_BOB)"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            .build();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertTrue(GOOGLE.isSameInternshipApplication(editedGoogle));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        InternshipApplication googleCopy \u003d new InternshipApplicationBuilder(GOOGLE).build();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(GOOGLE.equals(googleCopy));"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(GOOGLE.equals(GOOGLE));"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(GOOGLE.equals(null));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(GOOGLE.equals(5));"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // different company -\u003e returns false"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertFalse(GOOGLE.equals(FACEBOOK));"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // different company -\u003e returns false"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        InternshipApplication editedGoogle \u003d"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            new InternshipApplicationBuilder(GOOGLE).withCompany(VALID_COMPANY_BOB).build();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(GOOGLE.equals(editedGoogle));"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        editedGoogle \u003d new InternshipApplicationBuilder(GOOGLE).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertFalse(GOOGLE.equals(editedGoogle));"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        editedGoogle \u003d new InternshipApplicationBuilder(GOOGLE).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertFalse(GOOGLE.equals(editedGoogle));"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"gerhean"},"content":"        // different diary -\u003e returns false"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        editedGoogle \u003d new InternshipApplicationBuilder(GOOGLE).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertFalse(GOOGLE.equals(editedGoogle));"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void getEarliestInterview_noInterviewsInApplication_returnsEmptyOptional() {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        LocalDate date \u003d LocalDate.MIN;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        InternshipApplication internshipApplication \u003d new InternshipApplicationBuilder().build();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertTrue(internshipApplication.getEarliestInterview(date).isEmpty());"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void getEarliestInterview_allInterviewsExpired_returnsEmptyOptional() {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        LocalDate date \u003d LocalDate.MAX;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        InternshipApplication internshipApplication \u003d new InternshipApplicationBuilder()"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            .withInterview(new InterviewBuilder().build())"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            .withInterview(new InterviewBuilder(TypicalInterviews.CENTRAL_LIBRARY).build())"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            .buildWithInterviews();"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertTrue(internshipApplication.getEarliestInterview(date).isEmpty());"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void getEarliestInterview_someInterviewsExpired_returnsSmallestNonExpiredDate() {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        LocalDate maxDate \u003d LocalDate.MAX;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        InternshipApplication internshipApplication \u003d new InternshipApplicationBuilder()"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            .withInterview(new InterviewBuilder().build())"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            .withInterview(new InterviewBuilder(TypicalInterviews.CENTRAL_LIBRARY).build())"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            .withInterview(new InterviewBuilder().withDate(maxDate).build())"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            .buildWithInterviews();"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertTrue(internshipApplication.getEarliestInterview(maxDate).get().getInterviewDate().equals(maxDate));"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void getEarliestInterview_allInterviewsValid_returnsSmallestDate() {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        LocalDate minDate \u003d LocalDate.MIN;"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        InternshipApplication internshipApplication \u003d new InternshipApplicationBuilder()"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            .withInterview(new InterviewBuilder().build())"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            .withInterview(new InterviewBuilder(TypicalInterviews.CENTRAL_LIBRARY).build())"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            .withInterview(new InterviewBuilder().withDate(minDate).build())"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            .buildWithInterviews();"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertTrue(internshipApplication.getEarliestInterview(minDate).get().getInterviewDate().equals(minDate));"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void getEarliestApplicationOrInterviewDate_applicationDateExpiredInterviewDateValid_returnsInterviewDate() {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        LocalDate currentDate \u003d LocalDate.now();"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        LocalDate interviewDate \u003d currentDate.plus(2, ChronoUnit.DAYS);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        InternshipApplication internshipApplication \u003d new InternshipApplicationBuilder()"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            .withApplicationDate(\"20 12 2019\")"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            .withInterview(new InterviewBuilder().withDate(interviewDate).build())"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            .buildWithInterviews();"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        ApplicationDate earliestDate \u003d internshipApplication.getEarliestApplicationOrInterviewDate();"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertTrue(earliestDate.equals(new ApplicationDate(interviewDate)));"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    public void getEarliestApplicationOrInterviewDate_onlyInterviewDatesValid_returnsEarliestInterviewDate() {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        LocalDate currentDate \u003d LocalDate.now();"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        LocalDate interviewDate1 \u003d currentDate.plus(2, ChronoUnit.DAYS);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        LocalDate interviewDate2 \u003d currentDate.plus(5, ChronoUnit.DAYS);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        LocalDate interviewDate3 \u003d currentDate.plus(1, ChronoUnit.DAYS);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        InternshipApplication internshipApplication \u003d new InternshipApplicationBuilder()"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            .withApplicationDate(\"20 12 2019\")"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            .withInterview(new InterviewBuilder().withDate(interviewDate1).build())"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            .withInterview(new InterviewBuilder().withDate(interviewDate2).build())"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            .withInterview(new InterviewBuilder().withDate(interviewDate3).build())"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            .buildWithInterviews();"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        ApplicationDate earliestDate \u003d internshipApplication.getEarliestApplicationOrInterviewDate();"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertTrue(earliestDate.equals(new ApplicationDate(interviewDate3)));"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public void getEarliestApplicationOrInterviewDate_allDatesValid_returnsEarliestApplicationOrInterviewDate() {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        LocalDate currentDate \u003d LocalDate.now();"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        LocalDate interviewDate1 \u003d currentDate.plus(7, ChronoUnit.DAYS);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        InternshipApplication internshipApplication \u003d new InternshipApplicationBuilder()"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            .withApplicationDate(new ApplicationDate(currentDate))"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            .withInterview(new InterviewBuilder().withDate(interviewDate1).build())"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            .buildWithInterviews();"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        ApplicationDate earliestDate \u003d internshipApplication.getEarliestApplicationOrInterviewDate();"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        assertTrue(earliestDate.equals(new ApplicationDate(currentDate)));"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":13,"-":164}},{"path":"src/test/java/seedu/diary/model/internship/PhoneTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class PhoneTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"    // @Test"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"    // public void constructor_invalidPhone_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"    //     String invalidPhone \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"    //     assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"    // }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidPhone() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null phone number"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid phone numbers"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // valid phone numbers"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"        assertTrue(Phone.isValidPhone(\"\")); // Denotes no phone"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":8,"-":32}},{"path":"src/test/java/seedu/diary/model/internship/PriorityTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class PriorityTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Priority(null));"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidPriority_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidPriority \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(invalidPriority));"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidPriority() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // invalid priority"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertFalse(Priority.isValidPriority(\"\")); // empty string"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertFalse(Priority.isValidPriority(\" \")); // spaces only"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(Priority.isValidPriority(\"91\")); // more than 10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Priority.isValidPriority(\"-1\")); // less than 0"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Priority.isValidPriority(\"1p0\")); // alphabets within digits"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Priority.isValidPriority(\"1 0\")); // spaces within digits"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Priority.isValidPriority(91)); // more than 10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Priority.isValidPriority(-1)); // less than 0"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // valid priority"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Priority.isValidPriority(\"0\")); // lowest"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Priority.isValidPriority(\"5\")); // middle"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Priority.isValidPriority(\"10\")); // largest"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Priority.isValidPriority(0)); // lowest"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertTrue(Priority.isValidPriority(5)); // middle"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertTrue(Priority.isValidPriority(10)); // largest"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":2,"-":40}},{"path":"src/test/java/seedu/diary/model/internship/RoleTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class RoleTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Role(null));"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidRole_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidRole \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Role(invalidRole));"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidRole() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null role"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Role.isValidRole(null));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid role"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Role.isValidRole(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Role.isValidRole(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Role.isValidRole(\"^\")); // only non-alphanumeric characters"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Role.isValidRole(\"cleaner*\")); // contains non-alphanumeric characters"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // valid role"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Role.isValidRole(\"data scientist\")); // alphabets only"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Role.isValidRole(\"12345\")); // numbers only"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Role.isValidRole(\"3d artist\")); // alphanumeric characters"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Role.isValidRole(\"Software Engineer\")); // with capital letters"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Role.isValidRole(\"3D Open Environment and Backdrop Artist\")); // long roles"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":2,"-":38}},{"path":"src/test/java/seedu/diary/model/internship/interview/InterviewTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship.interview;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_DATE_AMY;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInterviews.CENTRAL_LIBRARY;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInterviews.ONLINE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InterviewBuilder;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Tests integration between OfflineInterview and OnlineInterview."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class InterviewTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void createInterview_invalidArgs_throwsNullPointerException() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        Interview interview \u003d CENTRAL_LIBRARY;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        // Null date"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Interview.createInterview(false, null,"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            interview.getInterviewAddress()));"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // Null address"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Interview.createInterview(false,"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            interview.getDate(), null));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void createOnlineInterview_validArgs_success() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        Interview interview \u003d ONLINE;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Interview onlineInterview \u003d Interview.createOnlineInterview(interview.getDate());"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(ONLINE.equals(onlineInterview));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Interview clbCopy \u003d new InterviewBuilder(CENTRAL_LIBRARY).build();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertTrue(CENTRAL_LIBRARY.equals(clbCopy));"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(CENTRAL_LIBRARY.equals(CENTRAL_LIBRARY));"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(CENTRAL_LIBRARY.equals(null));"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(CENTRAL_LIBRARY.equals(5));"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different isOnline -\u003e returns false"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(CENTRAL_LIBRARY.equals(ONLINE));"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":"        // different diary -\u003e returns false"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Interview editedClb \u003d new InterviewBuilder(CENTRAL_LIBRARY).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertFalse(CENTRAL_LIBRARY.equals(editedClb));"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // different date -\u003e returns false"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        editedClb \u003d new InterviewBuilder(CENTRAL_LIBRARY).withDate(VALID_DATE_AMY).build();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertFalse(CENTRAL_LIBRARY.equals(editedClb));"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // different isOnline -\u003e returns false"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        editedClb \u003d new InterviewBuilder(CENTRAL_LIBRARY).withIsOnline(true).build();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertFalse(CENTRAL_LIBRARY.equals(editedClb));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":7,"-":62}},{"path":"src/test/java/seedu/diary/model/internship/predicate/AddressContainsKeywordsPredicateTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship.predicate;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipApplicationBuilder;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class AddressContainsKeywordsPredicateTest {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        AddressContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            new AddressContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        AddressContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            new AddressContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        AddressContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            new AddressContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"        assertEquals(firstPredicate, firstPredicateCopy);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(1, firstPredicate);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(null, firstPredicate);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different keywords -\u003e returns false"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(firstPredicate, secondPredicate);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void test_addressContainsKeywords_returnsTrue() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // One keyword"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        AddressContainsKeywordsPredicate predicate \u003d"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            new AddressContainsKeywordsPredicate(Collections.singletonList(\"Clementi\"));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withAddress(\"Clementi\").build()));"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // Multiple keywords"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"Main\", \"Street\"));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withAddress(\"Main Street\").build()));"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // Only one matching keyword"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"Main\", \"Avenue\"));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withAddress(\"Main Road\").build()));"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"mAiN\", \"sTrEeT\"));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withAddress(\"Main Street\").build()));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void test_addressDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Zero keywords"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        AddressContainsKeywordsPredicate predicate \u003d new AddressContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertFalse(predicate"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            .test(new InternshipApplicationBuilder().withAddress(\"Blk 456, Den Road, #01-355\").build()));"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // Non-matching keyword"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"Clementi\"));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertFalse(predicate"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            .test(new InternshipApplicationBuilder().withAddress(\"Blk 456, Den Road, #01-355\").build()));"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"gerhean"},"content":"        // Keywords match company, role, phone, email, priority and status, but does not match diary"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"Google\", \"Software\","},{"lineNumber":80,"author":{"gitId":"-"},"content":"            \"Engineer\", \"12345\", \"alice@email.com\", \"1\", \"APPLIED\"));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google\")"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            .withRole(\"Software Engineer\").withPhone(\"12345\")"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withPriority(\"1\")"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            .withStatus(\"APPLIED\").build()));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void isNull_nullKeywords_returnsTrue() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        AddressContainsKeywordsPredicate predicate \u003d new AddressContainsKeywordsPredicate(null);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(predicate.isNull());"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void isNull_nonNullKeywords_returnsFalse() {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        AddressContainsKeywordsPredicate predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"Main\"));"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertFalse(predicate.isNull());"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":9,"-":89}},{"path":"src/test/java/seedu/diary/model/internship/predicate/ApplicationDateDuePredicateTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship.predicate;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.time.temporal.ChronoUnit;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.ApplicationDate;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipApplicationBuilder;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"class ApplicationDateDuePredicateTest {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        ApplicationDateDuePredicate applicationDateDuePredicate \u003d new ApplicationDateDuePredicate();"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"        assertEquals(applicationDateDuePredicate, applicationDateDuePredicate);"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(1, applicationDateDuePredicate);"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(null, applicationDateDuePredicate);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void test_futureApplicationDateIsWithin7Days_returnsTrue() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        ApplicationDateDuePredicate predicate \u003d new ApplicationDateDuePredicate();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // application date is same as current date"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        LocalDate currentDate \u003d LocalDate.now();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        ApplicationDate newDate \u003d new ApplicationDate(currentDate);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withApplicationDate(newDate).build()));"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // application date is within 7 days from current date"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        LocalDate laterDate \u003d LocalDate.now().plus(4, ChronoUnit.DAYS);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        newDate \u003d new ApplicationDate(laterDate.format(DateTimeFormatter.ofPattern(\"dd MM YYYY\")));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withApplicationDate(newDate).build()));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        LocalDate sevenDaysFromCurrentDate \u003d LocalDate.now().plus(7, ChronoUnit.DAYS);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        newDate \u003d new ApplicationDate(sevenDaysFromCurrentDate.format(DateTimeFormatter.ofPattern(\"dd MM YYYY\")));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withApplicationDate(newDate).build()));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void test_applicationDateHasAlreadyPassed_returnsFalse() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        ApplicationDateDuePredicate predicate \u003d new ApplicationDateDuePredicate();"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // application date is before current date"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        LocalDate pastDate \u003d LocalDate.now().minus(4, ChronoUnit.DAYS);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        ApplicationDate newDate \u003d new ApplicationDate(pastDate.format(DateTimeFormatter.ofPattern(\"dd MM YYYY\")));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withApplicationDate(newDate).build()));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        LocalDate sevenDaysBeforeCurrent \u003d LocalDate.now().minus(7, ChronoUnit.DAYS);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        newDate \u003d new ApplicationDate(sevenDaysBeforeCurrent.format(DateTimeFormatter.ofPattern(\"dd MM YYYY\")));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withApplicationDate(newDate).build()));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        LocalDate moreThanOneWeekBeforeCurrent \u003d LocalDate.now().minus(12, ChronoUnit.DAYS);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        newDate \u003d new ApplicationDate(moreThanOneWeekBeforeCurrent.format(DateTimeFormatter.ofPattern(\"dd MM YYYY\")));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withApplicationDate(newDate).build()));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void test_futureApplicationDateIsNotWithin7Days_returnsFalse() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ApplicationDateDuePredicate predicate \u003d new ApplicationDateDuePredicate();"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // application date is more than 7 days past current date"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        LocalDate laterDate \u003d LocalDate.now().plus(10, ChronoUnit.DAYS);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        ApplicationDate newDate \u003d new ApplicationDate(laterDate.format(DateTimeFormatter.ofPattern(\"dd MM YYYY\")));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withApplicationDate(newDate).build()));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":8,"-":67}},{"path":"src/test/java/seedu/diary/model/internship/predicate/ApplicationDateIsDatePredicateTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship.predicate;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipApplicationBuilder;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ApplicationDateIsDatePredicateTest {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        LocalDate firstPredicateDate \u003d LocalDate.of(2020, 02, 01);"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        LocalDate secondPredicateDate \u003d LocalDate.of(2021, 03, 02);"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"        ApplicationDateIsDatePredicate firstPredicate \u003d"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            new ApplicationDateIsDatePredicate(firstPredicateDate);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        ApplicationDateIsDatePredicate secondPredicate \u003d"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            new ApplicationDateIsDatePredicate(secondPredicateDate);"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        ApplicationDateIsDatePredicate firstPredicateCopy \u003d"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            new ApplicationDateIsDatePredicate(firstPredicateDate);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(null, firstPredicate);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // different dates -\u003e returns false"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void test_applicationDateContainsNumbers_returnsTrue() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        ApplicationDateIsDatePredicate predicate \u003d"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            new ApplicationDateIsDatePredicate(LocalDate.of(2020, 02, 01));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withApplicationDate(\"01 02 2020\").build()));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void test_applicationDateDoesNotContainNumbers_returnsFalse() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // Non-matching date"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        ApplicationDateIsDatePredicate predicate \u003d new ApplicationDateIsDatePredicate(LocalDate.of(2020, 02, 01));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withApplicationDate(\"02 02 2020\").build()));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void isNull_nullDate_returnsTrue() {"},{"lineNumber":59,"author":{"gitId":"gerhean"},"content":"        ApplicationDateIsDatePredicate predicate \u003d new ApplicationDateIsDatePredicate((LocalDate) null);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(predicate.isNull());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void isNull_nonNullDate_returnsFalse() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        ApplicationDateIsDatePredicate predicate \u003d new ApplicationDateIsDatePredicate(LocalDate.of(2020, 02, 01));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertFalse(predicate.isNull());"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":5,"-":63}},{"path":"src/test/java/seedu/diary/model/internship/predicate/CompanyContainsKeywordsPredicateTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship.predicate;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipApplicationBuilder;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class CompanyContainsKeywordsPredicateTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        CompanyContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            new CompanyContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        CompanyContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            new CompanyContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        CompanyContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            new CompanyContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(null, firstPredicate);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // different keywords -\u003e returns false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void test_companyContainsKeywords_returnsTrue() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // One keyword"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        CompanyContainsKeywordsPredicate predicate \u003d"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            new CompanyContainsKeywordsPredicate(Collections.singletonList(\"Google\"));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google\").build()));"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // Multiple keywords"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        predicate \u003d new CompanyContainsKeywordsPredicate(Arrays.asList(\"Google\", \"Facebook\"));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google Facebook\").build()));"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // Only one matching keyword"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        predicate \u003d new CompanyContainsKeywordsPredicate(Arrays.asList(\"Google\", \"Facebook\"));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google Apple\").build()));"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        predicate \u003d new CompanyContainsKeywordsPredicate(Arrays.asList(\"gOoGlE\", \"FaCeBoOk\"));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google Facebook\").build()));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void test_companyDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Zero keywords"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        CompanyContainsKeywordsPredicate predicate \u003d new CompanyContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google\").build()));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // Non-matching keyword"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        predicate \u003d new CompanyContainsKeywordsPredicate(Arrays.asList(\"Google\"));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withCompany(\"Apple Facebook\").build()));"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"gerhean"},"content":"        // Keywords match role, phone, email, diary, priority and status, but does not match company"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        predicate \u003d new CompanyContainsKeywordsPredicate(Arrays.asList(\"Software\", \"Engineer\", \"12345\","},{"lineNumber":77,"author":{"gitId":"-"},"content":"            \"alice@email.com\", \"Main\", \"Street\", \"1\", \"APPLIED\"));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google\")"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            .withRole(\"Software Engineer\").withPhone(\"12345\")"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withPriority(\"1\")"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            .withStatus(\"APPLIED\").build()));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void isNull_nullKeywords_returnsTrue() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        CompanyContainsKeywordsPredicate predicate \u003d new CompanyContainsKeywordsPredicate(null);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(predicate.isNull());"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void isNull_nonNullKeywords_returnsFalse() {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        CompanyContainsKeywordsPredicate predicate \u003d new CompanyContainsKeywordsPredicate(Arrays.asList(\"Google\"));"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertFalse(predicate.isNull());"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":5,"-":90}},{"path":"src/test/java/seedu/diary/model/internship/predicate/CustomToStringPredicateTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship.predicate;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import java.util.Collections;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"public class CustomToStringPredicateTest {"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"    public void equals() {"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"        String str1 \u003d \"a\";"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"        String str2 \u003d \"b\";"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"        AddressContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"            new AddressContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"        AddressContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"            new AddressContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"        CustomToStringPredicate\u003cInternshipApplication\u003e firstPredicateWrap \u003d"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"            new CustomToStringPredicate\u003c\u003e(firstPredicate, str1);"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"        CustomToStringPredicate\u003cInternshipApplication\u003e secondPredicateWrap \u003d"},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"            new CustomToStringPredicate\u003c\u003e(secondPredicate, str1);"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"        CustomToStringPredicate\u003cInternshipApplication\u003e thirdPredicateWrap \u003d"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"            new CustomToStringPredicate\u003c\u003e(firstPredicate, str2);"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"        // same object -\u003e returns true"},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"        assertEquals(firstPredicateWrap, firstPredicateWrap);"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"        // same values -\u003e returns true"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"        CustomToStringPredicate\u003cInternshipApplication\u003e firstPredicateWrapCopy \u003d"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"            new CustomToStringPredicate\u003c\u003e(new AddressContainsKeywordsPredicate(firstPredicateKeywordList), str1);"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"        assertEquals(firstPredicateWrap, firstPredicateWrapCopy);"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"        // different types -\u003e returns false"},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(1, firstPredicateWrap);"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":"        // null -\u003e returns false"},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(null, firstPredicateWrap);"},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":55,"author":{"gitId":"gerhean"},"content":"        // different internal predicate -\u003e returns false"},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(firstPredicateWrap, secondPredicateWrap);"},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":58,"author":{"gitId":"gerhean"},"content":"        // different internal string -\u003e returns false"},{"lineNumber":59,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(firstPredicateWrap, thirdPredicateWrap);"},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":62,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"gerhean"},"content":"    public void test_internalPredicateAndStringIsSame() {"},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":"        Object someObject \u003d \"a\";"},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":"        String someString \u003d \"b\";"},{"lineNumber":66,"author":{"gitId":"gerhean"},"content":"        class MockPredicate implements Predicate\u003cObject\u003e {"},{"lineNumber":67,"author":{"gitId":"gerhean"},"content":"            @Override"},{"lineNumber":68,"author":{"gitId":"gerhean"},"content":"            public boolean test(Object o) {"},{"lineNumber":69,"author":{"gitId":"gerhean"},"content":"                return o.equals(someObject);"},{"lineNumber":70,"author":{"gitId":"gerhean"},"content":"            }"},{"lineNumber":71,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":73,"author":{"gitId":"gerhean"},"content":"        CustomToStringPredicate\u003cObject\u003e customToStringPredicate \u003d"},{"lineNumber":74,"author":{"gitId":"gerhean"},"content":"            new CustomToStringPredicate\u003c\u003e(new MockPredicate(), someString);"},{"lineNumber":75,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":76,"author":{"gitId":"gerhean"},"content":"        assertTrue(customToStringPredicate.test(someObject));"},{"lineNumber":77,"author":{"gitId":"gerhean"},"content":"        assertFalse(customToStringPredicate.test(someString));"},{"lineNumber":78,"author":{"gitId":"gerhean"},"content":"        assertEquals(customToStringPredicate.toString(), someString);"},{"lineNumber":79,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":80}},{"path":"src/test/java/seedu/diary/model/internship/predicate/EmailContainsKeywordsPredicateTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship.predicate;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipApplicationBuilder;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class EmailContainsKeywordsPredicateTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        EmailContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            new EmailContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        EmailContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            new EmailContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        EmailContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            new EmailContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(null, firstPredicate);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // different keywords -\u003e returns false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void test_emailContainsKeywords_returnsTrue() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Full email"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        EmailContainsKeywordsPredicate predicate \u003d"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            new EmailContainsKeywordsPredicate(Collections.singletonList(\"alice@example.com\"));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withEmail(\"alice@example.com\").build()));"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // One keyword"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        predicate \u003d new EmailContainsKeywordsPredicate(Collections.singletonList(\"alice@\"));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withEmail(\"alice@example.com\").build()));"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // Multiple keywords"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"bob\", \"example\"));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withEmail(\"bob@example.com\").build()));"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // Only one matching keyword"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"alice\", \"hello\"));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withEmail(\"alice@example.com\").build()));"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"aLiCe\", \"eXaMpLe\"));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withEmail(\"alice@example.com\").build()));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void test_emailDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // Zero keywords"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        EmailContainsKeywordsPredicate predicate \u003d new EmailContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withEmail(\"alice@example.com\").build()));"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // Non-matching keyword"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"bob\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withEmail(\"alice@example.com\").build()));"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"gerhean"},"content":"        // Keywords match company, role, phone, diary, priority and status, but does not match email"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"Google\", \"Software\", \"Engineer\", \"12345\", \"Main\","},{"lineNumber":81,"author":{"gitId":"-"},"content":"            \"Street\", \"1\", \"APPLIED\"));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google\")"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            .withRole(\"Software Engineer\").withPhone(\"12345\")"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withPriority(\"1\")"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            .withStatus(\"APPLIED\").build()));"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void isNull_nullKeywords_returnsTrue() {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        EmailContainsKeywordsPredicate predicate \u003d new EmailContainsKeywordsPredicate(null);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertTrue(predicate.isNull());"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void isNull_nonNullKeywords_returnsFalse() {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        EmailContainsKeywordsPredicate predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"alice\"));"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertFalse(predicate.isNull());"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":5,"-":94}},{"path":"src/test/java/seedu/diary/model/internship/predicate/InterviewDateDuePredicateTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship.predicate;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.time.temporal.ChronoUnit;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Address;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.ApplicationDate;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.interview.Interview;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipApplicationBuilder;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"class InterviewDateDuePredicateTest {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        InterviewDateDuePredicate interviewDateDuePredicate \u003d new InterviewDateDuePredicate();"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertTrue(interviewDateDuePredicate.equals(interviewDateDuePredicate));"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertFalse(interviewDateDuePredicate.equals(1));"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(null, interviewDateDuePredicate);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void test_futureInterviewDateIsWithin7Days_returnsTrue() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        InterviewDateDuePredicate predicate \u003d new InterviewDateDuePredicate();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // interview date is same as current date"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        InternshipApplicationBuilder internshipApplicationTestCurrent \u003d new InternshipApplicationBuilder();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        LocalDate currentDate \u003d LocalDate.now();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Interview newInterviewTestCurrent \u003d Interview.createInterview(true, new ApplicationDate(currentDate),"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            new Address(\"123 Stevens Road\"));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        internshipApplicationTestCurrent.withInterview(newInterviewTestCurrent);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(internshipApplicationTestCurrent.buildWithInterviews()));"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // interview date is within 7 days from current date"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        InternshipApplicationBuilder internshipApplicationTestWithin \u003d new InternshipApplicationBuilder();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        LocalDate laterDate \u003d currentDate.plus(4, ChronoUnit.DAYS);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Interview newInterviewTestWithin \u003d Interview.createInterview(true, new ApplicationDate(laterDate),"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            new Address(\"123 Stevens Road\"));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        internshipApplicationTestWithin.withInterview(newInterviewTestWithin);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(internshipApplicationTestWithin.buildWithInterviews()));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void test_interviewDateHasPassed_returnsFalse() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        InterviewDateDuePredicate predicate \u003d new InterviewDateDuePredicate();"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // interview date date is before current date"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        InternshipApplicationBuilder internshipApplicationTestPast \u003d new InternshipApplicationBuilder();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        LocalDate pastDate \u003d LocalDate.now().minus(4, ChronoUnit.DAYS);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Interview newInterviewTestPast \u003d Interview.createInterview(true, new ApplicationDate(pastDate),"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            new Address(\"123 Stevens Road\"));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        internshipApplicationTestPast.withInterview(newInterviewTestPast);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(internshipApplicationTestPast.buildWithInterviews()));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void test_interviewDateIsNotWithin7Days_returnsFalse() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        InterviewDateDuePredicate predicate \u003d new InterviewDateDuePredicate();"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // interview date is more than 7 days past current date"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        InternshipApplicationBuilder internshipApplicationTestMore \u003d new InternshipApplicationBuilder();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        LocalDate laterDate \u003d LocalDate.now().plus(10, ChronoUnit.DAYS);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        Interview newInterviewTestMore \u003d Interview.createInterview(true, new ApplicationDate(laterDate),"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            new Address(\"123 Stevens Road\"));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        internshipApplicationTestMore.withInterview(newInterviewTestMore);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(internshipApplicationTestMore.buildWithInterviews()));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":7,"-":71}},{"path":"src/test/java/seedu/diary/model/internship/predicate/IsNotArchivedPredicateTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship.predicate;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.ArchiveCommand;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ModelManager;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.UserPrefs;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipApplicationBuilder;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"class IsNotArchivedPredicateTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        IsNotArchivedPredicate predicate \u003d new IsNotArchivedPredicate();"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertTrue(predicate.equals(predicate));"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(predicate.equals(1));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(null, predicate);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void test_applicationNotArchived_returnsTrue() {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        IsNotArchivedPredicate predicate \u003d new IsNotArchivedPredicate();"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().build()));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void test_applicationIsArchived_returnsFalse() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager(getTypicalInternshipDiary(), userPrefs);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        IsNotArchivedPredicate predicate \u003d new IsNotArchivedPredicate();"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        ArchiveCommand archiveCommand \u003d new ArchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            archiveCommand.execute(model);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        InternshipApplication archivedInternshipApplication \u003d"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            model.getAllInternshipApplicationList().get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(archivedInternshipApplication));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":12,"-":50}},{"path":"src/test/java/seedu/diary/model/internship/predicate/PhoneContainsNumbersPredicateTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship.predicate;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipApplicationBuilder;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PhoneContainsNumbersPredicateTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"12345\");"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"12345\", \"67890\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        PhoneContainsNumbersPredicate firstPredicate \u003d"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            new PhoneContainsNumbersPredicate(firstPredicateKeywordList);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        PhoneContainsNumbersPredicate secondPredicate \u003d"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            new PhoneContainsNumbersPredicate(secondPredicateKeywordList);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        PhoneContainsNumbersPredicate firstPredicateCopy \u003d"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            new PhoneContainsNumbersPredicate(firstPredicateKeywordList);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(null, firstPredicate);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // different numbers -\u003e returns false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void test_phoneContainsNumbers_returnsTrue() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Full number"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        PhoneContainsNumbersPredicate predicate \u003d"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            new PhoneContainsNumbersPredicate(Collections.singletonList(\"12345\"));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withPhone(\"12345\").build()));"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // One number"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        predicate \u003d new PhoneContainsNumbersPredicate(Arrays.asList(\"123\"));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withPhone(\"123456\").build()));"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // Multiple numbers"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        predicate \u003d new PhoneContainsNumbersPredicate(Arrays.asList(\"123\", \"456\"));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withPhone(\"123456\").build()));"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // Only one matching number"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        predicate \u003d new PhoneContainsNumbersPredicate(Arrays.asList(\"123\", \"987\"));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withPhone(\"123456\").build()));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void test_phoneDoesNotContainNumbers_returnsFalse() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Zero numbers"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        PhoneContainsNumbersPredicate predicate \u003d new PhoneContainsNumbersPredicate(Collections.emptyList());"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withPhone(\"12345678\").build()));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // Non-matching number"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        predicate \u003d new PhoneContainsNumbersPredicate(Arrays.asList(\"876\"));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withPhone(\"12345678\").build()));"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"gerhean"},"content":"        // Keywords match company, role, email, diary, priority and status, but does not match phone"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        predicate \u003d new PhoneContainsNumbersPredicate(Arrays.asList(\"Google\", \"Software\", \"Engineer\","},{"lineNumber":77,"author":{"gitId":"-"},"content":"            \"alice@email.com\", \"Main\", \"Street\", \"8\", \"APPLIED\"));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google\")"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            .withRole(\"Software Engineer\").withPhone(\"12345\")"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withPriority(\"8\")"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            .withStatus(\"APPLIED\").build()));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void isNull_nullNumbers_returnsTrue() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        PhoneContainsNumbersPredicate predicate \u003d new PhoneContainsNumbersPredicate(null);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(predicate.isNull());"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void isNull_nonNullNumbers_returnsFalse() {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        PhoneContainsNumbersPredicate predicate \u003d new PhoneContainsNumbersPredicate(Arrays.asList(\"12345\"));"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertFalse(predicate.isNull());"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":5,"-":90}},{"path":"src/test/java/seedu/diary/model/internship/predicate/PriorityContainsNumbersPredicateTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship.predicate;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipApplicationBuilder;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PriorityContainsNumbersPredicateTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"1\");"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"2\", \"8\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        PriorityContainsNumbersPredicate firstPredicate \u003d"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            new PriorityContainsNumbersPredicate(firstPredicateKeywordList);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        PriorityContainsNumbersPredicate secondPredicate \u003d"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            new PriorityContainsNumbersPredicate(secondPredicateKeywordList);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        PriorityContainsNumbersPredicate firstPredicateCopy \u003d"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            new PriorityContainsNumbersPredicate(firstPredicateKeywordList);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(null, firstPredicate);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // different numbers -\u003e returns false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void test_priorityContainsNumbers_returnsTrue() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Full number"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        PriorityContainsNumbersPredicate predicate \u003d"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            new PriorityContainsNumbersPredicate(Collections.singletonList(\"10\"));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withPriority(\"10\").build()));"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // One number"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        predicate \u003d new PriorityContainsNumbersPredicate(Arrays.asList(\"1\"));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withPriority(\"1\").build()));"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // Only one matching number"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        predicate \u003d new PriorityContainsNumbersPredicate(Arrays.asList(\"1\", \"9\"));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withPriority(\"1\").build()));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void test_priorityDoesNotContainNumbers_returnsFalse() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Zero numbers"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        PriorityContainsNumbersPredicate predicate \u003d new PriorityContainsNumbersPredicate(Collections.emptyList());"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withPriority(\"1\").build()));"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Non-matching keyword"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        predicate \u003d new PriorityContainsNumbersPredicate(Arrays.asList(\"10\"));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withPriority(\"1\").build()));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"gerhean"},"content":"        // Keywords match company, role, phone, email, diary and status but does not match priority"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        predicate \u003d new PriorityContainsNumbersPredicate(Arrays.asList(\"Google\", \"Software\", \"Engineer\","},{"lineNumber":73,"author":{"gitId":"-"},"content":"            \"12345\", \"alice@email.com\", \"Main\", \"Street\", \"APPLIED\"));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google\")"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            .withRole(\"Software Engineer\").withPhone(\"12345\")"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withPriority(\"1\")"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            .withStatus(\"APPLIED\").build()));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void isNull_nullNumbers_returnsTrue() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        PriorityContainsNumbersPredicate predicate \u003d new PriorityContainsNumbersPredicate(null);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertTrue(predicate.isNull());"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void isNull_nonNullNumbers_returnsFalse() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        PriorityContainsNumbersPredicate predicate \u003d new PriorityContainsNumbersPredicate(Arrays.asList(\"1\"));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertFalse(predicate.isNull());"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":5,"-":86}},{"path":"src/test/java/seedu/diary/model/internship/predicate/RoleContainsKeywordsPredicateTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship.predicate;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipApplicationBuilder;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class RoleContainsKeywordsPredicateTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        RoleContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            new RoleContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        RoleContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            new RoleContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        RoleContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            new RoleContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(null, firstPredicate);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // different keywords -\u003e returns false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void test_roleContainsKeywords_returnsTrue() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // One keyword"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        RoleContainsKeywordsPredicate predicate \u003d"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            new RoleContainsKeywordsPredicate(Collections.singletonList(\"Cleaner\"));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withRole(\"Cleaner\").build()));"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // Multiple keywords"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        predicate \u003d new RoleContainsKeywordsPredicate(Arrays.asList(\"Software\", \"Engineer\"));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withRole(\"Software Engineer\").build()));"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // Only one matching keyword"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        predicate \u003d new RoleContainsKeywordsPredicate(Arrays.asList(\"Software\", \"Cleaner\"));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withRole(\"Software Developer\").build()));"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        predicate \u003d new RoleContainsKeywordsPredicate(Arrays.asList(\"sOfTwArE\", \"eNgInEeR\"));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withRole(\"Software Engineer\").build()));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void test_roleDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Zero keywords"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        RoleContainsKeywordsPredicate predicate \u003d new RoleContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withRole(\"Software Engineer\").build()));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // Non-matching keyword"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        predicate \u003d new RoleContainsKeywordsPredicate(Arrays.asList(\"Cleaner\"));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withRole(\"Software Engineer\").build()));"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"gerhean"},"content":"        // Keywords match company, phone, email, diary, priority and status, but does not match role"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        predicate \u003d new RoleContainsKeywordsPredicate(Arrays.asList(\"Google\", \"12345\", \"alice@email.com\", \"Main\","},{"lineNumber":77,"author":{"gitId":"-"},"content":"            \"Street\", \"1\", \"APPLIED\"));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google\")"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            .withRole(\"Software Engineer\").withPhone(\"12345\")"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withPriority(\"1\")"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            .withStatus(\"APPLIED\").build()));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void isNull_nullKeyword_returnsTrue() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        RoleContainsKeywordsPredicate predicate \u003d new RoleContainsKeywordsPredicate(null);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(predicate.isNull());"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void isNull_nonNullKeyword_returnsFalse() {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        RoleContainsKeywordsPredicate predicate \u003d new RoleContainsKeywordsPredicate(Arrays.asList(\"Engineer\"));"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertFalse(predicate.isNull());"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":5,"-":90}},{"path":"src/test/java/seedu/diary/model/internship/predicate/StatusContainsKeywordsPredicateTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship.predicate;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipApplicationBuilder;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class StatusContainsKeywordsPredicateTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        StatusContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            new StatusContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        StatusContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            new StatusContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        StatusContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            new StatusContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(null, firstPredicate);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // different keywords -\u003e returns false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void test_statusContainsKeywords_returnsTrue() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Full status"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        StatusContainsKeywordsPredicate predicate \u003d"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            new StatusContainsKeywordsPredicate(Collections.singletonList(\"APPLIED\"));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withStatus(\"APPLIED\").build()));"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // One keyword"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        predicate \u003d new StatusContainsKeywordsPredicate(Collections.singletonList(\"APPLIED\"));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withStatus(\"APPLIED\").build()));"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // Only one matching keyword"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        predicate \u003d new StatusContainsKeywordsPredicate(Arrays.asList(\"APPLIED\", \"REJECTED\"));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withStatus(\"APPLIED\").build()));"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        predicate \u003d new StatusContainsKeywordsPredicate(Arrays.asList(\"aPpLiEd\"));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withStatus(\"APPLIED\").build()));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void test_statusDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Zero keywords"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        StatusContainsKeywordsPredicate predicate \u003d new StatusContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withStatus(\"APPLIED\").build()));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // Non-matching keyword"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        predicate \u003d new StatusContainsKeywordsPredicate(Arrays.asList(\"bob\"));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withStatus(\"APPLIED\").build()));"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"gerhean"},"content":"        // Keywords match company, role, phone, email, diary and priority, but does not match status"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        predicate \u003d new StatusContainsKeywordsPredicate(Arrays.asList(\"Google\", \"Software\", \"Engineer\", \"12345\","},{"lineNumber":77,"author":{"gitId":"-"},"content":"            \"alice@email.com\", \"Main\", \"Street\", \"1\"));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google\")"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            .withRole(\"Software Engineer\").withPhone(\"12345\")"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withPriority(\"1\")"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            .withStatus(\"APPLIED\").build()));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void isNull_nullKeyword_returnsTrue() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        StatusContainsKeywordsPredicate predicate \u003d new StatusContainsKeywordsPredicate(null);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(predicate.isNull());"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void isNull_nonNullKeyword_returnsFalse() {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        StatusContainsKeywordsPredicate predicate \u003d new StatusContainsKeywordsPredicate(Arrays.asList(\"APPLIED\"));"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertFalse(predicate.isNull());"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":5,"-":90}},{"path":"src/test/java/seedu/diary/model/internship/predicate/StatusIsInterviewPredicateTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship.predicate;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.status.Status;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipApplicationBuilder;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"class StatusIsInterviewPredicateTest {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        StatusIsInterviewPredicate predicate \u003d new StatusIsInterviewPredicate();"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertTrue(predicate.equals(predicate));"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertFalse(predicate.equals(1));"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(null, predicate);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void test_statusIsInterview_returnsTrue() {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        StatusIsInterviewPredicate predicate \u003d new StatusIsInterviewPredicate();"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withStatus(Status.INTERVIEW).build()));"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void test_statusIsNotInterview_returnsFalse() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        StatusIsInterviewPredicate predicate \u003d new StatusIsInterviewPredicate();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withStatus(Status.WISHLIST).build()));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withStatus(Status.APPLIED).build()));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withStatus(Status.OFFERED).build()));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withStatus(Status.GHOSTED).build()));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withStatus(Status.REJECTED).build()));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":5,"-":39}},{"path":"src/test/java/seedu/diary/model/internship/predicate/StatusIsWishlistPredicateTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.internship.predicate;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.status.Status;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipApplicationBuilder;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"class StatusIsWishlistPredicateTest {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        StatusIsWishlistPredicate predicate \u003d new StatusIsWishlistPredicate();"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertTrue(predicate.equals(predicate));"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertFalse(predicate.equals(1));"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"        assertNotEquals(null, predicate);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void test_statusIsWishlist_returnsTrue() {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        StatusIsWishlistPredicate predicate \u003d new StatusIsWishlistPredicate();"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new InternshipApplicationBuilder().withStatus(Status.WISHLIST).build()));"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void test_statusIsNotWishlist_returnsFalse() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        StatusIsWishlistPredicate predicate \u003d new StatusIsWishlistPredicate();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withStatus(Status.APPLIED).build()));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withStatus(Status.INTERVIEW).build()));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withStatus(Status.OFFERED).build()));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withStatus(Status.GHOSTED).build()));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new InternshipApplicationBuilder().withStatus(Status.REJECTED).build()));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":5,"-":40}},{"path":"src/test/java/seedu/diary/model/statistics/StatisticsTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.model.statistics;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.InternshipDiary;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ModelManager;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.UserPrefs;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.status.Status;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.InternshipApplicationBuilder;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code Statistics}."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class StatisticsTest {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    // these internship applications samples are currently only used within here"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    // if other classes start needing such samples, we will create a new util class so that"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    // we can reused all these samples"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final InternshipApplication WISHLIST_IA \u003d new InternshipApplicationBuilder()"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        .withCompany(\"a\")"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        .withStatus(Status.WISHLIST)"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        .build();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final InternshipApplication APPLIED_IA \u003d new InternshipApplicationBuilder()"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        .withCompany(\"b\")"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        .withStatus(Status.APPLIED)"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        .build();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final InternshipApplication INTERVIEW_IA \u003d new InternshipApplicationBuilder()"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        .withCompany(\"c\")"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        .withStatus(Status.INTERVIEW)"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        .build();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final InternshipApplication OFFERED_IA \u003d new InternshipApplicationBuilder()"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        .withCompany(\"d\")"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        .withStatus(Status.OFFERED)"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        .build();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final InternshipApplication REJECTED_IA \u003d new InternshipApplicationBuilder()"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        .withCompany(\"e\")"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        .withStatus(Status.REJECTED)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        .build();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final InternshipApplication GHOSTED_IA \u003d new InternshipApplicationBuilder()"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        .withCompany(\"f\")"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        .withStatus(Status.GHOSTED)"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        .build();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private final Statistics statistics \u003d new Statistics();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private final Model emptyModel \u003d new ModelManager(new InternshipDiary(), new UserPrefs());"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private final HashMap\u003cStatus, Integer\u003e statusCount \u003d new HashMap\u003c\u003e();"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private final Status[] statuses \u003d Status.class.getEnumConstants();"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        model.addInternshipApplication(WISHLIST_IA);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        model.addInternshipApplication(APPLIED_IA);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        model.addInternshipApplication(INTERVIEW_IA);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        model.addInternshipApplication(OFFERED_IA);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        model.addInternshipApplication(REJECTED_IA);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        model.addInternshipApplication(GHOSTED_IA);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        initializeStatusCount();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void computeCount_internshipApplicationWithAllStatusAdded_countComputedCorrectly() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        statistics.computeCount(model.getFilteredInternshipApplicationList());"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        computeActualStatusCount();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        int actualTotalCount \u003d 0;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        for (Status status : statuses) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            int computedCount \u003d statistics.getCount(status);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            int actualCount \u003d statusCount.get(status);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            assertEquals(computedCount, actualCount);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            actualTotalCount +\u003d actualCount;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertEquals(statistics.getTotalCount(), actualTotalCount);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void computeCount_noInternshipApplicationAdded_countRemainsZero() {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        statistics.computeCount(emptyModel.getFilteredInternshipApplicationList());"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        for (Status status : statuses) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            int computedCount \u003d statistics.getCount(status);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            assertEquals(computedCount, 0);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(statistics.getTotalCount(), 0);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void resetStatistics_internshipApplicationWithAllStatusAdded_countsBecomeZero() {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        statistics.computeAndUpdateStatistics(model.getFilteredInternshipApplicationList());"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        for (Status status : statuses) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            assertNotEquals(statistics.getCount(status), 0);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        statistics.resetStatistics();"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        for (Status status : statuses) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            assertEquals(statistics.getCount(status), 0);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    private void initializeStatusCount() {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        for (Status status : statuses) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            statusCount.put(status, 0);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Computes the actual count of statuses in internship application(s)."},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    private void computeActualStatusCount() {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        List\u003cStatus\u003e statuses \u003d model.getFilteredInternshipApplicationList().stream()"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            .map(ia -\u003e {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                return ia.getStatus();"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            })"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        statuses.forEach((status) -\u003e {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            int count \u003d statusCount.get(status);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            statusCount.put(status, ++count);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":9,"-":122}},{"path":"src/test/java/seedu/diary/storage/JsonAdaptedInternshipTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.storage;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.storage.JsonAdaptedInternship.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInternshipApplications.GOOGLE;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.Messages;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.exceptions.IllegalValueException;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.util.BooleanUtil;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Address;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.ApplicationDate;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Company;"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Email;"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Phone;"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Priority;"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Role;"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.status.Status;"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"public class JsonAdaptedInternshipTest {"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"    private static final String INVALID_COMPANY \u003d \"\";"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"    private static final String INVALID_ROLE \u003d \"\";"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"    private static final String INVALID_PHONE \u003d \"-651234\";"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"    private static final String INVALID_APPLICATION_DATE \u003d \"20/20/2020\";"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"    private static final String INVALID_PRIORITY \u003d \"11\";"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"    private static final String INVALID_STATUS \u003d \"ALIVE\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String INVALID_IS_ARCHIVED \u003d \"s\";"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"    private static final String VALID_COMPANY \u003d GOOGLE.getCompany().toString();"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"    private static final String VALID_ROLE \u003d GOOGLE.getRole().toString();"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"    private static final String VALID_ADDRESS \u003d GOOGLE.getAddress().toString();"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"    private static final String VALID_PHONE \u003d GOOGLE.getPhone().toString();"},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"    private static final String VALID_EMAIL \u003d GOOGLE.getEmail().toString();"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"    private static final String VALID_APPLICATION_DATE \u003d"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        GOOGLE.getApplicationDate().toString();"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"    private static final String VALID_PRIORITY \u003d GOOGLE.getPriority().toString();"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"    private static final String VALID_STATUS \u003d GOOGLE.getStatus().toString();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedInterview\u003e VALID_INTERVIEWS \u003d new ArrayList\u003c\u003e();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String VALID_IS_ARCHIVED \u003d GOOGLE.isArchived().toString();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private static final String VALID_LAST_STAGE \u003d null;"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Paths.get(\"src\", \"test\", \"data\", \"JsonAdaptedInternshipTest\");"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private static final Path TYPICAL_INTERNSHIPS_FILE \u003d"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        TEST_DATA_FOLDER.resolve(\"typicalInterviewInternship.json\");"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private static final Path INVALID_INTERNSHIP_FILE \u003d"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        TEST_DATA_FOLDER.resolve(\"invalidInterviewInternship.json\");"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private static final Path DUPLICATE_INTERNSHIP_FILE \u003d"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        TEST_DATA_FOLDER.resolve(\"duplicateInterviewInternship.json\");"},{"lineNumber":59,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":"    public void toModelType_validInternshipDetails_returnsInternship() throws Exception {"},{"lineNumber":62,"author":{"gitId":"gerhean"},"content":"        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(GOOGLE);"},{"lineNumber":63,"author":{"gitId":"gerhean"},"content":"        assertEquals(GOOGLE, internship.toModelType());"},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void toModelType_invalidCompany_throwsIllegalValueException() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        JsonAdaptedInternship internship \u003d"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            new JsonAdaptedInternship(INVALID_COMPANY,"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                VALID_ROLE, VALID_ADDRESS, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                VALID_APPLICATION_DATE, VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED,"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                VALID_LAST_STAGE);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Company.MESSAGE_CONSTRAINTS;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void toModelType_nullCompany_throwsIllegalValueException() {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        JsonAdaptedInternship internship \u003d"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            new JsonAdaptedInternship(null,"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                VALID_ROLE, VALID_ADDRESS, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                VALID_APPLICATION_DATE, VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED,"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                VALID_LAST_STAGE);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Company.class.getSimpleName());"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void toModelType_invalidRole_throwsIllegalValueException() {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        JsonAdaptedInternship internship \u003d"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            new JsonAdaptedInternship(VALID_COMPANY,"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                INVALID_ROLE,"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                VALID_ADDRESS, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                VALID_APPLICATION_DATE, VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED,"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                VALID_LAST_STAGE);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Role.MESSAGE_CONSTRAINTS;"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void toModelType_nullRole_throwsIllegalValueException() {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        JsonAdaptedInternship internship \u003d"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            new JsonAdaptedInternship(VALID_COMPANY,"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                null, VALID_ADDRESS, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                VALID_APPLICATION_DATE, VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED,"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                VALID_LAST_STAGE);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Role.class.getSimpleName());"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":111,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":112,"author":{"gitId":"gerhean"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":113,"author":{"gitId":"gerhean"},"content":"        JsonAdaptedInternship internship \u003d"},{"lineNumber":114,"author":{"gitId":"gerhean"},"content":"            new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE, VALID_ADDRESS,"},{"lineNumber":115,"author":{"gitId":"gerhean"},"content":"                INVALID_PHONE,"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                VALID_EMAIL, VALID_APPLICATION_DATE,"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED, VALID_LAST_STAGE);"},{"lineNumber":118,"author":{"gitId":"gerhean"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"},{"lineNumber":119,"author":{"gitId":"gerhean"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"},{"lineNumber":120,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":122,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"gerhean"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":124,"author":{"gitId":"gerhean"},"content":"        JsonAdaptedInternship internship \u003d"},{"lineNumber":125,"author":{"gitId":"gerhean"},"content":"            new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE, VALID_ADDRESS,"},{"lineNumber":126,"author":{"gitId":"gerhean"},"content":"                null,"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                VALID_EMAIL, VALID_APPLICATION_DATE,"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED, VALID_LAST_STAGE);"},{"lineNumber":129,"author":{"gitId":"gerhean"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":130,"author":{"gitId":"gerhean"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"},{"lineNumber":131,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":133,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":134,"author":{"gitId":"gerhean"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":135,"author":{"gitId":"gerhean"},"content":"        JsonAdaptedInternship internship \u003d"},{"lineNumber":136,"author":{"gitId":"gerhean"},"content":"            new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE, VALID_ADDRESS, VALID_PHONE,"},{"lineNumber":137,"author":{"gitId":"gerhean"},"content":"                INVALID_EMAIL,"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                VALID_APPLICATION_DATE, VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED,"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                VALID_LAST_STAGE);"},{"lineNumber":140,"author":{"gitId":"gerhean"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"},{"lineNumber":141,"author":{"gitId":"gerhean"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"},{"lineNumber":142,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":144,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":145,"author":{"gitId":"gerhean"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":146,"author":{"gitId":"gerhean"},"content":"        JsonAdaptedInternship internship \u003d"},{"lineNumber":147,"author":{"gitId":"gerhean"},"content":"            new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE, VALID_ADDRESS, VALID_PHONE,"},{"lineNumber":148,"author":{"gitId":"gerhean"},"content":"                null,"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                VALID_APPLICATION_DATE, VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED,"},{"lineNumber":150,"author":{"gitId":"-"},"content":"                VALID_LAST_STAGE);"},{"lineNumber":151,"author":{"gitId":"gerhean"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":152,"author":{"gitId":"gerhean"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"},{"lineNumber":153,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":155,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":156,"author":{"gitId":"gerhean"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":157,"author":{"gitId":"gerhean"},"content":"        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE,"},{"lineNumber":158,"author":{"gitId":"gerhean"},"content":"            INVALID_ADDRESS,"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            VALID_PHONE, VALID_EMAIL, VALID_APPLICATION_DATE,"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED, VALID_LAST_STAGE);"},{"lineNumber":161,"author":{"gitId":"gerhean"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"},{"lineNumber":162,"author":{"gitId":"gerhean"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"},{"lineNumber":163,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":165,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":166,"author":{"gitId":"gerhean"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":167,"author":{"gitId":"gerhean"},"content":"        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE,"},{"lineNumber":168,"author":{"gitId":"gerhean"},"content":"            null,"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            VALID_PHONE, VALID_EMAIL, VALID_APPLICATION_DATE,"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED, VALID_LAST_STAGE);"},{"lineNumber":171,"author":{"gitId":"gerhean"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":172,"author":{"gitId":"gerhean"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"},{"lineNumber":173,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    public void toModelType_invalidApplicationDate_throwsIllegalValueException() {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE,"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            VALID_ADDRESS, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            INVALID_APPLICATION_DATE,"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED, VALID_LAST_STAGE);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d ApplicationDate.MESSAGE_CONSTRAINTS;"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    public void toModelType_nullApplicationDate_throwsIllegalValueException() {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE,"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            VALID_ADDRESS, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            null,"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED, VALID_LAST_STAGE);"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ApplicationDate.class.getSimpleName());"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPriority_throwsIllegalValueException() {"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE,"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            VALID_ADDRESS, VALID_PHONE, VALID_EMAIL, VALID_APPLICATION_DATE,"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            INVALID_PRIORITY,"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED, VALID_LAST_STAGE);"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Priority.MESSAGE_CONSTRAINTS;"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    public void toModelType_nullPriority_throwsIllegalValueException() {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE,"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            VALID_ADDRESS, VALID_PHONE, VALID_EMAIL, VALID_APPLICATION_DATE,"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            null,"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED, VALID_LAST_STAGE);"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Priority.class.getSimpleName());"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    public void toModelType_invalidStatus_throwsIllegalValueException() {"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE,"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            VALID_ADDRESS, VALID_PHONE, VALID_EMAIL, VALID_APPLICATION_DATE, VALID_PRIORITY,"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            INVALID_STATUS,"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            VALID_INTERVIEWS, VALID_IS_ARCHIVED, VALID_LAST_STAGE);"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Status.MESSAGE_CONSTRAINTS;"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    public void toModelType_nullStatus_throwsIllegalValueException() {"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE,"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            VALID_ADDRESS, VALID_PHONE, VALID_EMAIL, VALID_APPLICATION_DATE, VALID_PRIORITY,"},{"lineNumber":229,"author":{"gitId":"-"},"content":"            null,"},{"lineNumber":230,"author":{"gitId":"-"},"content":"            VALID_INTERVIEWS, VALID_IS_ARCHIVED, VALID_LAST_STAGE);"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName());"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    public void toModelType_invalidIsArchived_throwsIllegalValueException() {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE,"},{"lineNumber":238,"author":{"gitId":"-"},"content":"            VALID_ADDRESS, VALID_PHONE, VALID_EMAIL, VALID_APPLICATION_DATE, VALID_PRIORITY,"},{"lineNumber":239,"author":{"gitId":"-"},"content":"            VALID_STATUS, VALID_INTERVIEWS,"},{"lineNumber":240,"author":{"gitId":"-"},"content":"            INVALID_IS_ARCHIVED, VALID_LAST_STAGE);"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d BooleanUtil.INVALID_BOOLEAN;"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    public void toModelType_nullIsArchived_throwsIllegalValueException() {"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE,"},{"lineNumber":248,"author":{"gitId":"-"},"content":"            VALID_ADDRESS, VALID_PHONE, VALID_EMAIL, VALID_APPLICATION_DATE, VALID_PRIORITY,"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            VALID_STATUS, VALID_INTERVIEWS, null, VALID_LAST_STAGE);"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Messages.IS_ARCHIVED);"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":102,"-":151}},{"path":"src/test/java/seedu/diary/storage/JsonAdaptedInterviewTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.storage.JsonAdaptedInterview.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInterviews.NUS;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.util.BooleanUtil;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Address;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.ApplicationDate;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class JsonAdaptedInterviewTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String INVALID_IS_ONLINE \u003d \"n\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \"  \";"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String INVALID_DATE \u003d \"11002222\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String VALID_IS_ONLINE \u003d \"false\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 avenue road\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String VALID_DATE \u003d \"10 10 2010\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void toModelType_validInterviewDetails_returnsInternship() throws Exception {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        JsonAdaptedInterview interview \u003d new JsonAdaptedInterview(NUS);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(NUS, interview.toModelType());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        JsonAdaptedInterview interview \u003d new JsonAdaptedInterview(INVALID_ADDRESS,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            VALID_IS_ONLINE, VALID_DATE);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, interview::toModelType);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        JsonAdaptedInterview interview \u003d new JsonAdaptedInterview(null,"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            VALID_IS_ONLINE, VALID_DATE);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, interview::toModelType);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void toModelType_invalidDate_throwsIllegalValueException() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        JsonAdaptedInterview interview \u003d new JsonAdaptedInterview(VALID_ADDRESS,"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            VALID_IS_ONLINE, INVALID_DATE);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d ApplicationDate.MESSAGE_CONSTRAINTS;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, interview::toModelType);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void toModelType_nullDate_throwsIllegalValueException() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        JsonAdaptedInterview interview \u003d new JsonAdaptedInterview(VALID_ADDRESS,"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            VALID_IS_ONLINE, null);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ApplicationDate.class.getSimpleName());"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, interview::toModelType);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void toModelType_invalidIsOnline_throwsIllegalValueException() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        JsonAdaptedInterview interview \u003d new JsonAdaptedInterview(VALID_ADDRESS,"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            INVALID_IS_ONLINE, VALID_DATE);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d BooleanUtil.INVALID_BOOLEAN;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, interview::toModelType);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void toModelType_nullIsOnline_throwsIllegalValueException() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        JsonAdaptedInterview interview \u003d new JsonAdaptedInterview(VALID_ADDRESS,"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            null, VALID_DATE);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Boolean.class.getSimpleName());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, interview::toModelType);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":8,"-":69}},{"path":"src/test/java/seedu/diary/storage/JsonInternshipDiaryStorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.storage;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInternshipApplications.AMY;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInternshipApplications.BOB;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInternshipApplications.GOOGLE;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import java.nio.file.Path;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import java.nio.file.Paths;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.InternshipDiary;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ReadOnlyInternshipDiary;"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"public class JsonInternshipDiaryStorageTest {"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"    private static final Path TEST_DATA_FOLDER \u003d"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"        Paths.get(\"src\", \"test\", \"data\", \"JsonInternshipDiaryStorageTest\");"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"    @TempDir"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"    public Path testFolder;"},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"    public void readInternshipDiary_nullFilePath_throwsNullPointerException() {"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"        assertThrows(NullPointerException.class, () -\u003e readInternshipDiary(null));"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"    private java.util.Optional\u003cReadOnlyInternshipDiary\u003e readInternshipDiary(String filePath) throws Exception {"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"        return new JsonInternshipDiaryStorage(Paths.get(filePath))"},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"            .readInternshipDiary(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"            : null;"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"        assertFalse(readInternshipDiary(\"NonExistentFile.json\").isPresent());"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":"    public void read_notJsonFormat_exceptionThrown() {"},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":"        assertThrows(DataConversionException.class, () -\u003e"},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":"            readInternshipDiary(\"notJsonFormatInternshipDiary.json\"));"},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":"    public void readInternshipDiary_invalidInternshipInternshipDiary_throwDataConversionException() {"},{"lineNumber":58,"author":{"gitId":"gerhean"},"content":"        assertThrows(DataConversionException.class, () -\u003e"},{"lineNumber":59,"author":{"gitId":"gerhean"},"content":"            readInternshipDiary(\"invalidInternshipInternshipDiary.json\"));"},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":62,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"gerhean"},"content":"    public void readInternshipDiary_invalidAndValidInternshipInternshipDiary_throwDataConversionException() {"},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":"        assertThrows(DataConversionException.class, () -\u003e"},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":"            readInternshipDiary(\"invalidAndValidInternshipInternshipDiary.json\"));"},{"lineNumber":66,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":68,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"gerhean"},"content":"    public void readAndSaveInternshipDiary_allInOrder_success() throws Exception {"},{"lineNumber":70,"author":{"gitId":"gerhean"},"content":"        Path filePath \u003d testFolder.resolve(\"TempInternshipDiary.json\");"},{"lineNumber":71,"author":{"gitId":"gerhean"},"content":"        InternshipDiary original \u003d getTypicalInternshipDiary();"},{"lineNumber":72,"author":{"gitId":"gerhean"},"content":"        JsonInternshipDiaryStorage jsonInternshipDiaryStorage \u003d new JsonInternshipDiaryStorage(filePath);"},{"lineNumber":73,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":74,"author":{"gitId":"gerhean"},"content":"        // Save in new file and read back"},{"lineNumber":75,"author":{"gitId":"gerhean"},"content":"        jsonInternshipDiaryStorage.saveInternshipDiary(original, filePath);"},{"lineNumber":76,"author":{"gitId":"gerhean"},"content":"        ReadOnlyInternshipDiary readBack \u003d jsonInternshipDiaryStorage.readInternshipDiary(filePath).get();"},{"lineNumber":77,"author":{"gitId":"gerhean"},"content":"        assertEquals(original, new InternshipDiary(readBack));"},{"lineNumber":78,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":79,"author":{"gitId":"gerhean"},"content":"        // Modify data, overwrite exiting file, and read back"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        original.loadInternshipApplication(AMY);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        original.removeInternship(GOOGLE);"},{"lineNumber":82,"author":{"gitId":"gerhean"},"content":"        jsonInternshipDiaryStorage.saveInternshipDiary(original, filePath);"},{"lineNumber":83,"author":{"gitId":"gerhean"},"content":"        readBack \u003d jsonInternshipDiaryStorage.readInternshipDiary(filePath).get();"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertEquals(original, new InternshipDiary(readBack));"},{"lineNumber":85,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":86,"author":{"gitId":"gerhean"},"content":"        // Save and read without specifying file path"},{"lineNumber":87,"author":{"gitId":"gerhean"},"content":"        original.addInternshipApplication(BOB);"},{"lineNumber":88,"author":{"gitId":"gerhean"},"content":"        jsonInternshipDiaryStorage.saveInternshipDiary(original); // file path not specified"},{"lineNumber":89,"author":{"gitId":"gerhean"},"content":"        readBack \u003d jsonInternshipDiaryStorage.readInternshipDiary().get(); // file path not specified"},{"lineNumber":90,"author":{"gitId":"gerhean"},"content":"        assertEquals(original, new InternshipDiary(readBack));"},{"lineNumber":91,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":92,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":94,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"gerhean"},"content":"    public void saveInternshipDiary_nullInternshipDiary_throwsNullPointerException() {"},{"lineNumber":96,"author":{"gitId":"gerhean"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveInternshipDiary(null, \"SomeFile.json\"));"},{"lineNumber":97,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":99,"author":{"gitId":"gerhean"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"gerhean"},"content":"     * Saves {@code internshipDiary} at the specified {@code filePath}."},{"lineNumber":101,"author":{"gitId":"gerhean"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"gerhean"},"content":"    private void saveInternshipDiary(ReadOnlyInternshipDiary internshipDiary, String filePath) {"},{"lineNumber":103,"author":{"gitId":"gerhean"},"content":"        try {"},{"lineNumber":104,"author":{"gitId":"gerhean"},"content":"            new JsonInternshipDiaryStorage(Paths.get(filePath))"},{"lineNumber":105,"author":{"gitId":"gerhean"},"content":"                .saveInternshipDiary(internshipDiary, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":106,"author":{"gitId":"gerhean"},"content":"        } catch (IOException ioe) {"},{"lineNumber":107,"author":{"gitId":"gerhean"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":108,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":111,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":112,"author":{"gitId":"gerhean"},"content":"    public void saveInternshipDiary_nullFilePath_throwsNullPointerException() {"},{"lineNumber":113,"author":{"gitId":"gerhean"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveInternshipDiary(new InternshipDiary(), null));"},{"lineNumber":114,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":112,"-":3}},{"path":"src/test/java/seedu/diary/storage/JsonSerializableInternshipDiaryTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.storage;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.util.JsonUtil;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.InternshipDiary;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.testutil.TypicalInternshipApplications;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"public class JsonSerializableInternshipDiaryTest {"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"    private static final Path TEST_DATA_FOLDER \u003d"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"        Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableInternshipDiaryTest\");"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"    private static final Path TYPICAL_INTERNSHIPS_FILE \u003d"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"        TEST_DATA_FOLDER.resolve(\"typicalInternshipsInternshipDiary.json\");"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"    private static final Path INVALID_INTERNSHIP_FILE \u003d"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"        TEST_DATA_FOLDER.resolve(\"invalidInternshipInternshipDiary.json\");"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"    private static final Path DUPLICATE_INTERNSHIP_FILE \u003d"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"        TEST_DATA_FOLDER.resolve(\"duplicateInternshipInternshipDiary.json\");"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"    public void toModelType_typicalInternshipsFile_success() throws Exception {"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"        JsonSerializableInternshipDiary dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_INTERNSHIPS_FILE,"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"            JsonSerializableInternshipDiary.class).get();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        InternshipDiary internshipDiaryFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"        InternshipDiary typicalInternshipsInternshipDiary \u003d TypicalInternshipApplications.getTypicalInternshipDiary();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertEquals(internshipDiaryFromFile, typicalInternshipsInternshipDiary);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"    public void toModelType_invalidInternshipFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"        JsonSerializableInternshipDiary dataFromFile \u003d JsonUtil.readJsonFile(INVALID_INTERNSHIP_FILE,"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"            JsonSerializableInternshipDiary.class).get();"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"    public void toModelType_duplicateInternships_throwsIllegalValueException() throws Exception {"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"        JsonSerializableInternshipDiary dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_INTERNSHIP_FILE,"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"            JsonSerializableInternshipDiary.class).get();"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableInternshipDiary.MESSAGE_DUPLICATE_INTERNSHIP,"},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"            dataFromFile::toModelType);"},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":47,"-":5}},{"path":"src/test/java/seedu/diary/storage/JsonUserPrefsStorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.GuiSettings;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.exceptions.DataConversionException;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.UserPrefs;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            : null;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"},{"lineNumber":76,"author":{"gitId":"gerhean"},"content":"        userPrefs.setInternshipDiaryFilePath(Paths.get(\"internshipdiary.json\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                .saveUserPrefs(userPrefs);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":6,"-":117}},{"path":"src/test/java/seedu/diary/storage/StorageManagerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.InternshipDiary;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.ReadOnlyInternshipDiary;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.UserPrefs;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":"        JsonInternshipDiaryStorage internshipDiaryStorage \u003d new JsonInternshipDiaryStorage(getTempFilePath(\"ab\"));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"        storageManager \u003d new StorageManager(internshipDiaryStorage, userPrefsStorage);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":"    public void internshipDiaryReadSave() throws Exception {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":"         * {@link JsonInternshipDiaryStorage} class."},{"lineNumber":55,"author":{"gitId":"gerhean"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonInternshipDiaryStorageTest} class."},{"lineNumber":56,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":"        InternshipDiary original \u003d getTypicalInternshipDiary();"},{"lineNumber":58,"author":{"gitId":"gerhean"},"content":"        storageManager.saveInternshipDiary(original);"},{"lineNumber":59,"author":{"gitId":"gerhean"},"content":"        ReadOnlyInternshipDiary retrieved \u003d storageManager.readInternshipDiary().get();"},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":"        assertEquals(original, new InternshipDiary(retrieved));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":"    public void getInternshipDiaryFilePath() {"},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":"        assertNotNull(storageManager.getInternshipDiaryFilePath());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":17,"-":51}},{"path":"src/test/java/seedu/diary/testutil/Assert.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.function.Executable;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A set of assertion methods useful for writing tests."},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Assert {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception."},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * with our custom {@link #assertThrows(Class, String, Executable)} method."},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * To standardize API calls in this project, users should use this method instead of"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Assertions#assertThrows(Class, Executable)}."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(expectedType, executable);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * If there\u0027s no need for the verification of the exception\u0027s error message, call"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * {@link #assertThrows(Class, Executable)} instead."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @see #assertThrows(Class, Executable)"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        Executable executable) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":1,"-":33}},{"path":"src/test/java/seedu/diary/testutil/EditInternshipDescriptorBuilder.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.EditCommand;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.EditCommand.EditInternshipDescriptor;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Address;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.ApplicationDate;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Company;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Email;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Phone;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Priority;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Role;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.status.Status;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * A utility class to help with building EditInternshipDescriptor objects."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class EditInternshipDescriptorBuilder {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private EditCommand.EditInternshipDescriptor descriptor;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public EditInternshipDescriptorBuilder() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditCommand.EditInternshipDescriptor();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public EditInternshipDescriptorBuilder(EditCommand.EditInternshipDescriptor descriptor) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditInternshipDescriptor(descriptor);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns an {@code EditInternshipDescriptor} with fields containing {@code internshipApplication}\u0027s details"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public EditInternshipDescriptorBuilder(InternshipApplication internshipApplication) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditCommand.EditInternshipDescriptor();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor.setCompany(internshipApplication.getCompany());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        descriptor.setRole(internshipApplication.getRole());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        descriptor.setPhone(internshipApplication.getPhone());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        descriptor.setEmail(internshipApplication.getEmail());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        descriptor.setAddress(internshipApplication.getAddress());"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        descriptor.setDate(internshipApplication.getApplicationDate());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        descriptor.setPriority(internshipApplication.getPriority());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        descriptor.setStatus(internshipApplication.getStatus());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        descriptor.setIsGhostedOrRejected(internshipApplication.getIsGhostedOrRejected());"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        descriptor.setLastStage(internshipApplication.getLastStage());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Sets the {@code Company} of the {@code EditInternshipDescriptor} that we are building."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public EditInternshipDescriptorBuilder withCompany(String company) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        descriptor.setCompany(new Company(company));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Sets the {@code Role} of the {@code EditInternshipDescriptor} that we are building."},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public EditInternshipDescriptorBuilder withRole(String role) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        descriptor.setRole(new Role(role));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditInternshipDescriptor} that we are building."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public EditInternshipDescriptorBuilder withPhone(String phone) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditInternshipDescriptor} that we are building."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public EditInternshipDescriptorBuilder withEmail(String email) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Sets the {@code ApplicationDate} of the {@code EditInternshipDescriptor} that we are building."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public EditInternshipDescriptorBuilder withApplicationDate(String date) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            descriptor.setDate(new ApplicationDate(LocalDate.parse(date, DateTimeFormatter.ofPattern(\"dd MM yyyy\"))));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            return this;"},{"lineNumber":90,"author":{"gitId":"gerhean"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            return this;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Sets the {@code Priority} of the {@code EditInternshipDescriptor} that we are building."},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public EditInternshipDescriptorBuilder withPriority(String priority) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        descriptor.setPriority(new Priority(priority));"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Sets the {@code Status} of the {@code EditInternshipDescriptor} that we are building."},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public EditInternshipDescriptorBuilder withStatus(String status) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        descriptor.setStatus(Status.valueOf(status));"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditInternshipDescriptor} that we are building."},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public EditInternshipDescriptorBuilder withAddress(String address) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public EditCommand.EditInternshipDescriptor build() {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        return descriptor;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":16,"-":107}},{"path":"src/test/java/seedu/diary/testutil/EditInterviewDescriptorBuilder.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.interviewsubcommands.InterviewEditCommand;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Address;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.ApplicationDate;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.interview.Interview;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class to help build EditInterviewDescriptor objects."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class EditInterviewDescriptorBuilder {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private InterviewEditCommand.EditInterviewDescriptor descriptor;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public EditInterviewDescriptorBuilder() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        descriptor \u003d new InterviewEditCommand.EditInterviewDescriptor();"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public EditInterviewDescriptorBuilder(InterviewEditCommand.EditInterviewDescriptor descriptor) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new InterviewEditCommand.EditInterviewDescriptor(descriptor);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns an {@code EditInterviewDescriptor} with fields containing {@code interview}\u0027s details"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public EditInterviewDescriptorBuilder(Interview interview) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        descriptor \u003d new InterviewEditCommand.EditInterviewDescriptor();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        descriptor.setAddress(interview.getInterviewAddress());"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        descriptor.setDate(interview.getDate());"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        descriptor.setOnline(interview.getIsOnline());"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Sets the {@code ApplicationDate} of the {@code EditInternshipDescriptor} that we are building."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public EditInterviewDescriptorBuilder withInterviewDate(String date) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            descriptor.setDate(new ApplicationDate(LocalDate.parse(date, DateTimeFormatter.ofPattern(\"dd MM yyyy\"))));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            return this;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            return this;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Overloaded interviewDate setter that uses a LocalDate instead of a String."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public EditInterviewDescriptorBuilder withInterviewDate(LocalDate date) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            descriptor.setDate(new ApplicationDate(date));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return this;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return this;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditInternshipDescriptor} that we are building."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public EditInterviewDescriptorBuilder withAddress(String address) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditInternshipDescriptor} that we are building."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public EditInterviewDescriptorBuilder withIsOnline(String isOnline) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        descriptor.setOnline(Boolean.parseBoolean(isOnline));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public InterviewEditCommand.EditInterviewDescriptor build() {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return descriptor;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":5,"-":76}},{"path":"src/test/java/seedu/diary/testutil/InternshipApplicationBuilder.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Address;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.ApplicationDate;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Company;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Email;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Phone;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Priority;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Role;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.interview.Interview;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.status.Status;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * A utility class to help with building Internship Application objects."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class InternshipApplicationBuilder {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_COMPANY \u003d \"Google\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ROLE \u003d \"Product Manager\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"1600 Amphitheatre Parkway\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"99999999\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"richardma@gmail.com\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_APPLICATION_DATE \u003d \"12 03 2020\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final Integer DEFAULT_PRIORITY \u003d 10;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final Status DEFAULT_STATUS \u003d Status.APPLIED;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final Boolean DEFAULT_IS_GHOSTED_OR_REJECTED \u003d false;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final Status DEFAULT_LAST_STAGE \u003d null;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Company company;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Role role;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private Address address;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Phone phone;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Email email;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private ApplicationDate applicationDate;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Priority priority;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private Status status;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private Boolean isGhostedOrRejected;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Status lastStage;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private List\u003cInterview\u003e interviews;"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public InternshipApplicationBuilder() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        company \u003d new Company(DEFAULT_COMPANY);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        role \u003d new Role(DEFAULT_ROLE);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            applicationDate \u003d new ApplicationDate(LocalDate.parse(DEFAULT_APPLICATION_DATE,"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                DateTimeFormatter.ofPattern(\"dd MM yyyy\")));"},{"lineNumber":58,"author":{"gitId":"gerhean"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            e.printStackTrace();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        priority \u003d new Priority(DEFAULT_PRIORITY);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        status \u003d DEFAULT_STATUS;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        isGhostedOrRejected \u003d DEFAULT_IS_GHOSTED_OR_REJECTED;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        lastStage \u003d DEFAULT_LAST_STAGE;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        //default interviews is nil"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        interviews \u003d new ArrayList\u003c\u003e();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Initializes the InternshipApplicationBuilder with the data of {@code toCopy}."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public InternshipApplicationBuilder(InternshipApplication toCopy) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        company \u003d toCopy.getCompany();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        role \u003d toCopy.getRole();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        address \u003d toCopy.getAddress();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        phone \u003d toCopy.getPhone();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        email \u003d toCopy.getEmail();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        applicationDate \u003d toCopy.getApplicationDate();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        priority \u003d toCopy.getPriority();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        status \u003d toCopy.getStatus();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        isGhostedOrRejected \u003d toCopy.getIsGhostedOrRejected();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        lastStage \u003d toCopy.getLastStage();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        interviews \u003d toCopy.getInterviews();"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Sets the {@code Company} of the {@code InternshipApplication} that we are building."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public InternshipApplicationBuilder withCompany(String company) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        this.company \u003d new Company(company);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Sets the {@code Role} of the {@code InternshipApplication} that we are building."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public InternshipApplicationBuilder withRole(String role) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        this.role \u003d new Role(role);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code InternshipApplication} that we are building."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public InternshipApplicationBuilder withAddress(String address) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code InternshipApplication} that we are building."},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public InternshipApplicationBuilder withPhone(String phone) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code InternshipApplication} that we are building."},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public InternshipApplicationBuilder withEmail(String email) {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Sets the {@code Priority} of the {@code InternshipApplication} that we are building."},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public InternshipApplicationBuilder withPriority(Integer priority) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        this.priority \u003d new Priority(priority);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * Overloaded withPriority method to set priority from String."},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public InternshipApplicationBuilder withPriority(String priority) {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        return withPriority(Integer.parseInt(priority));"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * Sets the {@code ApplicationDate} of the {@code InternshipApplication} that we are building."},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public InternshipApplicationBuilder withApplicationDate(ApplicationDate applicationDate) {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        this.applicationDate \u003d applicationDate;"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * Overloaded withApplicationDate method to set date from String."},{"lineNumber":151,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public InternshipApplicationBuilder withApplicationDate(String applicationDate) {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            this.applicationDate \u003d new ApplicationDate(LocalDate.parse(applicationDate, DateTimeFormatter.ofPattern("},{"lineNumber":155,"author":{"gitId":"-"},"content":"                \"dd MM yyyy\")));"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            return this;"},{"lineNumber":157,"author":{"gitId":"gerhean"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            System.err.println(\"error in parsing date\");"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            return this;"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * Returns the {@code ApplicationDate} of the {@code InternshipApplication} that we are building."},{"lineNumber":165,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public ApplicationDate getApplicationDate() {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        return applicationDate;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * Sets the {@code Status} of the {@code InternshipApplication} that we are building."},{"lineNumber":172,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    public InternshipApplicationBuilder withStatus(Status status) {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        this.status \u003d status;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitId":"-"},"content":"     * Overloaded withStatus method to set status from String."},{"lineNumber":180,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    public InternshipApplicationBuilder withStatus(String status) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        return withStatus(Status.valueOf(status));"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitId":"-"},"content":"     * Sets the {@code lastStage} of the {@code InternshipApplication} that we are building."},{"lineNumber":187,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    public InternshipApplicationBuilder withLastStage(Status lastStage) {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        this.lastStage \u003d lastStage;"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitId":"-"},"content":"     * Overloaded withStatus method to set lastStage from String."},{"lineNumber":195,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    public InternshipApplicationBuilder withLastStage(String lastStage) {"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        return withLastStage(Status.valueOf(lastStage));"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":201,"author":{"gitId":"-"},"content":"     * Adds an Interview object into the array list of interviews."},{"lineNumber":202,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    public InternshipApplicationBuilder withInterview(Interview interview) {"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        this.interviews.add(interview);"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":209,"author":{"gitId":"-"},"content":"     * Returns the {@code interviews} of the {@code InternshipApplication} we are building."},{"lineNumber":210,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":211,"author":{"gitId":"-"},"content":"     * @return list of interviews"},{"lineNumber":212,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    public List\u003cInterview\u003e getInterview() {"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        return interviews;"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":218,"author":{"gitId":"-"},"content":"     * Builds an internship application with specified fields."},{"lineNumber":219,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":220,"author":{"gitId":"-"},"content":"     * @return InternshipApplication built."},{"lineNumber":221,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    public InternshipApplication build() {"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        InternshipApplication internshipApplication \u003d new InternshipApplication(company, role, address, phone, email,"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            applicationDate, priority, status);"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        internshipApplication \u003d internshipApplication.setLastStage(lastStage);"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        return internshipApplication;"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * Builds the Internship Application object with interviews."},{"lineNumber":231,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    public InternshipApplication buildWithInterviews() {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        InternshipApplication internshipApplication \u003d"},{"lineNumber":234,"author":{"gitId":"-"},"content":"            new InternshipApplication(company, role, address, phone, email, applicationDate, priority, status);"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        for (Interview interview : interviews) {"},{"lineNumber":236,"author":{"gitId":"-"},"content":"            internshipApplication.addInterview(interview);"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        return internshipApplication;"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":242,"author":{"gitId":"-"},"content":"     * Returns the earliest interview from today in the list of interviews of the application."},{"lineNumber":243,"author":{"gitId":"gerhean"},"content":"     *"},{"lineNumber":244,"author":{"gitId":"-"},"content":"     * @param todayDate The current date today."},{"lineNumber":245,"author":{"gitId":"-"},"content":"     * @return an Optional of LocalDate. Will return empty if there are no interviews after today\u0027s date."},{"lineNumber":246,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    public Optional\u003cInterview\u003e getEarliestInterview(LocalDate todayDate) {"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        if (interviews.size() \u003c\u003d 0) {"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"        Interview earliestInterview \u003d interviews.get(0);"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        for (Interview currentInterview : interviews) {"},{"lineNumber":254,"author":{"gitId":"-"},"content":"            LocalDate earliestDate \u003d earliestInterview.getInterviewDate();"},{"lineNumber":255,"author":{"gitId":"-"},"content":"            LocalDate currentDate \u003d currentInterview.getInterviewDate();"},{"lineNumber":256,"author":{"gitId":"-"},"content":"            if ((currentDate.compareTo(earliestDate) \u003c\u003d 0 || earliestDate.compareTo(todayDate) \u003c 0)"},{"lineNumber":257,"author":{"gitId":"-"},"content":"                \u0026\u0026 currentDate.compareTo(todayDate) \u003e\u003d 0) {"},{"lineNumber":258,"author":{"gitId":"-"},"content":"                earliestInterview \u003d currentInterview;"},{"lineNumber":259,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        return earliestInterview.getInterviewDate().compareTo(todayDate) \u003e\u003d 0"},{"lineNumber":262,"author":{"gitId":"-"},"content":"            ? Optional.of(earliestInterview) : Optional.empty();"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":17,"-":247}},{"path":"src/test/java/seedu/diary/testutil/InternshipApplicationUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_COMPANY;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.AddCommand;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.EditCommand;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * A utility class for Internship Application."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class InternshipApplicationUtil {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code InternshipApplication}."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static String getAddCommand(InternshipApplication internshipApplication) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getInternshipApplicationDetails(internshipApplication);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code InternshipApplication}\u0027s details."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static String getInternshipApplicationDetails(InternshipApplication internshipApplication) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"dd MM YYYY\");"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_COMPANY + internshipApplication.getCompany().fullCompany + \" \");"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ROLE + internshipApplication.getRole().fullRole + \" \");"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + internshipApplication.getAddress().value + \" \");"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + internshipApplication.getPhone().value + \" \");"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + internshipApplication.getEmail().value + \" \");"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_DATE + dateFormat"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            .format(internshipApplication.getApplicationDate().fullApplicationDate) + \" \");"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PRIORITY + internshipApplication.getPriority().toString() + \" \");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_STATUS + internshipApplication.getStatus().name() + \" \");"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditInternshipDescriptor}\u0027s details."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static String getEditInternshipApplicationDescriptorDetails("},{"lineNumber":54,"author":{"gitId":"-"},"content":"        EditCommand.EditInternshipDescriptor descriptor) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"dd MM YYYY\");"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        descriptor.getCompany().ifPresent(company -\u003e sb.append(PREFIX_COMPANY).append(company.fullCompany).append(\" \"));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        descriptor.getRole().ifPresent(role -\u003e sb.append(PREFIX_ROLE).append(role.fullRole).append(\" \"));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        descriptor.getDate().ifPresent(date -\u003e sb.append(PREFIX_DATE)"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            .append(dateFormat.format(date.fullApplicationDate)).append(\" \"));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        descriptor.getPriority()"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            .ifPresent(priority -\u003e sb.append(PREFIX_PRIORITY).append(priority.toString()).append(\" \"));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        descriptor.getStatus().ifPresent(status -\u003e sb.append(PREFIX_STATUS).append(status.name()).append(\" \"));"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Modifies an internship application to be archived."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static InternshipApplication createArchivedInternshipApplication("},{"lineNumber":75,"author":{"gitId":"-"},"content":"        InternshipApplication internshipApplication) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        InternshipApplication archivedInternship \u003d new InternshipApplication("},{"lineNumber":77,"author":{"gitId":"-"},"content":"            internshipApplication.getCompany(),"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            internshipApplication.getRole(),"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            internshipApplication.getAddress(),"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            internshipApplication.getPhone(),"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            internshipApplication.getEmail(),"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            internshipApplication.getApplicationDate(),"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            internshipApplication.getPriority(),"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            internshipApplication.getStatus(),"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            true, new ArrayList\u003c\u003e()"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(archivedInternship.isArchived());"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return archivedInternship;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Modifies an internship application to be unarchived."},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public static InternshipApplication createUnarchivedInternshipApplication("},{"lineNumber":95,"author":{"gitId":"-"},"content":"        InternshipApplication internshipApplication) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        InternshipApplication archivedInternship \u003d new InternshipApplication("},{"lineNumber":97,"author":{"gitId":"-"},"content":"            internshipApplication.getCompany(),"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            internshipApplication.getRole(),"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            internshipApplication.getAddress(),"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            internshipApplication.getPhone(),"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            internshipApplication.getEmail(),"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            internshipApplication.getApplicationDate(),"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            internshipApplication.getPriority(),"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            internshipApplication.getStatus(),"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            false, new ArrayList\u003c\u003e()"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertTrue(archivedInternship.isArchived());"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        return archivedInternship;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":12,"-":99}},{"path":"src/test/java/seedu/diary/testutil/InternshipDiaryBuilder.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.InternshipDiary;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A utility class to help with building InternshipDiary objects."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * {@code InternshipDiary diary \u003d"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * new InternshipDiaryBuilder().withInternshipApplication(new InternshipApplication(\"Google\", ...)).build();}"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class InternshipDiaryBuilder {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private InternshipDiary internshipDiary;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public InternshipDiaryBuilder() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        internshipDiary \u003d new InternshipDiary();"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public InternshipDiaryBuilder(InternshipDiary internshipDiary) {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.internshipDiary \u003d internshipDiary;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Adds a new {@code InternshipApplication} to the {@code InternshipDiary} that we are building."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public InternshipDiaryBuilder withInternshipApplication(InternshipApplication application) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        internshipDiary.loadInternshipApplication(application);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public InternshipDiary build() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return internshipDiary;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":3,"-":32}},{"path":"src/test/java/seedu/diary/testutil/InterviewBuilder.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.Address;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.ApplicationDate;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.interview.Interview;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A utility class to help build a list of Interview objects"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class InterviewBuilder {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final boolean IS_NOT_ONLINE \u003d false;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS_1 \u003d \"66 Big Avenue, Unit 10-350\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_DATE_1 \u003d \"12 03 2020\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private boolean isOnline;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Address interviewAddress;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private ApplicationDate interviewDate;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public InterviewBuilder() {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.isOnline \u003d IS_NOT_ONLINE;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.interviewAddress \u003d new Address(DEFAULT_ADDRESS_1);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.interviewDate \u003d new ApplicationDate(DEFAULT_DATE_1);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public InterviewBuilder(Interview toCopy) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.isOnline \u003d toCopy.getIsOnline();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.interviewDate \u003d new ApplicationDate(toCopy.getInterviewDate());"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.interviewAddress \u003d toCopy.getInterviewAddress();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Sets the {@code isOnline} based on a boolean."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public InterviewBuilder withIsOnline(boolean isOnline) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.isOnline \u003d isOnline;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Sets isOnline based on a String."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public InterviewBuilder withIsOnline(String isOnline) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return withIsOnline(Boolean.parseBoolean(isOnline));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Sets the {@code interviewAddress} based on a String."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public InterviewBuilder withAddress(String address) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.interviewAddress \u003d new Address(address);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Sets the {@code interviewDate} based on a String."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public InterviewBuilder withDate(String date) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.interviewDate \u003d new ApplicationDate(date);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Overloaded method to set date from {@code LocalDate}"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public InterviewBuilder withDate(LocalDate date) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.interviewDate \u003d new ApplicationDate(date);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public Interview build() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return Interview.createInterview(isOnline, interviewDate, interviewAddress);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":4,"-":73}},{"path":"src/test/java/seedu/diary/testutil/InterviewUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.parser.CliSyntax.PREFIX_IS_ONLINE;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.InterviewCommand;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.logic.commands.interviewsubcommands.InterviewEditCommand;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.interview.Interview;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A utility class for Interviews."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class InterviewUtil {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code interview}."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Interview interview) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        return InterviewCommand.COMMAND_WORD + \" \" + INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + getInterviewDetails(interview);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code Interview}\u0027s details."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static String getInterviewDetails(Interview interview) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"dd MM YYYY\");"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + interview.getInterviewAddress().value + \" \");"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_DATE + dateFormat"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .format(interview.getInterviewDate()) + \" \");"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_IS_ONLINE + String.valueOf(interview.getIsOnline()) + \" \");"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditInterviewDescriptor}\u0027s details."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static String getEditInterviewApplicationDescriptorDetails("},{"lineNumber":44,"author":{"gitId":"-"},"content":"        InterviewEditCommand.EditInterviewDescriptor descriptor) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"dd MM YYYY\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        descriptor.getInterviewDate().ifPresent(date -\u003e sb.append(PREFIX_DATE)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            .append(dateFormat.format(date.fullApplicationDate)).append(\" \"));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        descriptor.getIsOnline()"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            .ifPresent(isOnline -\u003e sb.append(PREFIX_IS_ONLINE).append(isOnline.toString()).append(\" \"));"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":8,"-":47}},{"path":"src/test/java/seedu/diary/testutil/PredicateUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.AddressContainsKeywordsPredicate;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.CompanyContainsKeywordsPredicate;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.EmailContainsKeywordsPredicate;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.PhoneContainsNumbersPredicate;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.PriorityContainsNumbersPredicate;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.RoleContainsKeywordsPredicate;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.predicate.StatusContainsKeywordsPredicate;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * A utility class to help create predicates."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class PredicateUtil {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code CompanyContainsKeywordsPredicate}."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static CompanyContainsKeywordsPredicate prepareCompanyPredicate(String userInput) {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new CompanyContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code RoleContainsKeywordsPredicate}."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static RoleContainsKeywordsPredicate prepareRolePredicate(String userInput) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return new RoleContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code AddressContainsKeywordsPredicate}."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static AddressContainsKeywordsPredicate prepareAddressPredicate(String userInput) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return new AddressContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code PhoneContainsNumbersPredicate}."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static PhoneContainsNumbersPredicate preparePhonePredicate(String userInput) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return new PhoneContainsNumbersPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code EmailContainsKeywordsPredicate}."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static EmailContainsKeywordsPredicate prepareEmailPredicate(String userInput) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return new EmailContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code PriorityContainsNumbersPredicate}."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static PriorityContainsNumbersPredicate preparePriorityPredicate(String userInput) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return new PriorityContainsNumbersPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code StatusContainsKeywordsPredicate}."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static StatusContainsKeywordsPredicate prepareStatusPredicate(String userInput) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new StatusContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":8,"-":59}},{"path":"src/test/java/seedu/diary/testutil/SerializableTestClass.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A class used to test serialization and deserialization"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class SerializableTestClass {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""},{"lineNumber":14,"author":{"gitId":"-"},"content":"        + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""},{"lineNumber":15,"author":{"gitId":"-"},"content":"        + \"  \\\"listOfLocalDateTimes\\\" : \""},{"lineNumber":16,"author":{"gitId":"-"},"content":"        + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""},{"lineNumber":17,"author":{"gitId":"-"},"content":"        + \"\\\"0001-01-01T01:01:00\\\" ],%n\""},{"lineNumber":18,"author":{"gitId":"-"},"content":"        + \"  \\\"mapOfIntegerToString\\\" : {%n\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"        + \"    \\\"1\\\" : \\\"One\\\",%n\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"        + \"    \\\"2\\\" : \\\"Two\\\",%n\""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        + \"    \\\"3\\\" : \\\"Three\\\"%n\""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        + \"  }%n\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        + \"}\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private String name;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static String getNameTestValue() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return NAME_TEST_VALUE;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static List\u003cLocalDateTime\u003e getListTestValues() {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MIN);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MAX);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(1, \"One\");"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(2, \"Two\");"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(3, \"Three\");"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void setTestValues() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        name \u003d getNameTestValue();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes \u003d getListTestValues();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        mapOfIntegerToString \u003d getHashMapTestValues();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public String getName() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":1,"-":73}},{"path":"src/test/java/seedu/diary/testutil/TestUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.Model;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns the middle index of the internship application in the {@code model}\u0027s internship application list."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredInternshipApplicationList().size() / 2);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns the last index of the internship application in the {@code model}\u0027s internship application list."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredInternshipApplicationList().size());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Returns the internship application in the {@code model}\u0027s internship application list at {@code index}."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static InternshipApplication getInternshipApplication(Model model, Index index) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return model.getFilteredInternshipApplicationList().get(index.getZeroBased());"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":4,"-":51}},{"path":"src/test/java/seedu/diary/testutil/TypicalIndexes.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import seedu.diary.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Index INDEX_FIRST_INTERNSHIP_APPLICATION \u003d Index.fromOneBased(1);"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final Index INDEX_SECOND_INTERNSHIP_APPLICATION \u003d Index.fromOneBased(2);"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final Index INDEX_THIRD_INTERNSHIP_APPLICATION \u003d Index.fromOneBased(3);"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final List\u003cIndex\u003e INDEX_LIST_FIRST_INTERNSHIP_APPLICATION \u003d"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        new ArrayList\u003c\u003e("},{"lineNumber":19,"author":{"gitId":"-"},"content":"            Arrays.asList(INDEX_FIRST_INTERNSHIP_APPLICATION, INDEX_SECOND_INTERNSHIP_APPLICATION)"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final List\u003cIndex\u003e INDEX_LIST_SECOND_INTERNSHIP_APPLICATION \u003d"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        new ArrayList\u003c\u003e("},{"lineNumber":23,"author":{"gitId":"-"},"content":"            Arrays.asList(INDEX_FIRST_INTERNSHIP_APPLICATION, INDEX_THIRD_INTERNSHIP_APPLICATION)"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final Index INDEX_FIRST_INTERVIEW \u003d Index.fromOneBased(1);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final Index INDEX_SECOND_INTERVIEW \u003d Index.fromOneBased(2);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final Index INDEX_THIRD_INTERVIEW \u003d Index.fromOneBased(3);"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":2,"-":28}},{"path":"src/test/java/seedu/diary/testutil/TypicalInternshipApplications.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_COMPANY_AMY;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_COMPANY_BOB;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_DATE_AMY;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_DATE_BOB;"},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_LAST_STAGE_AMY;"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_LAST_STAGE_BOB;"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_PRIORITY_AMY;"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_PRIORITY_BOB;"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_ROLE_AMY;"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_ROLE_BOB;"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_STATUS_AMY;"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_STATUS_BOB;"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInterviews.NUS;"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.TypicalInterviews.ONLINE;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"import java.time.LocalDate;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.InternshipDiary;"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.ApplicationDate;"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.InternshipApplication;"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.status.Status;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code InternshipApplication} objects to be used in tests."},{"lineNumber":36,"author":{"gitId":"-"},"content":" */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class TypicalInternshipApplications {"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final InternshipApplication GOOGLE \u003d new InternshipApplicationBuilder().withCompany(\"Google\")"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        .withRole(\"Software Engineer\").withAddress(\"1600 Amphitheatre Parkway\")"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        .withPhone(\"94351253\").withEmail(\"larry@google.com\")"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        .withStatus(Status.APPLIED)"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        .withApplicationDate(new ApplicationDate(LocalDate.of(2020, 3, 23)))"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        .withPriority(10)"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        .withLastStage(Status.WISHLIST)"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        .build();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final InternshipApplication FACEBOOK \u003d new InternshipApplicationBuilder().withCompany(\"Facebook\")"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        .withRole(\"Product Management\").withAddress(\"1 Hacker Way, Menlo Park\")"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        .withPhone(\"99751354\").withEmail(\"mark@google.com\")"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        .withStatus(Status.INTERVIEW)"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        .withApplicationDate(new ApplicationDate(LocalDate.of(2020, 3, 25)))"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        .withPriority(8)"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        .withLastStage(Status.APPLIED)"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        .build();"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final InternshipApplication GOOGLE_WITH_INTERVIEW \u003d new InternshipApplicationBuilder()"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        .withCompany(\"Google\")"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        .withRole(\"Software Engineer\").withAddress(\"1600 Amphitheatre Parkway\")"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        .withPhone(\"94351253\").withEmail(\"larry@google.com\")"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        .withStatus(Status.APPLIED)"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        .withApplicationDate(new ApplicationDate(LocalDate.of(2019, 12, 1)))"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        .withPriority(10)"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        .withInterview(new InterviewBuilder().build())"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        .withInterview(new InterviewBuilder(NUS).build())"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        .buildWithInterviews();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static final InternshipApplication FACEBOOK_WITH_INTERVIEW \u003d new InternshipApplicationBuilder()"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        .withCompany(\"Facebook\")"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        .withRole(\"Product Management\").withAddress(\"1 Hacker Way, Menlo Park\")"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        .withPhone(\"99751354\").withEmail(\"mark@google.com\")"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        .withStatus(Status.REJECTED)"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        .withApplicationDate(new ApplicationDate(LocalDate.of(2009, 11, 11)))"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        .withPriority(8)"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        .withInterview(new InterviewBuilder().build()).withInterview(new InterviewBuilder(ONLINE).build())"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        .buildWithInterviews();"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    // Manually added - Internship\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public static final InternshipApplication AMY \u003d new InternshipApplicationBuilder()"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        .withCompany(VALID_COMPANY_AMY).withPhone(VALID_PHONE_AMY).withRole(VALID_ROLE_AMY)"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withApplicationDate(VALID_DATE_AMY)"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        .withPriority(VALID_PRIORITY_AMY).withStatus(VALID_STATUS_AMY).withLastStage(VALID_LAST_STAGE_AMY)"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        .build();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public static final InternshipApplication BOB \u003d new InternshipApplicationBuilder()"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        .withCompany(VALID_COMPANY_BOB).withPhone(VALID_PHONE_BOB).withRole(VALID_ROLE_BOB)"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withApplicationDate(VALID_DATE_BOB)"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        .withPriority(VALID_PRIORITY_BOB).withStatus(VALID_STATUS_BOB).withLastStage(VALID_LAST_STAGE_BOB)"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        .build();"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"gerhean"},"content":"    private TypicalInternshipApplications() {"},{"lineNumber":89,"author":{"gitId":"gerhean"},"content":"    } // prevents instantiation"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Returns an {@code InternshipDiary} with all the typical internship applications."},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public static InternshipDiary getTypicalInternshipDiary() {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        InternshipDiary diary \u003d new InternshipDiary();"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        for (InternshipApplication application : getTypicalInternshipApplications()) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            diary.loadInternshipApplication(application);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return diary;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Returns an {@code InternshipDiary} with all the typical internship applications including interviews."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public static InternshipDiary getTypicalInternshipDiaryWithInterviews() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        InternshipDiary diary \u003d new InternshipDiary();"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        for (InternshipApplication application : getTypicalInternshipApplicationsWithInterviews()) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            diary.loadInternshipApplication(application);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return diary;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public static List\u003cInternshipApplication\u003e getTypicalInternshipApplications() {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(GOOGLE, FACEBOOK));"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public static List\u003cInternshipApplication\u003e getTypicalInternshipApplicationsWithInterviews() {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(GOOGLE_WITH_INTERVIEW, FACEBOOK_WITH_INTERVIEW));"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":28,"-":92}},{"path":"src/test/java/seedu/diary/testutil/TypicalInterviews.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_ADDRESS_NUS;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_ADDRESS_ONLINE;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_DATE_NUS;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_DATE_ONLINE;"},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_IS_ONLINE_NUS;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.logic.commands.CommandTestUtil.VALID_IS_ONLINE_ONLINE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":"import seedu.diary.model.internship.interview.Interview;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class consisting of a list of {@code Interview} objects to be used in tests."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TypicalInterviews {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final Interview CENTRAL_LIBRARY \u003d new InterviewBuilder()"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        .withAddress(\"215 Bras Basah\").withDate(\"05 05 2020\").withIsOnline(false).build();"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final Interview ORCHARD_TOWER \u003d new InterviewBuilder()"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        .withAddress(\"Orchard Towers 12-555\").withDate(\"20 10 2020\").withIsOnline(false).build();"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final Interview NUS \u003d new InterviewBuilder().withAddress(VALID_ADDRESS_NUS)"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        .withDate(VALID_DATE_NUS).withIsOnline(VALID_IS_ONLINE_NUS).build();"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final Interview ONLINE \u003d new InterviewBuilder().withAddress(VALID_ADDRESS_ONLINE)"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        .withDate(VALID_DATE_ONLINE).withIsOnline(VALID_IS_ONLINE_ONLINE).build();"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":8,"-":18}},{"path":"src/test/java/seedu/diary/ui/EnteredCommandsHistoryTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.ui;"},{"lineNumber":2,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static org.junit.jupiter.api.Assertions.assertNull;"},{"lineNumber":6,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":7,"author":{"gitId":"gerhean"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":9,"author":{"gitId":"gerhean"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"gerhean"},"content":" * Contains unit tests for {@code EnteredCommandsHistory}."},{"lineNumber":11,"author":{"gitId":"gerhean"},"content":" */"},{"lineNumber":12,"author":{"gitId":"gerhean"},"content":"public class EnteredCommandsHistoryTest {"},{"lineNumber":13,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"    public void size_noSize_sizeCappedAt20() {"},{"lineNumber":16,"author":{"gitId":"gerhean"},"content":"        EnteredCommandsHistory commandsHistory \u003d new EnteredCommandsHistory();"},{"lineNumber":17,"author":{"gitId":"gerhean"},"content":"        assertEquals(commandsHistory.size(), 0);"},{"lineNumber":18,"author":{"gitId":"gerhean"},"content":"        for (int i \u003d 0; i \u003c 19; i++) {"},{"lineNumber":19,"author":{"gitId":"gerhean"},"content":"            commandsHistory.add(\"a\");"},{"lineNumber":20,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"gerhean"},"content":"        assertEquals(commandsHistory.size(), 19);"},{"lineNumber":22,"author":{"gitId":"gerhean"},"content":"        commandsHistory.add(\"a\");"},{"lineNumber":23,"author":{"gitId":"gerhean"},"content":"        assertEquals(commandsHistory.size(), 20);"},{"lineNumber":24,"author":{"gitId":"gerhean"},"content":"        commandsHistory.add(\"a\");"},{"lineNumber":25,"author":{"gitId":"gerhean"},"content":"        assertEquals(commandsHistory.size(), 20);"},{"lineNumber":26,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":28,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"gerhean"},"content":"    public void constructor_hasSize_sizeCapped() {"},{"lineNumber":30,"author":{"gitId":"gerhean"},"content":"        int maxSize \u003d 10;"},{"lineNumber":31,"author":{"gitId":"gerhean"},"content":"        EnteredCommandsHistory commandsHistory \u003d new EnteredCommandsHistory(maxSize);"},{"lineNumber":32,"author":{"gitId":"gerhean"},"content":"        assertEquals(commandsHistory.size(), 0);"},{"lineNumber":33,"author":{"gitId":"gerhean"},"content":"        for (int i \u003d 0; i \u003c maxSize - 1; i++) {"},{"lineNumber":34,"author":{"gitId":"gerhean"},"content":"            commandsHistory.add(\"a\");"},{"lineNumber":35,"author":{"gitId":"gerhean"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"gerhean"},"content":"        assertEquals(commandsHistory.size(), maxSize - 1);"},{"lineNumber":37,"author":{"gitId":"gerhean"},"content":"        commandsHistory.add(\"a\");"},{"lineNumber":38,"author":{"gitId":"gerhean"},"content":"        assertEquals(commandsHistory.size(), maxSize);"},{"lineNumber":39,"author":{"gitId":"gerhean"},"content":"        commandsHistory.add(\"a\");"},{"lineNumber":40,"author":{"gitId":"gerhean"},"content":"        assertEquals(commandsHistory.size(), maxSize);"},{"lineNumber":41,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":43,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"gerhean"},"content":"    public void iterateNext_noNextHistory_returnNull() {"},{"lineNumber":45,"author":{"gitId":"gerhean"},"content":"        EnteredCommandsHistory commandsHistory \u003d new EnteredCommandsHistory();"},{"lineNumber":46,"author":{"gitId":"gerhean"},"content":"        assertNull(commandsHistory.iterateNext());"},{"lineNumber":47,"author":{"gitId":"gerhean"},"content":"        commandsHistory.add(\"a\");"},{"lineNumber":48,"author":{"gitId":"gerhean"},"content":"        commandsHistory.iterateNext();"},{"lineNumber":49,"author":{"gitId":"gerhean"},"content":"        assertNull(commandsHistory.iterateNext());"},{"lineNumber":50,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":52,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"gerhean"},"content":"    public void iteratePrevious_noPreviousHistory_returnNullAndEmptyString() {"},{"lineNumber":54,"author":{"gitId":"gerhean"},"content":"        EnteredCommandsHistory commandsHistory \u003d new EnteredCommandsHistory();"},{"lineNumber":55,"author":{"gitId":"gerhean"},"content":"        assertNull(commandsHistory.iteratePrevious());"},{"lineNumber":56,"author":{"gitId":"gerhean"},"content":"        commandsHistory.add(\"a\");"},{"lineNumber":57,"author":{"gitId":"gerhean"},"content":"        commandsHistory.iterateNext();"},{"lineNumber":58,"author":{"gitId":"gerhean"},"content":"        commandsHistory.iteratePrevious();"},{"lineNumber":59,"author":{"gitId":"gerhean"},"content":"        assertEquals(commandsHistory.iteratePrevious(), \"\");"},{"lineNumber":60,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":62,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"gerhean"},"content":"    public void iterate_resetIterator_sameOrder() {"},{"lineNumber":64,"author":{"gitId":"gerhean"},"content":"        EnteredCommandsHistory commandsHistory \u003d new EnteredCommandsHistory();"},{"lineNumber":65,"author":{"gitId":"gerhean"},"content":"        commandsHistory.add(\"d\");"},{"lineNumber":66,"author":{"gitId":"gerhean"},"content":"        commandsHistory.add(\"c\");"},{"lineNumber":67,"author":{"gitId":"gerhean"},"content":"        commandsHistory.add(\"b\");"},{"lineNumber":68,"author":{"gitId":"gerhean"},"content":"        commandsHistory.add(\"a\");"},{"lineNumber":69,"author":{"gitId":"gerhean"},"content":"        assertEquals(commandsHistory.iterateNext(), \"a\");"},{"lineNumber":70,"author":{"gitId":"gerhean"},"content":"        assertEquals(commandsHistory.iterateNext(), \"b\");"},{"lineNumber":71,"author":{"gitId":"gerhean"},"content":"        assertEquals(commandsHistory.iterateNext(), \"c\");"},{"lineNumber":72,"author":{"gitId":"gerhean"},"content":"        assertEquals(commandsHistory.iterateNext(), \"d\");"},{"lineNumber":73,"author":{"gitId":"gerhean"},"content":"        assertEquals(commandsHistory.iteratePrevious(), \"c\");"},{"lineNumber":74,"author":{"gitId":"gerhean"},"content":"        assertEquals(commandsHistory.iteratePrevious(), \"b\");"},{"lineNumber":75,"author":{"gitId":"gerhean"},"content":"        commandsHistory.resetIterator();"},{"lineNumber":76,"author":{"gitId":"gerhean"},"content":"        assertEquals(commandsHistory.iterateNext(), \"a\");"},{"lineNumber":77,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":79,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"gerhean"},"content":"    public void resetIterator_iteratorNotNull_iteratePreviousNull() {"},{"lineNumber":81,"author":{"gitId":"gerhean"},"content":"        EnteredCommandsHistory commandsHistory \u003d new EnteredCommandsHistory();"},{"lineNumber":82,"author":{"gitId":"gerhean"},"content":"        commandsHistory.add(\"a\");"},{"lineNumber":83,"author":{"gitId":"gerhean"},"content":"        commandsHistory.iterateNext();"},{"lineNumber":84,"author":{"gitId":"gerhean"},"content":"        commandsHistory.resetIterator();"},{"lineNumber":85,"author":{"gitId":"gerhean"},"content":"        assertNull(commandsHistory.iteratePrevious());"},{"lineNumber":86,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":88,"author":{"gitId":"gerhean"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"gerhean"},"content":"    public void add_iteratorNotNull_resetIterator() {"},{"lineNumber":90,"author":{"gitId":"gerhean"},"content":"        EnteredCommandsHistory commandsHistory \u003d new EnteredCommandsHistory();"},{"lineNumber":91,"author":{"gitId":"gerhean"},"content":"        commandsHistory.add(\"a\");"},{"lineNumber":92,"author":{"gitId":"gerhean"},"content":"        commandsHistory.iterateNext();"},{"lineNumber":93,"author":{"gitId":"gerhean"},"content":"        commandsHistory.add(\"a\");"},{"lineNumber":94,"author":{"gitId":"gerhean"},"content":"        commandsHistory.iterateNext();"},{"lineNumber":95,"author":{"gitId":"gerhean"},"content":"        assertNotNull(commandsHistory.iterateNext());"},{"lineNumber":96,"author":{"gitId":"gerhean"},"content":"        assertNull(commandsHistory.iterateNext());"},{"lineNumber":97,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"gerhean"},"content":"}"}],"authorContributionMap":{"gerhean":98}},{"path":"src/test/java/seedu/diary/ui/TestFxmlObject.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.beans.DefaultProperty;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A test object which can be constructed via an FXML file."},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"@DefaultProperty(\"text\")"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class TestFxmlObject {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private String text;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":"    public TestFxmlObject() {"},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public TestFxmlObject(String text) {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        setText(text);"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public String getText() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return text;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setText(String text) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.text \u003d text;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            || (other instanceof TestFxmlObject // instanceof handles nulls"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":3,"-":33}},{"path":"src/test/java/seedu/diary/ui/UiPartTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gerhean"},"content":"package seedu.diary.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"gerhean"},"content":"import static seedu.diary.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.net.URL;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":14,"author":{"gitId":"gerhean"},"content":""},{"lineNumber":15,"author":{"gitId":"gerhean"},"content":"import seedu.diary.MainApp;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class UiPartTest {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void constructor_nullFileUrl_throwsNullPointerException() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileUrl_throwsAssertionError() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void constructor_validFileUrl_loadsFile() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void constructor_validFileWithFxRootUrl_loadsFile() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        TestFxmlObject root \u003d new TestFxmlObject();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void constructor_nullFileName_throwsNullPointerException() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void constructor_missingFileName_throwsNullPointerException() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileName_throwsAssertionError() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private URL getTestFileUrl(String testFilePath) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        String testFilePathInView \u003d \"/view/\" + testFilePath;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return testFileUrl;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * UiPart used for testing."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        @FXML"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl, T root) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl, root);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName, T root) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            super(fxmlFileName, root);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl) {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            super(fxmlFileName);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gerhean":4,"-":111}},{"path":"src/test/resources/view/UiPartTest/validFile.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"\u003c?import seedu.diary.ui.TestFxmlObject?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"}],"authorContributionMap":{"gerhean":1,"-":3}},{"path":"src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gerhean"},"content":"\u003cfx:root type\u003d\"seedu.diary.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \u003ctext\u003eHello World!\u003c/text\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"gerhean":1,"-":5}}]
